<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-01-20T20:29:43+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">リモートワーク4年目間近で落ちた穴</title><link href="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work" rel="alternate" type="text/html" title="リモートワーク4年目間近で落ちた穴" /><published>2020-01-11T00:00:00+09:00</published><updated>2020-01-11T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work">&lt;p&gt;フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。&lt;/p&gt;

&lt;p&gt;しかし今回自分が遭遇した問題は、今後のリモートワークにおいてどの会社でも共通して発生する問題だなと思いました。
この問題の原因や何故起きてしまったのか？どうやったら回避や解決ができるのか？についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;テキストコミュニケーションは信頼関係でカバーしてる&quot;&gt;テキストコミュニケーションは信頼関係でカバーしてる&lt;/h2&gt;
&lt;p&gt;フルリモートワークでは、互いの顔は見えずメインコミュニケーション手段としてslackなどのテキスト会話が主な手段です。
zoomやslack callなどビデオチャットも使いますが、常に繋がっているという環境ではありません。
主に会議体ではビデオチャット、それ以外ではテキストチャットに二分します。&lt;/p&gt;

&lt;p&gt;そうなると、非言語コミュニケーションもできない、インタラクティブ性の低いテキストコミュニケーションでは、
入力/出力は全て文字の一択となり、次のような問題が起きます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前提知識の違いからくる齟齬&lt;/li&gt;
  &lt;li&gt;文字の読み間違えからくる齟齬&lt;/li&gt;
  &lt;li&gt;知識差からくる長文または短文&lt;/li&gt;
  &lt;li&gt;全員知識ないことで起きる混乱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは全て議論への根気負けが原因です。途中で理解する姿勢がなくなったらその時点で議論は成り立ちません。
話す側は相手の気持ちや知識差を意識して、
聞く側は相手が何を言おうとしてるのか意識して
両者が相手を尊重、理解する姿勢が整うことは必須条件です。&lt;/p&gt;

&lt;p&gt;しかし今回起きた問題は、これらが限界を超えた結果、その際にどうすることもできないことに気づきました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きたのか&quot;&gt;何が起きたのか？&lt;/h2&gt;

&lt;p&gt;会社要因でメンタルがきついときに解決する術がないと、どうすることもできず詰んでしまいます。
プライベートに重きを置く人で仕事に深入りしないタイプであれば、あまり問題視することではありません。
しかし、会社やサービスを良くしようと頑張るタイプであれば、避けることできない葛藤を解決することになります。
サービスを良くしようという意思が強ければ強いほど、逃げたくても逃げようがありません。&lt;/p&gt;

&lt;h2 id=&quot;何が原因か&quot;&gt;何が原因か？&lt;/h2&gt;

&lt;p&gt;これはメンタルがきつくなったこと自体の原因ではなく、なぜそれが落とし穴だと思ったかなについて書いてます。&lt;/p&gt;

&lt;p&gt;リモーワークではちょっとした雑談も全部誰もが見れる状況となります、そのため大振りふった雑談やちょっとした愚痴などは書くことで、それを良しとしない人が見るとそれは会社にとって迷惑行為となりかねません。&lt;/p&gt;

&lt;p&gt;しかし人は仕事会話だけで連携が成り立つほど単純ではありません。
ちょっとした人間性や趣味や価値観といった背景を知ることでその人に話しかけやすくなったり、無理なお願いをしやすくなったり、反対に無理なお願いをしないように気をつけたりして、お互いに支え合った行動ができるようになります。&lt;/p&gt;

&lt;p&gt;雑談はやりすぎは害ですが、ほどよく使うことでストレス発散や互いの信頼関係に強い効果を発揮します。
人によっては本当に仕事会話だけで成り立つ人もいますが、全員が全員そうでもありません。&lt;/p&gt;

&lt;p&gt;人それぞれ適切な雑談量は存在します。&lt;/p&gt;

&lt;p&gt;その雑談をする、相談する、愚痴相手になってもらうといった寄り添う行為がリモートワークでは存在しにくいです。
なぜならまずメンタルが落ちてるのに気づかないからです。
オフィスでは反応が変だったり、頭抱えてる状態が続いてたりと、非言語のアウトプットが無自覚ににじみ出てることで、他の人が気づいて同僚が気を使って話しかけたり、上司が相談に乗ることもあると思います。&lt;/p&gt;

&lt;p&gt;しかしテキストコミュニケーションでは、前述したように手段はテキストだけのため、自分でそれを出す必要があります。
また加えて上司が見える場所でそれをする、もしくは上司に直接相談するなど、明確な行動として動き出す必要があります。
LINEの既読のように上司が見たと分かるのであればまだ分かりやすいですが、slackではその様な機能はありません。&lt;/p&gt;

&lt;p&gt;つまり、通常時は問題ないが、不安定時に支え合う仕組みやきっかけが存在しません。
今回私は、その穴にハマってしまい苦労しました。&lt;/p&gt;

&lt;h2 id=&quot;どうやれば解決できるか&quot;&gt;どうやれば解決できるか？&lt;/h2&gt;

&lt;p&gt;部下の働ける環境や生産性を維持、向上するのは上司の役目の一つです。
上司からのレポートライン同様、上司への報告など上司が気づく仕組みづくりが必要です。&lt;/p&gt;

&lt;p&gt;また本当の雑談の場というのは必要です。それが定例となると無駄な会議体となりなくなることは明白です。
なので通常のslack上で互いに話しやすい支えやすい信頼関係は複数人必要です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-11-pitfall-of-remote-work.jpg" /></entry><entry><title type="html">GitHubのConfirm your account recovery settingsについて</title><link href="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings" rel="alternate" type="text/html" title="GitHubのConfirm your account recovery settingsについて" /><published>2020-01-05T00:00:00+09:00</published><updated>2020-01-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings</id><content type="html" xml:base="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings">&lt;p&gt;近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。&lt;br /&gt;
特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。&lt;br /&gt;
実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。&lt;/p&gt;

&lt;p&gt;加えて近年のサービスではアクセストークンを第三者へ渡すことで外部からサービスアクセスができる連携機能も重要なエコシステムとなっています。&lt;br /&gt;
しかしリスクとしては個人とサービスだけでなくその第三者がセキュリティ意識が低いことで漏洩リスクが高まります。&lt;/p&gt;

&lt;p&gt;今回はGitHubでよく出てくる「Confirm your account recovery settings」画面について1つずつ確認したのでそれを説明します。&lt;/p&gt;

&lt;h2 id=&quot;confirm-your-account-recovery-settings-画面とは&quot;&gt;Confirm your account recovery settings 画面とは？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面のことです。GitHubにアクセスしたとき一定の期間毎に表示されるようで、&lt;br /&gt;
見かける方はセキュリティ対策が不十分である可能性があります。&lt;/p&gt;

&lt;h2 id=&quot;two-factor-methods-とは&quot;&gt;Two-factor methods とは？&lt;/h2&gt;

&lt;p&gt;Two-factorとは2要素認証のことで通称2FA(Two-factor Authentication)と呼ばれています。&lt;br /&gt;
自身の知っている知識情報だけでなく、自身の所有物を使ったり、自分自身の身体的特徴などを2つの認証要素で認証することを言います。&lt;/p&gt;

&lt;p&gt;GitHubではAuthenticator app(認証アプリ)、Security keys(物理キー)、SMS number(スマホのSMSメール)の3種類の手段が用意されています。
注意点としては2FA後にブラウザを許可し2FAをスキップする設定もありますので、許可すると所有認証となる物だけでなくでなくPCをロストするとリスクが拡大します。&lt;/p&gt;

&lt;h3 id=&quot;authenticator-app&quot;&gt;Authenticator app&lt;/h3&gt;

&lt;p&gt;スマホやPCアプリによる認証コードを出してくれるアプリです。&lt;br /&gt;
メール認証後にこのアプリを使って表示されている認証コードを使って認証します。
認証コードは一定時間毎に入れ替わります。&lt;/p&gt;

&lt;p&gt;これにより悪意ある第三者が自分のメール認証のメアドとパスワードを入手しても、私が所有しているスマホを入手しない限りログインできません。&lt;/p&gt;

&lt;h4 id=&quot;対応アプリは色々ある&quot;&gt;対応アプリは色々ある&lt;/h4&gt;

&lt;p&gt;私はAuthyというアプリを使ってます。
MacではAuthy DesktopというPCアプリもあり数年使っていますが今の所そこまで不便に感じずに使ってます。&lt;/p&gt;

&lt;p&gt;たまにアプリを立ち上げるとAuthy自体に設定したパスワードを求められるので、少しだけ2段階認証となっております。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/jp/app/authy/id494168017&quot;&gt;Authy - App Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.authy.authy&amp;amp;hl=ja&quot;&gt;Authy - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-keys&quot;&gt;Security keys&lt;/h3&gt;

&lt;p&gt;ハードウェアのセキュリティキーのことで、実在する物理のキーになります。
有名な物だとYubiKeyなどでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=21079b265ff170d8eb1d0caabfcdd878&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00LX8KZZ8&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B00LX8KZZ8&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;YubiKey&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=mothule05-22&amp;amp;linkId=b95d217be6ebdea044d92e29a3d8d2ba&amp;amp;language=ja_JP&quot;&gt;Amazonで開く&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これも前述したAuthenticator app同様に所有認証となり、悪意ある第三者がメール認証のメアドとパスワードを得ても、このセキュリティキーで認証しなければログインできません。&lt;/p&gt;

&lt;h3 id=&quot;sms-number&quot;&gt;SMS number&lt;/h3&gt;

&lt;p&gt;SMS番号とは電話番号へのSMSメッセージを使って認証コードを送ってくれる方法で、得た認証コードを入力することで認証します。&lt;br /&gt;
これも他同様に電話番号が紐付いた端末を保持しているということで所有認証の部類に入ります。&lt;/p&gt;

&lt;h2 id=&quot;recovery-options-とは&quot;&gt;Recovery options とは？&lt;/h2&gt;

&lt;p&gt;Recovery options とは万が一上記の認証手段を失ってしまった場合に、回復する手段のことをいいます。&lt;/p&gt;

&lt;p&gt;GitHubではRecovery codes(乱数群)、Fallback SMS number(別スマホのSMSメール)、Recovery tokens（回復用乱数羅列）の3種類が用意されています。&lt;/p&gt;

&lt;p&gt;セキュリティと直結はしにくいですが、2FAでセキュリティを上げることで認証手段が複数個になるわけですから、同様にその認証手段をロストするリスクも向上します。&lt;/p&gt;

&lt;p&gt;セキュリティを堅牢にしても自分がアクセスできなくなっては意味がありません。&lt;/p&gt;

&lt;h3 id=&quot;recovery-codes&quot;&gt;Recovery codes&lt;/h3&gt;

&lt;p&gt;Recovery codes とは回復用に予め受け取っておいたコード一覧のことです。&lt;br /&gt;
ログイン済みでRecovery codesを取得し、保存しておくことで、何らかの理由でGitHubにアクセスできなくなったときにこのコードのいずれか１つを使ってアクセスします。&lt;br /&gt;
このコードを紙に印刷して完全にデジタルから隔離しておいたり、スマホなど別端末で管理になると思います。&lt;br /&gt;
それぞれ一長一短ありますので、自分で万が一に備えておきましょう。&lt;/p&gt;

&lt;h3 id=&quot;fallback-sms-number&quot;&gt;Fallback SMS number&lt;/h3&gt;

&lt;p&gt;2FAで設定したSMS番号とは別のSMS番号に認証コードを送信できるようになります。&lt;br /&gt;
スマホのロストはもっとも確率が高いので、2FAでAuthenticator appsやSMS numberを使っていて、Recovery codesをスマホに保存している場合は、ここを設定しておいたほうが安心です。&lt;/p&gt;

&lt;h3 id=&quot;recovery-tokens&quot;&gt;Recovery tokens&lt;/h3&gt;

&lt;p&gt;Facebookアカウントを使用した回復手段です。&lt;br /&gt;
Facebookアカウントと連携しておくことで万が一アクセス手段をロストしてもFacebookアカウントにログインできれば回復できます。&lt;/p&gt;

&lt;h2 id=&quot;2faは絶対やろう&quot;&gt;2FAは絶対やろう&lt;/h2&gt;

&lt;p&gt;2FAは絶対にやりましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;様々なサービスを使っている&lt;/li&gt;
  &lt;li&gt;他サービスと同じパスワードを使いまわしている&lt;/li&gt;
  &lt;li&gt;フリーWiFiや自分の所有物でない端末でログインする機会がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いずれ1つでも当てはまる人は、既に射程距離に入っています。&lt;/p&gt;

&lt;h3 id=&quot;大手サービスだから大丈夫&quot;&gt;「大手サービスだから大丈夫」&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;所属経験上、大手だからといって安心ではない&lt;/li&gt;
  &lt;li&gt;セキュリティ考慮が予算から外れやすい現実&lt;/li&gt;
  &lt;li&gt;大手ほどエンジニアは外注でセキュリティなど完全に予算外&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;漏洩のニュースが流れていなくても情報は外部に漏れている&quot;&gt;漏洩のニュースが流れていなくても情報は外部に漏れている&lt;/h3&gt;

&lt;p&gt;私自身の経験ですが、過去に使っていたパスワードで、そのパスワードを使ってた対象サービスの漏洩ニュースがなかったにも関わらず、&lt;br /&gt;
メール認証で使ってたメールアドレスに対して、「お前のパスワードこれだろ？悪用されたくなかったらビットコインで金よこせ」といわゆる人質メールが来ました。&lt;br /&gt;
しかも提示されていたパスワードは実際に昔使ってたものでした。&lt;/p&gt;

&lt;p&gt;偶然にも私はパスワードは違う形に変えていたことで、有名どころのサービスやクレカを登録してるサービスは異なるパスワードでしたが、もしこれが同じパスワードでしたら&lt;br /&gt;
完全個人情報やクレジットカード情報など、生活におけるほぼ全部の情報が漏洩しているところでした。&lt;/p&gt;

&lt;p&gt;つまり GitHubがどんなに堅牢でも、パスワードが同じだと、他サービスがやられたら堂々と不正ログインされます。&lt;/p&gt;

&lt;p&gt;自分の人生を他人に信託できるのならどうぞご勝手に。&lt;br /&gt;
私はこれ以降全ての登録サービスを一元管理し、パスワードは長文乱数化、2FAあるなら対応し、不要なサービスはパスワードは複雑化し退会しています。&lt;/p&gt;

&lt;h2 id=&quot;人はミスをする生き物&quot;&gt;人はミスをする生き物&lt;/h2&gt;

&lt;p&gt;2FAをしているから万全というわけではありません。会社に迷惑はかからないのでその点は安心なのですが、&lt;br /&gt;
自分の過去の資産にアクセスできないのはそれはそれで手痛いです。&lt;br /&gt;
2FAに必要な認証要素を失ったら自分すらもアクセスできなくなります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authenticator app&lt;/li&gt;
  &lt;li&gt;Security keys&lt;/li&gt;
  &lt;li&gt;SMS number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これら3つ対応していても、PC担いで通勤中に交通事故に遭ってPCもスマホも物理キーも壊れたら終わりです。&lt;br /&gt;
命助かっても助かった気がしません。&lt;/p&gt;

&lt;p&gt;自宅が火事になればもろとも吹き飛びます。&lt;/p&gt;

&lt;p&gt;泥棒に盗まれても同じです。&lt;/p&gt;

&lt;p&gt;日常に潜む確率の低いリスクにわざわざ巻き込まれやすくする理由はないので、Recovery optionsは確実に残しておきましょう。&lt;/p&gt;

&lt;p&gt;これは普段の利便性が下がるものでもなく緊急時に使うものなので、やっておいて何一つ損はないです。&lt;/p&gt;

&lt;h2 id=&quot;本業に集中するための保険だと思うこと&quot;&gt;本業に集中するための保険だと思うこと&lt;/h2&gt;
&lt;p&gt;セキュリティは利便性の反比例になるため、堅牢にするほどGitHubの利便性は下がるのは避けられません。&lt;/p&gt;

&lt;p&gt;しかし、その利便性を重視しすぎることによって、漏洩やアカウント乗っ取りリスクは影を潜めていても確実にそこにいます。&lt;/p&gt;

&lt;p&gt;そのリスクを自分のミスで受けると個人であれば不正利用による信用失墜や巨額の請求が来たり、会社であれば所属会社からの雇用契約書の契約違反による甲側の一方的な解雇と場合によっては損害賠償請求がありえます。&lt;/p&gt;

&lt;p&gt;フリーランスや副業の方による業務委託契約であれば、契約書の契約違反となり損害賠償の話になります。&lt;/p&gt;

&lt;p&gt;自分が守るべき責務を守らないことで得られるものに対して、確率的に低くとも受けるリスクと比べると&lt;strong&gt;「そこまでして欲しい利便性か？」&lt;/strong&gt; と一度己に説いてみるのも重要です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="github" /><summary type="html">近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。 特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。 実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/0.png" /></entry><entry><title type="html">secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する</title><link href="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard" rel="alternate" type="text/html" title="secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する" /><published>2019-12-16T00:00:00+09:00</published><updated>2019-12-16T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard</id><content type="html" xml:base="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard">&lt;p&gt;1つのPCで複数のプロジェクトをいじることはよくあるありますよね。&lt;br /&gt;
業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。&lt;/p&gt;

&lt;p&gt;今回はXcodeのSimulatorがそれで、その影響で「何もコード弄ってないのに失敗する」って現象が起きたのでそれの対処方について簡単にまとめました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きているのか&quot;&gt;何が起きているのか？&lt;/h2&gt;

&lt;p&gt;ローカル上にてXcodeのSimulator上でXCUITestを実行したところ、パスワード入力(secureTextFields)のタイピング(typeText)が反応せず失敗する。&lt;/p&gt;

&lt;h2 id=&quot;エラーメッセージ&quot;&gt;エラーメッセージ&lt;/h2&gt;

&lt;p&gt;抜粋ですが、残り部分はプロジェクト固有情報でノイズとなるため除去して最小限にしてあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to synthesize event: Neither element nor any descendant has keyboard focus. Event dispatch snapshot: SecureTextField, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内', value: 半角英数8文字以上20文字以内
Element debug description:
Attributes: SecureTextField, { {151.0, 284.0}, {254.0, 40.0} }, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;メッセージを読み解く&quot;&gt;メッセージを読み解く&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Neither element nor any descendant has keyboard focus.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Google翻訳にて「&lt;code class=&quot;highlighter-rouge&quot;&gt;要素も子孫もキーボードフォーカスを持ちません。&lt;/code&gt;」と言われてるこれがエラーメッセージです。&lt;/p&gt;

&lt;p&gt;コードでは下記のように一度タップしてフォーカスしたのち、キータイプを行っていますがあることが原因でフォーカスされていないようです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;フォーカスされていないとは、つまりキーボードが出ていないことを意味します。&lt;br /&gt;
本来ならフォーカスされればそれに対する入力としてキーボードが出現します。&lt;/p&gt;

&lt;p&gt;何らかの原因でキーボードがでなくなっているようです。&lt;/p&gt;

&lt;p&gt;また普段は成功しているし、CIでも問題なく動いています。しかしローカルでは失敗してしまいます。&lt;br /&gt;
つまり自分のPCに原因があることが推測できます。&lt;/p&gt;

&lt;h2 id=&quot;原因はconnect-hardware-keyboard&quot;&gt;原因はConnect Hardware Keyboard&lt;/h2&gt;

&lt;p&gt;シミュレーターではある設定が有効だと、secureTextFields.typeTextが失敗する不具合があります。&lt;br /&gt;
ここで不具合と言い切っているのは、通常のtextField.typeTextでは失敗しないためです。&lt;/p&gt;

&lt;p&gt;キーボードが出てこなくなる設定、それは &lt;strong&gt;Connect Hardware Keyboard&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これが有効だとキーボードウィンドウが表示されず、ハードキーボード（つまりmacなどのキー)を押すとシミュレーターのフォーカス中のテキストフィールドに入力されます。&lt;/p&gt;

&lt;p&gt;どうやらこれがsecureTextFieldsだとフォーカスしていないと判断され失敗していたようでした。&lt;/p&gt;

&lt;h2 id=&quot;connect-hardware-keyboardがoffでも失敗する場合&quot;&gt;Connect Hardware KeyboardがOFFでも失敗する場合&lt;/h2&gt;

&lt;p&gt;シミュレーターのConnect Hardware KeyboardはOFFになっているが失敗するケースがあります。&lt;br /&gt;
その場合は一度Connect Hardware KeyboardをONにしてからすぐにOFFにしてもう一度テストを試してみてください。&lt;/p&gt;

&lt;p&gt;ショートカットは shift+cmd+k なので２回押せばOFF→ON→OFFとすぐできます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="test" /><category term="xcuitest" /><summary type="html">1つのPCで複数のプロジェクトをいじることはよくあるありますよね。 業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/0.png" /></entry><entry><title type="html">フルリモートワーカーが外出せずに紙の郵送できないかWebレターをやってみた</title><link href="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter" rel="alternate" type="text/html" title="フルリモートワーカーが外出せずに紙の郵送できないかWebレターをやってみた" /><published>2019-12-03T00:00:00+09:00</published><updated>2019-12-03T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter">&lt;p&gt;フルリモートワークで仕事をしていると、オフィスに足を運ぶことがほとんどなく、理由がない限り行く時間やメリットもありません。&lt;/p&gt;

&lt;p&gt;ただ今回、仕事でpdf書類を印刷してバックオフィスに提出する必要があったため、以前ネットで見かけたWebレターをやってみました。&lt;/p&gt;

&lt;p&gt;Webレターの基本的な情報ややり方、1つだけ大きな落とし穴があったので、それの回避方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;webレターとは&quot;&gt;Webレターとは&lt;/h2&gt;
&lt;p&gt;Webゆうびんが提供してる配送サービス。&lt;/p&gt;

&lt;p&gt;https://www.post.japanpost.jp/service/webletter/&lt;/p&gt;

&lt;p&gt;Web上からdocファイルとpdfファイルをアップロードすることで実際の住所にそのファイルを印刷した紙が郵送してくれます。&lt;/p&gt;

&lt;h3 id=&quot;印刷タイプと料金&quot;&gt;印刷タイプと料金&lt;/h3&gt;
&lt;p&gt;カラー印刷とモノクロ印刷が可能&lt;br /&gt;
料金は次の通り(値段は税込)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A4
    &lt;ul&gt;
      &lt;li&gt;白黒
        &lt;ul&gt;
          &lt;li&gt;最初の1ページ 99円&lt;/li&gt;
          &lt;li&gt;追加ページ(2~8ページ) 5円&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;カラー
        &lt;ul&gt;
          &lt;li&gt;最初の1ページ 146円&lt;/li&gt;
          &lt;li&gt;追加ページ(2~8ページ) 52円&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;利用には会員登録が必要無料&quot;&gt;利用には会員登録が必要(無料)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;登録内容の変更や退会に縛りはありません。&lt;/li&gt;
  &lt;li&gt;認証はEメール認証になります。&lt;/li&gt;
  &lt;li&gt;仮登録と本登録に分かれており登録メールを使って本登録しまう。&lt;/li&gt;
  &lt;li&gt;パスワードは半角英数字8～16文字&lt;/li&gt;
  &lt;li&gt;ログイン情報の失念は「秘密の質問」にて回復可能。&lt;/li&gt;
  &lt;li&gt;秘密の質問の失念は回復不可、別のメアドにて再登録。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;会員には1年の有効期限があります&quot;&gt;会員には1年の有効期限があります&lt;/h3&gt;
&lt;p&gt;最後の利用日から1年経過すると消失する。&lt;br /&gt;
再利用時は同じメアドで再登録可能。&lt;/p&gt;

&lt;h3 id=&quot;種類&quot;&gt;種類&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Webレタックス&lt;/li&gt;
  &lt;li&gt;Web速達&lt;/li&gt;
  &lt;li&gt;Webレター&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回やってみたのはWebレター&lt;/p&gt;

&lt;h3 id=&quot;決済方法&quot;&gt;決済方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;クレカ
    &lt;ul&gt;
      &lt;li&gt;American Express&lt;/li&gt;
      &lt;li&gt;JCB&lt;/li&gt;
      &lt;li&gt;VISA&lt;/li&gt;
      &lt;li&gt;MASTER&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VISAデビット&lt;/li&gt;
  &lt;li&gt;料金後納(後払いとは少し違う)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回やってみたのはクレカ決済&lt;/p&gt;

&lt;h3 id=&quot;料金後納とは&quot;&gt;料金後納とは&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;書類手続により、事前に当社の取扱郵便局の承認及び新東京郵便局への他局差出承認を受けていただきます。なお、毎月のご利用料金は翌月に口座振込や請求書によりお支払いただきます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり事前に決められた承認を受ける必要があります。&lt;br /&gt;
毎月の利用料支払いは翌月に口座振込や請求書にて支払う。&lt;br /&gt;
&lt;a href=&quot;https://www.post.japanpost.jp/service/web/faq/2.html&quot;&gt;料金後納にはどのような手続が必要ですか？&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;利用可能な文字&quot;&gt;利用可能な文字&lt;/h3&gt;
&lt;p&gt;JISX0213-2004で定めるJIS第一水準及び第二水準の文字を使用可能。&lt;br /&gt;
その他も利用できる可能性があるが、正しく表示されるかはプレビュー画面にて確認可能。&lt;/p&gt;

&lt;h2 id=&quot;本文作成時のつまづきポイント&quot;&gt;本文作成時のつまづきポイント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;UIが分かりにくい&lt;/li&gt;
  &lt;li&gt;MacのPDF印刷ではPDFアップロードに失敗する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uiが分かりにくい&quot;&gt;UIが分かりにくい&lt;/h3&gt;

&lt;p&gt;印刷物となる内容を作成する画面が結構分かりにくいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「選択」ボタンで pdf を選ぶことができます&lt;/li&gt;
  &lt;li&gt;印刷設定で白黒を選んでおかないとカラー料金になります&lt;/li&gt;
  &lt;li&gt;複数枚のpdfを郵送する場合は、複数回「選択」ボタンでpdfを選びます&lt;/li&gt;
  &lt;li&gt;pdfを選択すると「ページ操作」下のページ数が増えます&lt;/li&gt;
  &lt;li&gt;ページの削除操作は&lt;strong&gt;「ページ操作」&lt;/strong&gt; の押下で出来ます&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に選択でpdfを追加すると、デフォルトの1ページ目が残り続け、これを削除する方法に凄くつまづきました。&lt;br /&gt;
というのも画面左上に削除とあるので、「なぜこれが有効にならない」と第一印象に踊らされてました。&lt;/p&gt;

&lt;p&gt;このエディタはpdf/docだけでなく直接文字を入れたり線を引くことができます。&lt;br /&gt;
pdfのアップロードはそのベース情報のアップロードのため、ページ操作に該当します。&lt;/p&gt;

&lt;h3 id=&quot;macのpdf印刷ではpdfアップロードに失敗する&quot;&gt;MacのPDF印刷ではPDFアップロードに失敗する&lt;/h3&gt;
&lt;p&gt;MacのChromeでWebページをpdf化する場合は、印刷から出力先をpdfにすることで保存すると思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/2.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかし、これを先程の作成画面にアップロードすると次のエラーが出ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PDFをアップロードすることができません。&lt;br /&gt;
PDFの作成方法を変更してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どうやらPDFの作り方に問題があるようです。&lt;/p&gt;

&lt;p&gt;PDFに関しては次の注意事項があります。
&lt;a href=&quot;https://www.post.japanpost.jp/service/web/notice.html#bunsho&quot;&gt;文書ファイルのアップロード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これかなり終わった間があるのですが、色々と試したところ次の方法でアップロードすることができました。&lt;/p&gt;

&lt;h3 id=&quot;プレビューappで開いたpdfをpdfとして書き出すを選ぶ&quot;&gt;プレビュー.appで開いたpdfを「PDFとして書き出す…」を選ぶ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;対象のpdfファイルを開く（プレビュー.app）&lt;/li&gt;
  &lt;li&gt;ファイル &amp;gt; PDFとして書き出す… を選択&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この方法で保存したPDFだと多少ワーニングは出ますがアップロードすることが出来ます。&lt;/p&gt;

&lt;p&gt;プレビューから書き出すときに ファイル &amp;gt; 書き出す &amp;gt; PDF ではアップロードは失敗します。&lt;/p&gt;

&lt;p&gt;なお表示されるワーニングは推奨する方法でPDFを作成していないことによる情報消失リスクの提示です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;基本的な操作方法について記載しない理由&quot;&gt;基本的な操作方法について記載しない理由&lt;/h2&gt;
&lt;p&gt;Webゆうびんのサイトに超丁寧な使い方が記載されているためです。&lt;/p&gt;

&lt;h2 id=&quot;品質は結果待ち&quot;&gt;品質は結果待ち&lt;/h2&gt;
&lt;p&gt;このWebレターですが、実際どのような品質で届くのはまだ未把握だったりします。
この方法で初めて試したので、もしかしたら文字が読めないほど粗いものが届く可能性もあり、現在確認待ちです。
そう感じたのはWeb内でのプレビューがウィンドウが小さかったり、ズームできなかったりと少し不安が残る状態だったからです。&lt;/p&gt;

&lt;p&gt;こちらは分かり次第追記します。&lt;/p&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;
&lt;p&gt;無事郵送され、印刷物にも問題ないことが分かりました。
これは便利ですね。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">フルリモートワークで仕事をしていると、オフィスに足を運ぶことがほとんどなく、理由がない限り行く時間やメリットもありません。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-12-03-notebook-remote-work-web-letter/0.png" /></entry><entry><title type="html">Railsを5.0.0から5.2.3に変更した</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update" rel="alternate" type="text/html" title="Railsを5.0.0から5.2.3に変更した" /><published>2019-11-14T00:00:00+09:00</published><updated>2019-11-14T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update">&lt;p&gt;個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。&lt;/p&gt;

&lt;p&gt;Gemfileのrailsを&lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;5.2.3&lt;/code&gt; に変更後、&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt;を実行&lt;/p&gt;

&lt;p&gt;gemインストールは成功したが末尾にメッセージが表示。&lt;/p&gt;

&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HEADS UP! i18n 1.1 changed fallbacks to exclude default locale.
But that may break your application.

Please check your Rails app for 'config.i18n.fallbacks = true'.
If you're using I18n (&amp;gt;= 1.1.0) and Rails (&amp;lt; 5.2.2), this should be
'config.i18n.fallbacks = [I18n.default_locale]'.
If not, fallbacks will be broken in your app by I18n 1.1.x.

For more info see:
https://github.com/svenfuchs/i18n/releases/tag/v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i18n の 1.1 では、デフォルトロケールが除外されました。&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;を確認して i18n が &amp;gt;= 1.1.0 および Rails &amp;lt; 5.2.2 の場合はこれを&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;に変更すべきです。&lt;/p&gt;

&lt;p&gt;そうしないとこれのせいでアプリが異常動作します。&lt;/p&gt;

&lt;h2 id=&quot;親が保存されないと子はcreateを呼び出せない&quot;&gt;親が保存されないと子はcreateを呼び出せない&lt;/h2&gt;

&lt;p&gt;ActiveRecordでは、親子関係のあるモデルで親より先に子を保存しようとするとエラーになるようになりました。&lt;/p&gt;

&lt;h3 id=&quot;原文-1&quot;&gt;原文&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotSaved:
You cannot call create unless the parent is saved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;説明&quot;&gt;説明&lt;/h3&gt;
&lt;p&gt;例えば 著者(Author) と 記事(Article) なら関連は次のようになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# カラムとして name: string がある&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# カラムとして title: string がある&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このとき Author を保存せずにArticleを保存しようとするとエラーになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ほげ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# エラー&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;対応策&quot;&gt;対応策&lt;/h3&gt;
&lt;p&gt;子を保存しないか先に親を保存させる必要があります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ほげ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-14-ruby-rails-rails-5_2_3-update.png" /></entry><entry><title type="html">Rails4.1からRails5.0.0.1に変更した</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update" rel="alternate" type="text/html" title="Rails4.1からRails5.0.0.1に変更した" /><published>2019-11-13T00:00:00+09:00</published><updated>2019-11-13T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update">&lt;p&gt;個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。&lt;/p&gt;

&lt;h2 id=&quot;request-spec-では-キーワード引数が必要になりました&quot;&gt;Request spec では キーワード引数が必要になりました。&lt;/h2&gt;

&lt;p&gt;下記コードだと&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次のような警告が出る&lt;/p&gt;

&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEPRECATION WARNING: ActionDispatch::IntegrationTest HTTP request methods will accept only
the following keyword arguments in future Rails versions:
params, headers, env, xhr, as

Examples:

get '/profile',
  params: { id: 1 },
  headers: { 'X-Extra-Header' =&amp;gt; '123' },
  env: { 'action_dispatch.custom' =&amp;gt; 'custom' },
  xhr: true,
  as: :json
 (called from block (3 levels) in &amp;lt;top (required)&amp;gt; at /Users/mothule/workspace/organ/spec/requests/rooms_spec.rb:185)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;params, headers などキーワード指定が必要になりました。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;にすると警告が出なくなります。&lt;/p&gt;

&lt;h2 id=&quot;actioncontrollerparametersからmergeメソッドが51から使えなくなります&quot;&gt;ActionController::Parametersからmerge!メソッドが5.1から使えなくなります&lt;/h2&gt;

&lt;p&gt;セキュリティ観点によるメソッド廃止です。&lt;/p&gt;

&lt;p&gt;使い続けると潜在的なセキュリティ問題が顕在化しアプリの脆弱性が作成され悪性される可能性があります。
特に理由がなければ別メソッドで差し替えたほうがいいでしょう。
代用は非推奨ではないメソッドを&lt;a href=&quot;http://api.rubyonrails.org/v5.0.0.1/classes/ActionController/Parameters.html&quot;&gt;こちら&lt;/a&gt;から使うと確実です。&lt;/p&gt;

&lt;h3 id=&quot;原文-1&quot;&gt;原文&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEPRECATION WARNING: Method merge! is deprecated and will be removed in Rails 5.1, as `ActionController::Parameters` no longer inherits from hash. Using this deprecated behavior exposes potential security problems. If you continue to use this method you may be creating a security vulnerability in your app that can be exploited. Instead, consider using one of these documented methods which are not deprecated: http://api.rubyonrails.org/v5.0.0.1/classes/ActionController/Parameters.html (called from reposition_location_param at your/rails/controller/path.rb:67)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-13-ruby-rails-rails5_0_0-update.png" /></entry><entry><title type="html">rails updateでgemバージョン依存を解決してみる</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version" rel="alternate" type="text/html" title="rails updateでgemバージョン依存を解決してみる" /><published>2019-11-13T00:00:00+09:00</published><updated>2019-11-13T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version">&lt;p&gt;他愛もないネタですが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt;のバージョン依存の解決って最初見方を分からないと萎えるのでどう読み解くか1ケースとして記事にします。&lt;/p&gt;

&lt;p&gt;題材としてRailsのバージョンを4系から5系にアップデートします。&lt;/p&gt;

&lt;h2 id=&quot;バージョン衝突を再現する&quot;&gt;バージョン衝突を再現する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt; を実行すると&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle update rails
Fetching gem metadata from https://rubygems.org/.........
Fetching gem metadata from https://rubygems.org/.
Resolving dependencies....
Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;activesupport&quot;&lt;/span&gt;:
  In Gemfile:
    bullet was resolved to 5.9.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    haml-rails was resolved to 1.0.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    jbuilder &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 2.8.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 5.0.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rspec-rails was resolved to 3.8.1, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    spring was resolved to 2.0.2, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;rails&quot;&lt;/span&gt;:
  In Gemfile:
    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails-flog was resolved to 1.5.0, which depends on
      rails &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;railties&quot;&lt;/span&gt;:
  In Gemfile:
    devise was resolved to 4.5.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 6.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    factory_bot_rails was resolved to 4.11.1, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    haml-rails was resolved to 1.0.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    jquery-rails was resolved to 4.3.3, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 5.0.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    devise was resolved to 4.5.0, which depends on
      responders was resolved to 2.4.0, which depends on
        railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.3, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rspec-rails was resolved to 3.8.1, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    sass-rails &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 4.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 4.0.5, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とgem依存エラーが表示される。&lt;/p&gt;

&lt;p&gt;赤く大量に表示されてこの時点でやる気なくすが、何がをどう解決すればいいかを読み解いてみる。&lt;/p&gt;

&lt;h2 id=&quot;ログはgemの依存関係を表している&quot;&gt;ログはgemの依存関係を表している&lt;/h2&gt;

&lt;p&gt;このログはどの gem が どの gem に依存しているかを表してます。
一部抜粋します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;activesupport&quot;&lt;/span&gt;:
  In Gemfile:
    bullet was resolved to 5.9.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合 &lt;code class=&quot;highlighter-rouge&quot;&gt;bullet&lt;/code&gt; gem が &lt;code class=&quot;highlighter-rouge&quot;&gt;activesupport&lt;/code&gt; gem に依存してることを表します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;activesupport&lt;/code&gt; のバージョンが &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0以上&lt;/code&gt; であれば問題ありません。&lt;br /&gt;
つまり問題ないライブラリ組み合わせです。&lt;/p&gt;

&lt;p&gt;他のライブラリもバージョン上問題ない組み合わせばかりです。&lt;/p&gt;

&lt;p&gt;つまり問題のない組み合わせもログとして出力されます。&lt;/p&gt;

&lt;h2 id=&quot;地道に見ていく&quot;&gt;地道に見ていく&lt;/h2&gt;

&lt;p&gt;最後まで見ると &lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; が怪しいです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sass-rails &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 4.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 4.0.5, which depends on
  railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;railties&lt;/code&gt; は 5.0未満でなければいけませんが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;rails&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; なので
&lt;code class=&quot;highlighter-rouge&quot;&gt;railties&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; になります。
これは &lt;a href=&quot;https://rubygems.org/gems/rails/versions/5.0.0&quot;&gt;rubygems.org&lt;/a&gt; で確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; について調べてみると次のような記事を見つけます。
https://techracho.bpsinc.jp/hachi8833/2018_04_06/54793#2-1&lt;/p&gt;

&lt;p&gt;どうやら&lt;code class=&quot;highlighter-rouge&quot;&gt;sass&lt;/code&gt;は非推奨になるようです。つまり &lt;code class=&quot;highlighter-rouge&quot;&gt;rails&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;sassc-rails&lt;/code&gt; に乗り換えないといけないようです。
Gemfile を次のように書き換えます。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-gem 'sass-rails', '~&amp;gt; 4.0.3'
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+gem 'sassc-rails', '~&amp;gt; 2.1.2'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで再度 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt; を実行すると成功しました。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">他愛もないネタですが、 gemのバージョン依存の解決って最初見方を分からないと萎えるのでどう読み解くか1ケースとして記事にします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-13-ruby-rails-update-rails-version.png" /></entry><entry><title type="html">Firebase Performance Monitoringの基本の概念と実装について整理した</title><link href="https://blog.mothule.com/ios/firebase/firebase-performance-monitoring-basic" rel="alternate" type="text/html" title="Firebase Performance Monitoringの基本の概念と実装について整理した" /><published>2019-10-23T00:00:00+09:00</published><updated>2019-10-23T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/firebase/firebase-performance-monitoring-basic</id><content type="html" xml:base="https://blog.mothule.com/ios/firebase/firebase-performance-monitoring-basic">&lt;p&gt;アプリを使用するユーザーの利用環境を明確に把握したニーズが強くなったので、前々から気になっていたFirebase Performance Monitoringについて調べることにしました。&lt;br /&gt;
なお本記事はiOSを重点に調査しています。&lt;/p&gt;

&lt;h2 id=&quot;firebase-performance-monitoringとは&quot;&gt;Firebase Performance Monitoringとは？&lt;/h2&gt;

&lt;p&gt;iOS,Android,Webアプリのパフォーマンス特性を知ることが出来ます。&lt;br /&gt;
SDKをアプリに統合するだけで、プロファイルコード不要で各パフォーマンスデータを収集し、Firebaseコンソールから分析できます。&lt;/p&gt;

&lt;p&gt;これによりアプリのパフォーマンス問題を解決できます。&lt;/p&gt;

&lt;p&gt;なお Performance Monitoringが自動収集するデータには名前、メアド、電話番号などの個人情報は一切収集しません。&lt;br /&gt;
またカスタム属性で個人を特定できる情報は使用しないでください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/perf-mon?hl=ja&quot;&gt;公式&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;主な機能&quot;&gt;主な機能&lt;/h2&gt;

&lt;p&gt;おもに３つの機能があります。&lt;/p&gt;

&lt;h3 id=&quot;パフォーマンスデータとして次の項目を自動収集&quot;&gt;パフォーマンスデータとして次の項目を自動収集&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;アプリ起動時間&lt;/li&gt;
  &lt;li&gt;HTTP/Sネットワーク上のリクエスト&lt;/li&gt;
  &lt;li&gt;画面ごとのレンダリングデータ&lt;/li&gt;
  &lt;li&gt;フォアグラウンドでのアクティビティ&lt;/li&gt;
  &lt;li&gt;バックグラウンドでのアクティビティ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;パフォーマンス課題を見つけやすくする&quot;&gt;パフォーマンス課題を見つけやすくする&lt;/h3&gt;

&lt;p&gt;パフォーマンス指標として次の項目を確認できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;国&lt;/li&gt;
  &lt;li&gt;デバイス&lt;/li&gt;
  &lt;li&gt;アプリのバージョン&lt;/li&gt;
  &lt;li&gt;OS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;アプリ毎にperformance-monitoringをカスタマイズ&quot;&gt;アプリ毎にPerformance Monitoringをカスタマイズ&lt;/h3&gt;

&lt;p&gt;自作や新しい画面やUIの表示などのパパフォーマンストレーサーを作成できます。&lt;br /&gt;
またカスタム指標を用意し、トレース時に定義したイベント(キャッシュヒットなど)をカウントできます。&lt;/p&gt;

&lt;p&gt;例えばアプリ独自にインメモリのキャッシュ機構を構築してる場合のキャッシュヒット率を収集することができます。&lt;/p&gt;

&lt;h4 id=&quot;トレースとは&quot;&gt;トレースとは？&lt;/h4&gt;

&lt;p&gt;トレースとは2つの時点の間で取得されたパフォーマンスデータのレポートです。&lt;/p&gt;

&lt;h2 id=&quot;performance-monitoringの仕組み&quot;&gt;Performance Monitoringの仕組み&lt;/h2&gt;

&lt;p&gt;大きくレポートタイミングとして、トレースと通信キャプチャに分かれており、その配下に指標があります。&lt;/p&gt;

&lt;h2 id=&quot;トレースには2種類ある&quot;&gt;トレースには2種類ある&lt;/h2&gt;

&lt;p&gt;トレースには自動トレースとカスタムトレースの2種類のトレースがあります。&lt;/p&gt;

&lt;h3 id=&quot;自動トレース&quot;&gt;自動トレース&lt;/h3&gt;

&lt;p&gt;iOSやAndroidアプリで自動で組み込まれるデフォルトトレースです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプリ起動トレース
    &lt;ul&gt;
      &lt;li&gt;ユーザーがアプリを起動してから、アプリが応答するまでの時間を測定&lt;/li&gt;
      &lt;li&gt;コンソールでは &lt;code class=&quot;highlighter-rouge&quot;&gt;_app_start&lt;/code&gt; 報告指標は&lt;code class=&quot;highlighter-rouge&quot;&gt;期間&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;開始タイミングは、アプリが最初のObjectをロードすると開始します&lt;/li&gt;
      &lt;li&gt;終了タイミングは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt;通知受信後の最初の正常な実行ループ後に停止します。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;フォアグラウンドアプリのトレース
    &lt;ul&gt;
      &lt;li&gt;アプリがフォアグラウンドで実行されていてユーザーが利用できる時間を測定&lt;/li&gt;
      &lt;li&gt;コンソールでは &lt;code class=&quot;highlighter-rouge&quot;&gt;_app_in_foreground&lt;/code&gt; 報告指標は&lt;code class=&quot;highlighter-rouge&quot;&gt;期間&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;開始タイミングは、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt;を受け取ると開始&lt;/li&gt;
      &lt;li&gt;終了タイミングは、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationWillResignActiveNotification&lt;/code&gt;を受け取ると停止&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バックグラウンドアプリのトレース
    &lt;ul&gt;
      &lt;li&gt;アプリがバックグラウンドで実行されている時間を測定&lt;/li&gt;
      &lt;li&gt;コンソールでは &lt;code class=&quot;highlighter-rouge&quot;&gt;_app_in_background&lt;/code&gt; 報告指標は&lt;code class=&quot;highlighter-rouge&quot;&gt;期間&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;開始タイミングは、アプリが&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationWillResignActiveNotification&lt;/code&gt;を受け取ると開始&lt;/li&gt;
      &lt;li&gt;終了タイミングは、&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt;を受け取ると停止&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;画面トレース
    &lt;ul&gt;
      &lt;li&gt;画面の存続期間を通じて低速なフレームとフリーズしたフレームを測定&lt;/li&gt;
      &lt;li&gt;指標はレンダリングが遅いフレームとフリーズしたフレームのみ報告されます。&lt;/li&gt;
      &lt;li&gt;コンソールでは他トレースとは別テーブルに表示されます。&lt;/li&gt;
      &lt;li&gt;開始タイミングは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear:&lt;/code&gt;を呼び出すと &lt;code class=&quot;highlighter-rouge&quot;&gt;keyWindow&lt;/code&gt;内のすべての&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;について開始&lt;/li&gt;
      &lt;li&gt;終了タイミングは、&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidDisappear:&lt;/code&gt;を呼び出すと停止&lt;/li&gt;
      &lt;li&gt;正規のコンテナビューコントローラはキャプチャされません。(UINavigationViewControllerなど)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自動トレース情報&quot;&gt;自動トレース情報&lt;/h3&gt;

&lt;p&gt;Firebase Performance Monitoringでは次の種類の情報がデフォルトで収集します。&lt;a href=&quot;https://support.google.com/firebase/answer/6318039?hl=ja&quot;&gt;URL&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;機種、OS、画面の向きなどの全般的な端末情報&lt;/li&gt;
  &lt;li&gt;RAM とディスクのサイズ&lt;/li&gt;
  &lt;li&gt;CPU 使用率&lt;/li&gt;
  &lt;li&gt;携帯通信会社（モバイルの国コードとネットワーク コードに基づく）&lt;/li&gt;
  &lt;li&gt;無線通信 / ネットワークの情報（例: Wi-Fi、LTE、3G）&lt;/li&gt;
  &lt;li&gt;国（IP アドレスに基づく）&lt;/li&gt;
  &lt;li&gt;ロケール / 言語&lt;/li&gt;
  &lt;li&gt;電波強度&lt;/li&gt;
  &lt;li&gt;デバイスのジェイルブレイクまたはルート権限取得&lt;/li&gt;
  &lt;li&gt;電池残量と充電状態&lt;/li&gt;
  &lt;li&gt;アプリのバージョン&lt;/li&gt;
  &lt;li&gt;アプリの状態（フォアグラウンドまたはバックグラウンド）&lt;/li&gt;
  &lt;li&gt;アプリのパッケージ名&lt;/li&gt;
  &lt;li&gt;仮名のアプリ インスタンス識別子&lt;/li&gt;
  &lt;li&gt;ネットワークの URL（URL パラメータやペイロードのコンテンツを含まない）と以下の対応する情報:
    &lt;ul&gt;
      &lt;li&gt;応答コード（例: 403、200）&lt;/li&gt;
      &lt;li&gt;ペイロードのサイズ（バイト単位）&lt;/li&gt;
      &lt;li&gt;応答時間&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自動トレースの継続時間&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;カスタムトレース&quot;&gt;カスタムトレース&lt;/h3&gt;

&lt;p&gt;ユーザー独自のトレースです。SDKに用意されたAPIを使ってカスタムトレースの開始と終了を定義することできます。&lt;/p&gt;

&lt;p&gt;またカスタムトレースを詳細に構成することで、該当する範囲内で発生したパフォーマンス関連イベントのカスタム指標の記録もできます。&lt;/p&gt;

&lt;p&gt;これは前述したメモリキャッシュ機構でいう、キャッシュヒット数とミス数といった指標や、&lt;br /&gt;
UIが一定期間反応しなかった回数などカスタム指標を作成できます。&lt;/p&gt;

&lt;h2 id=&quot;httpsネットワークリクエスト&quot;&gt;HTTP/Sネットワークリクエスト&lt;/h2&gt;
&lt;p&gt;アプリがリクエストを発行してレスポンスが返ってくるまでの時間をキャプチャするレポートです。&lt;br /&gt;
次の指標を収集します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;応答時間
    &lt;ul&gt;
      &lt;li&gt;リクエスト発行からレスポンスの完全受信までの時間&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ペイロードサイズ
    &lt;ul&gt;
      &lt;li&gt;ダウンロード／アップロードされたネットワークペイロードのバイトサイズ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;成功率
    &lt;ul&gt;
      &lt;li&gt;全レスポンスに対する成功レスポンスの割合. これは通信障害やサーバー障害を測定することを目的としてる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;属性&quot;&gt;属性&lt;/h2&gt;

&lt;p&gt;パフォーマンスデータはトレースとHTTP/Sネットワークリクエストの両レポートで次のように分類されています。(以下はiOS/Android)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;トレース
    &lt;ul&gt;
      &lt;li&gt;アプリバージョン&lt;/li&gt;
      &lt;li&gt;国&lt;/li&gt;
      &lt;li&gt;OS レベル&lt;/li&gt;
      &lt;li&gt;デバイス&lt;/li&gt;
      &lt;li&gt;無線通信&lt;/li&gt;
      &lt;li&gt;携帯通信会社&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP/Sネットワークリクエスト
    &lt;ul&gt;
      &lt;li&gt;アプリバージョン&lt;/li&gt;
      &lt;li&gt;国&lt;/li&gt;
      &lt;li&gt;OS レベル&lt;/li&gt;
      &lt;li&gt;デバイス&lt;/li&gt;
      &lt;li&gt;無線通信&lt;/li&gt;
      &lt;li&gt;携帯通信会社&lt;/li&gt;
      &lt;li&gt;MIMEタイプ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またカスタム属性を設定することもできます。&lt;/p&gt;

&lt;p&gt;これらは、コンソール上でパフォーマンスデータを属性でフィルタリング（セグメント化）することで、さまざまなシナリオにフォーカスした指標を得ることが出来ます。&lt;/p&gt;

&lt;h2 id=&quot;組み込んでみる&quot;&gt;組み込んでみる&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Performance Monitoringをアプリに追加&lt;/li&gt;
  &lt;li&gt;Firebaseコンソールで結果を確認する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この2工程です。 なお Firebaseの追加自体はこちらの&lt;a href=&quot;https://firebase.google.com/docs/ios/setup?hl=ja&quot;&gt;公式サイト&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h3 id=&quot;performance-monitoringをアプリに追加&quot;&gt;Performance Monitoringをアプリに追加&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Podfile&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Analytics'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase/Performance'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;後は &lt;code class=&quot;highlighter-rouge&quot;&gt;$ pod install&lt;/code&gt; するだけです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationDelegate&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt;に &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseApp.configure()&lt;/code&gt; を追加する必要がありますが、&lt;br /&gt;
すでにFirebaseを使っている場合はこのコードは既に組み込まれているかと思います。&lt;/p&gt;

&lt;p&gt;これで &lt;code class=&quot;highlighter-rouge&quot;&gt;自動トレース&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/Sネットワークリクエスト&lt;/code&gt;を監視するようになります。&lt;/p&gt;

&lt;p&gt;※ なお &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Performance&lt;/code&gt; を追加すると依存関係として &lt;code class=&quot;highlighter-rouge&quot;&gt;Remote Config&lt;/code&gt; が組み込まれます。&lt;/p&gt;

&lt;p&gt;もし pod install で UUID重複警告が出た場合は、Firebase関連podを最新にupdateすることで回避できました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firebaseコンソールへの反映には12時間以内と記載ありますが、私の環境では12時間近くかかりました。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;firebaseコンソールで結果を確認する&quot;&gt;Firebaseコンソールで結果を確認する&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com/?hl=ja&quot;&gt;Firebase コンソール&lt;/a&gt; で結果が反映されることを確認します。結果は通常12時間以内で表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-23-firebase-performance-monitoring-basic/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-23-firebase-performance-monitoring-basic/1.png&quot; width=&quot;506px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;カスタムトレースとカスタム指標の実装&quot;&gt;カスタムトレースとカスタム指標の実装&lt;/h2&gt;

&lt;p&gt;1つのトレースに複数の指標を追加できます。&lt;/p&gt;

&lt;p&gt;カスタムトレースはIDが文字列になっており、いくつか制限があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先頭と末尾が空白ではないこと&lt;/li&gt;
  &lt;li&gt;先頭がアンダースコア&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;でないこと&lt;/li&gt;
  &lt;li&gt;32文字以下であること&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;カスタムトレースを追加する&quot;&gt;&lt;em&gt;カスタムトレースを追加する&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FirebasePerformance&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// トレースしたいコードを挟む&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;カスタム指標を追加する&quot;&gt;&lt;em&gt;カスタム指標を追加する&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;次のコードのようにトレースの間にカスタム指標コードを追加します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incrementMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cache-miss-count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// トレースしたいコードを挟む&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;httpsネットワークリクエストのモニタリング追加&quot;&gt;HTTP/Sネットワークリクエストのモニタリング追加&lt;/h2&gt;
&lt;p&gt;基本的に自動収集されますが、一部収集されないケースがあります。  その場合はカスタムネットワークリクエストを次のように追加します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://your.domain.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hogeRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HogeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;HogeAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hogeRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;リクエストの発行前とレスポンスの受信完了直後に &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;stop()&lt;/code&gt; を呼んでください。&lt;/p&gt;

&lt;h2 id=&quot;カスタム属性の追加&quot;&gt;カスタム属性の追加&lt;/h2&gt;

&lt;p&gt;Performance Monitoringでは属性を使用することでパフォーマンスデータをセグメント化し、シナリオ別にパフォーマンスを絞り込むことができます。&lt;/p&gt;

&lt;p&gt;カスタム属性はトレースごとに設定出来ます。&lt;br /&gt;
またカスタム属性にはいくつか制限があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;カスタム属性の数は、1トレース最大5個に制限&lt;/li&gt;
  &lt;li&gt;名前は、先頭と末尾に空白がない&lt;/li&gt;
  &lt;li&gt;先頭にアンダースコア&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;がない&lt;/li&gt;
  &lt;li&gt;32文字以下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にする必要があります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Male&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 更新も可能&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Female&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 削除&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Gender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 属性読み込み&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueForAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Gender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// トレースに紐づく全属性読み込み&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意事項&quot;&gt;注意事項&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/perf-mon/get-started-ios?hl=ja#known_issues&quot;&gt;公式&lt;/a&gt;ではいくつか注意事項があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GTMSQLiteを使ってる場合は、互換性がないため、Performance Monitoringを使用しないほうがいいです。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseApp.configure()&lt;/code&gt;の呼び出し後のメソッド入れ替えは影響する可能性があります。&lt;/li&gt;
  &lt;li&gt;iOS8.0~8.2シミュレータでは正常に動作する保証がありません&lt;/li&gt;
  &lt;li&gt;NSURLSessionのbackgroundSessionConfigurationは接続時間が予想より長くなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;firebase-performance-monitoring-を無効にする方法は3つある&quot;&gt;Firebase Performance Monitoring を無効にする方法は3つある&lt;/h2&gt;

&lt;p&gt;大きく分けて&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;を設定する方法とコード上で設定する方法に分かれます。&lt;/p&gt;

&lt;p&gt;またコード上での設定では自動とカスタムそれぞれの制御ができます。&lt;/p&gt;

&lt;h3 id=&quot;infoplist-を設定する方法&quot;&gt;Info.plist を設定する方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ビルド時に無効にしておき、ランタイムで有効／無効を制御できる方法（&lt;code class=&quot;highlighter-rouge&quot;&gt;通常無効&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;ビルド時に完全無効にしておき、ランタイムで有効に変更できない方法（&lt;code class=&quot;highlighter-rouge&quot;&gt;完全無効&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;通常無効&quot;&gt;通常無効&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase_performance_collection_enabled&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; にすることで、無効にできます。&lt;/p&gt;

&lt;h4 id=&quot;完全無効&quot;&gt;完全無効&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase_performance_collection_deactivated&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; にすることで、完全無効にできます。&lt;/p&gt;

&lt;p&gt;これは &lt;code class=&quot;highlighter-rouge&quot;&gt;通常無効&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;firebase_performance_collection_enabled&lt;/code&gt;) の設定をオーバーライドします。&lt;/p&gt;

&lt;p&gt;前者はつまりコード上で制御できて、後者は制御が不可能になります。&lt;/p&gt;

&lt;h3 id=&quot;コード上で設定する方法&quot;&gt;コード上で設定する方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Performance.sharedInstance().isInstrumentationEnabled&lt;/code&gt; で自動トレースとHTTP/Sネットワークリクエストを有効／無効制御できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Performance.sharedInstance().isDataCollectionEnabled&lt;/code&gt; でカスタムトレースを有効／無効制御できます。&lt;/p&gt;

&lt;p&gt;コード上の変更では前述した&lt;code class=&quot;highlighter-rouge&quot;&gt;完全無効&lt;/code&gt;では効果ありません。&lt;/p&gt;

&lt;h3 id=&quot;デバッグ版は無効にする&quot;&gt;デバッグ版は無効にする&lt;/h3&gt;
&lt;p&gt;開発中ではパフォーマンス測定しないために無効にしておき、本番ではコード上で有効にする例があります。&lt;/p&gt;

&lt;p&gt;デバッグ情報が入った開発版では本来の測定より重いレポートとなるため、あまりパフォーマンス測定の効果は得られません。&lt;/p&gt;

&lt;p&gt;本番のみ有効にするという利用ケースもあります。&lt;/p&gt;

&lt;h3 id=&quot;remote-config-と組み合わせて無効制御する&quot;&gt;Remote Config と組み合わせて無効制御する&lt;/h3&gt;

&lt;p&gt;コード上で無効制御ができることとRemote Configを組み合わせることで、デプロイ済みのアプリに対して無効／有効設定ができるようになります。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://firebase.google.com/docs/perf-mon/disable-sdk?hl=ja&amp;amp;platform=ios#disable-with-remote-config&quot;&gt;公式&lt;/a&gt;の記事を確認ください。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="firebase" /><category term="performance-monitoring" /><summary type="html">アプリを使用するユーザーの利用環境を明確に把握したニーズが強くなったので、前々から気になっていたFirebase Performance Monitoringについて調べることにしました。 なお本記事はiOSを重点に調査しています。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-10-23-firebase-performance-monitoring-basic/0.png" /></entry><entry><title type="html">【初心者必見】UITableViewの実践デザイン分析</title><link href="https://blog.mothule.com/ios/uitableview/ios-uitableview-actual-practice" rel="alternate" type="text/html" title="【初心者必見】UITableViewの実践デザイン分析" /><published>2019-10-14T00:00:00+09:00</published><updated>2019-10-14T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/uitableview/ios-uitableview-actual-practice</id><content type="html" xml:base="https://blog.mothule.com/ios/uitableview/ios-uitableview-actual-practice">&lt;p&gt;UIKitの基本的な使い方を理解したが、App Storeにあるアプリを実際にどうやって作られているのか分析できない向けの記事です。&lt;/p&gt;

&lt;p&gt;App Storeに登録されているアプリには様々なデザインがあります。
今回はUITableViewを使ってどのように実装されるのかをこの記事で説明します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本は覚えたけど、どう実装すればいいのか分からない人&lt;/strong&gt; にはとても価値ある記事になると思います。&lt;/p&gt;

&lt;h2 id=&quot;この記事の読み方&quot;&gt;この記事の読み方&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;よくあるレイアウトの確認&lt;/li&gt;
  &lt;li&gt;分析フェイズ&lt;/li&gt;
  &lt;li&gt;実装フェイズ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;実装するサンプルの動画&quot;&gt;実装するサンプルの動画&lt;/h2&gt;

&lt;p&gt;解説に使ったサンプル実装の動かしたときの動画になります。&lt;/p&gt;

&lt;video playsinline=&quot;&quot; muted=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; width=&quot;100%&quot; height=&quot;400px&quot;&gt;
    &lt;source type=&quot;video/mp4&quot; src=&quot;/assets/videos/2019-10-14-ios-uitableview-actual-practice-1.mp4&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;よくあるレイアウト&quot;&gt;よくあるレイアウト&lt;/h2&gt;

&lt;p&gt;今回はApp Storeに上がっているいくつか複数のアプリをピックアップして、だいたい共通しているレイアウトなどを模様した架空のレイアウトを用意しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このレイアウトをUITableViewベースで実装していきたいと思います。
なお無理にUITableViewにこだわらずともUIStackViewやUICollectionViewでも実装は可能ですが、今回はUITableViewベースで話を進めます。&lt;/p&gt;

&lt;h2 id=&quot;分析フェイズ&quot;&gt;分析フェイズ&lt;/h2&gt;

&lt;p&gt;いきなり実装に入らず、まずはどのようにテーブルのセルやセクションを分けるのか考えます。&lt;/p&gt;

&lt;p&gt;このレイアウトはテーブルで構築することができます。&lt;/p&gt;

&lt;p&gt;次のイメージのようにセルやセクションを今回は分けます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/2.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;なぜ-section-header-は使わないのか&quot;&gt;なぜ Section Header は使わないのか？&lt;/h3&gt;

&lt;p&gt;UITableViewはデフォルトだとSectionを表示中の間は、Section Headerが画面上部に残ります。&lt;br /&gt;
残したい場合は Section Header で実装でいいと思います。&lt;/p&gt;

&lt;p&gt;しかし大体は残らないようにして欲しいとデザイナーからの要望は多いので、セルとして実装しています。&lt;br /&gt;
またSection Header内にボタンなどがあるので、セルの方が実装がシンプルになる場合もあります。&lt;/p&gt;

&lt;p&gt;UITableViewではStyleをGroupだとSection Headerは残らないのですが、不要な余白が生まれるので私はセルで実装することが多いです。&lt;/p&gt;

&lt;h3 id=&quot;セル数が可変する場合はセクションを分けるといい&quot;&gt;セル数が可変する場合はセクションを分けるといい&lt;/h3&gt;

&lt;p&gt;今回はセクション内のセル数がデータなどで可変するレイアウトはありませんが、&lt;/p&gt;

&lt;p&gt;例えば、最後の「おすすめ」↓ が可変の場合は、ヘッダーセルと商品セルを別セクションにすると、制御がしやすくなります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;実装フェイズ&quot;&gt;実装フェイズ&lt;/h2&gt;

&lt;p&gt;分析にて必要なセルのレイアウトや制御クラスは分かったと思います。次は分析結果を元に実装していきます。&lt;/p&gt;

&lt;p&gt;なお今回の実装コードは量が多いためGitHubにあげてあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mothule/uitableview-base-layout&quot;&gt;mothule/uitableview-base-layout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubのコードを落としてXcodeと記事両方を開くことを推奨します。&lt;/p&gt;

&lt;h2 id=&quot;storyboardでレイアウトに必要なセルを作成する&quot;&gt;storyboardでレイアウトに必要なセルを作成する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じでセルを用意します。&lt;/p&gt;

&lt;h2 id=&quot;ファイル構成&quot;&gt;ファイル構成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/5.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いくつか抜粋して説明します。&lt;/p&gt;

&lt;h3 id=&quot;viewmodelswift&quot;&gt;ViewModel.swift&lt;/h3&gt;
&lt;p&gt;ネットでよくあるRxSwiftを使ったものではありません。純SwiftによるViewModelになります&lt;/p&gt;

&lt;h3 id=&quot;sectiontypeswift&quot;&gt;SectionType.swift&lt;/h3&gt;
&lt;p&gt;UITableViewのセクション定義になります。Rowの定義は用意していません。Rowの並び順が変わるなど、Section内がより複雑になるのであればあったほうがいいです。&lt;/p&gt;

&lt;h3 id=&quot;datasourceswift&quot;&gt;DataSource.swift&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt; を採用したクラスです。&lt;br /&gt;
こちらに関しては次の記事が参考になります。&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/uitableview/ios-uitableview-uitableviewdatasource-separate&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-10-06-ios-uitableview-uitableviewdatasource-separate.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;【初心者向け】UITableViewDataSourceを別クラス化する方法とメリット&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;
UITableView(テーブル)の構築に必須の`UITableViewDataSource`ですが、ネットで見かける記事のサンプルなどでは、記事の都合上ほぼ必ずUIViewControllerにプロトコルを採用しています。

しかし実際のアプリ開発では、必ずしもそうとは限らず ViewController が複雑になればリファクタリングとして DataSource を別クラスに分離させることもあります。

今回は別クラスで`UITableViewDataSource`プロトコルを実装する方法と...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;viewsフォルダ以下&quot;&gt;Viewsフォルダ以下&lt;/h3&gt;
&lt;p&gt;UITableViewやUICollectionViewのセル制御クラスになります。&lt;/p&gt;

&lt;p&gt;UITableViewの基本に関して分からない場合はこちらの記事をどうぞ。&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/uitableview/ios-uitableview-basic&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-09-26-ios-uitableview-basic/2019-09-26-ios-uitableview-basic.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;【初心者向け】UITableViewの基本的な使い方を極める【入門】&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;|
| |

タップした後が残るのを消して欲しい

特に何もしないとタップしてアラートが終わった後もタップした後が残ります。これを解決します。

```swift
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPa...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;またUICollectionViewに関してはこちらの記事が参考になります。&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/uicollectionview/uicollectionview-in-table&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-10-12-uicollectionview-in-table/1.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;UITableView内にUICollectionViewでCarousel(カルーセル)を実装する&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;
画像の一覧表示や、画面内の情報密度を上げる際に使われるUICollectionViewですが、別の使い方として1列に画像やカードViewなどを並ばせるCarousel(カルーセル)という使い方があります。
**今回はこれをUITableViewのCell(セル)に入れる方法について説明します。**

UITableViewのセル内に入れるということは、UICollectionViewの高さが算出できなければいけません。
できてなければセルの高さが分からず画像がはみ出したり切れたりします。

##...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;itemswift&quot;&gt;Item.swift&lt;/h3&gt;
&lt;p&gt;今回唯一のモデルクラスです。&lt;br /&gt;
と言っても今回はUIの話なので、特にロジックはなくただのデータ構造クラスです。&lt;/p&gt;

&lt;h3 id=&quot;nibableswift&quot;&gt;Nibable.swift&lt;/h3&gt;

&lt;p&gt;UITableViewやUICollectionViewのポイラープレートを収束させたクラスです。&lt;br /&gt;
詳しくはこちらの記事をどうぞ。&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/ios-xib-optimaize&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-09-29-ios-xib-optimaize.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;StoryboardやXibのロード処理の作りを改善する&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;
至る所で使われるStoryboardとxibは、コードの読み込みによくある使い方をする上で少し助長があります。
そしてそれがロード処理で至る所で使われるため、ボイラープレートが増えることからコード可読性が下がるので
あまりよろしくありません。

なので私が普段使っている煩わしいロード処理を抑え込んだロード処理実装について説明します。


自由に法則性を与えることで実装を簡易にする

Storyboardやxibは自由度が高いため、1storyboardに複数のView Controller...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;apiclientswift&quot;&gt;ApiClient.swift&lt;/h3&gt;

&lt;p&gt;API通信クライアントです。しかし今回は実際に通信はしておらず別スレッドで待機後にダミーデータを返すようにしてあります。&lt;br /&gt;
またここは力入れてないので、DataレイヤーでありながらItemクラスを直接使ってサボってます。&lt;/p&gt;

&lt;h2 id=&quot;クラス構成&quot;&gt;クラス構成&lt;/h2&gt;

&lt;p&gt;重要な部分のみ抜粋します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-14-ios-uitableview-actual-practice/6.png&quot; width=&quot;267px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewcontroller&quot;&gt;ViewController&lt;/h3&gt;

&lt;p&gt;おなじみ画面制御クラスです。
このクラスが &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt; のスコープ管理をしています。&lt;/p&gt;

&lt;h3 id=&quot;datasource&quot;&gt;DataSource&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; によってスコープ管理されています。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;は参照用で、スコープ管理はしていません。&lt;br /&gt;
しかし&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;のスコープは&lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt;と同じである保証が&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;によってスコープ保証されているので、弱参照にはしていません。&lt;/p&gt;

&lt;h3 id=&quot;viewmodel&quot;&gt;ViewModel&lt;/h3&gt;
&lt;p&gt;アクション処理とそれに関連するイベント発行をしています。 イベント発行は &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModelDelegate&lt;/code&gt;を介して受け取ることができます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModelDelegate&lt;/code&gt;を採用して、イベントを受け取るようにしています。&lt;/p&gt;

&lt;h2 id=&quot;クラス間のメッセージ通信方法&quot;&gt;クラス間のメッセージ通信方法&lt;/h2&gt;

&lt;p&gt;クラス分離することによりクラス間のメッセージ通信について気になると思うので、まとめました。&lt;/p&gt;

&lt;h3 id=&quot;viewcontroller---viewmodel&quot;&gt;ViewController &amp;lt;-&amp;gt; ViewModel&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;ViewController -&amp;gt; ViewModel&lt;/em&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;のメソッド&lt;br /&gt;
&lt;em&gt;ViewController &amp;lt;- ViewModel&lt;/em&gt; は前述したように &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModelDelegate&lt;/code&gt; でメッセージやりとりしています。&lt;/p&gt;

&lt;h3 id=&quot;datasource---各views&quot;&gt;DataSource &amp;lt;-&amp;gt; 各Views&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;DataSource -&amp;gt; Views&lt;/em&gt; は 各Viewsのsetupメソッド&lt;br /&gt;
&lt;em&gt;DataSource &amp;lt;- Views&lt;/em&gt; は 各Viewsが持つクロージャによるコールバックでメッセージやりとりしています。&lt;/p&gt;

&lt;h3 id=&quot;viewcontroller---datasource&quot;&gt;ViewController &amp;lt;-&amp;gt; DataSource&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ViewController -&amp;gt; DataSource&lt;/em&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt;のメソッド&lt;br /&gt;
&lt;em&gt;ViewController &amp;lt;- DataSource&lt;/em&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;を介しています。&lt;/p&gt;

&lt;h3 id=&quot;datasource---viewmodel&quot;&gt;DataSource &amp;lt;-&amp;gt; ViewModel&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;DataSource -&amp;gt; ViewModel&lt;/em&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;のメソッド&lt;br /&gt;
&lt;em&gt;DataSource &amp;lt;- ViewModel&lt;/em&gt; はありません。 &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; 側に集約させています。&lt;br /&gt;
こうした理由は &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt;はUITableViewの制御であって、イベント制御ではないためです。&lt;br /&gt;
「セルがタップされた」などユーザー発火イベントはViewControllerの責務になるので、こっちに集めるようにしています。&lt;/p&gt;

&lt;h2 id=&quot;実は基本の組み合わせ&quot;&gt;実は基本の組み合わせ&lt;/h2&gt;
&lt;p&gt;実はこのブログのUITableViewの記事を読んでいれば、今回の実装はほとんどが簡単な組み合わせになります。&lt;/p&gt;

&lt;p&gt;難しいように見えて簡単です。ただ手間なだけですね。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="uitableview" /><summary type="html">UIKitの基本的な使い方を理解したが、App Storeにあるアプリを実際にどうやって作られているのか分析できない向けの記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-10-14-ios-uitableview-actual-practice/0.png" /></entry><entry><title type="html">UITableView内にUICollectionViewでCarousel(カルーセル)を実装する</title><link href="https://blog.mothule.com/ios/uicollectionview/uicollectionview-in-table" rel="alternate" type="text/html" title="UITableView内にUICollectionViewでCarousel(カルーセル)を実装する" /><published>2019-10-12T00:00:00+09:00</published><updated>2019-10-12T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/uicollectionview/uicollectionview-in-table</id><content type="html" xml:base="https://blog.mothule.com/ios/uicollectionview/uicollectionview-in-table">&lt;p&gt;画像の一覧表示や、画面内の情報密度を上げる際に使われるUICollectionViewですが、別の使い方として1列に画像やカードViewなどを並ばせるCarousel(カルーセル)という使い方があります。
&lt;strong&gt;今回はこれをUITableViewのCell(セル)に入れる方法について説明します。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UITableViewのセル内に入れるということは、UICollectionViewの高さが算出できなければいけません。
できてなければセルの高さが分からず画像がはみ出したり切れたりします。&lt;/p&gt;

&lt;h2 id=&quot;サンプルコードはカルーセルとpagecontrolの同期&quot;&gt;サンプルコードはカルーセルとPageControlの同期&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-12-uicollectionview-in-table/3.gif&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-12-uicollectionview-in-table/3.gif&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回実装するサンプルは、テーブルのセル内にCarousel(カルーセル)とそれのカレントを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;p&gt;なお、カルーセルの基本的な実装についてはこちらの記事をどうぞ&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/uicollectionview/ios-uicollectionview-carousel-simple&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-10-12-ios-uicollectionview-carousel-simple/1.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;【初心者向け】UICollectionViewでCarousel(カルーセル)を実装する&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;
UICollectionViewを使ったCarousel(カルーセル)を実装します。

カルーセルとは横にバナー画像が並んだ画像ビューワーです。
主な用途として期間中のキャンペーンバナーの表示として使われます。

色々な実装方法がありますが、今回はとにかくシンプルを優先して実装します。

なお記事中の解説画像は[Placeholder.com](https://placeholder.com)で生成したものを使っています。

実装する

今回実装するのは次のようなカルーセルです。

背景色...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;なお今回はサンプルに使った画像は&lt;a href=&quot;https://placeholder.com&quot;&gt;Placeholder.com&lt;/a&gt;で生成したものを使っています。&lt;/p&gt;

&lt;h2 id=&quot;storyboardは特別なことなし&quot;&gt;Storyboardは特別なことなし&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-10-12-uicollectionview-in-table/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-10-12-uicollectionview-in-table/2.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;特に説明が必要な部分はありません。&lt;/p&gt;

&lt;p&gt;セル内ビューの高さが算出可能であればセルは表示されます。&lt;/p&gt;

&lt;p&gt;セルの高さ可変に関してはこちらの記事をどうぞ。&lt;/p&gt;

&lt;div class=&quot;link-container&quot;&gt;
  &lt;a href=&quot;/ios/uitableview/ios-uitableview-uitableviewcell-height-customize&quot;&gt;
    &lt;div class=&quot;link-container-image&quot;&gt;
      &lt;img src=&quot;/assets/images/2019-09-29-ios-uitableview-uitableviewcell-height-customize/2019-09-29-ios-uitableview-uitableviewcell-height-customize-1.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;link-container-summary&quot;&gt;
      &lt;div class=&quot;link-container-summary-title&quot;&gt;
        &lt;span&gt;【初心者向け】UITableViewCellの高さを可変にする&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;link-container-summary-brief&quot;&gt;
        &lt;span&gt;

次の`UITableViewDelegate`のメソッドを使うことでセル毎やセクション毎の高さ設定ができますが、まず大抵のケースでは使いません。
なぜなら`UITableView.rowHeight`に `UITableView.automaticDimension` を渡し、各セルをAuto-Layoutが効くような実装にすれば  
自動でセルの高さを計算してくれるためです。

あるとすればセルごとの推測値`estimated`の値を返す。または状態によって一部セルを非表示にするために高さを...&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;コードは3クラスの関係把握が重要&quot;&gt;コードは3クラスの関係把握が重要&lt;/h2&gt;

&lt;p&gt;大きく3つのクラスで構成しています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ViewController: 親となるView Controller&lt;/li&gt;
  &lt;li&gt;TableViewCell: ViewController が持つ UITableView のセル&lt;/li&gt;
  &lt;li&gt;CollectionViewCell: TableViewCell が持つ UICollectionView のセル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは次のような階層構造にあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- ViewController
   |
   +-- tableView: UITableView
        |
        +-- cells: TableViewCell
             |
             +-- collectionView: UICollectionView
                  |
                  +-- cells: CollectionViewCell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先に全てのコードを掲載してから抜粋して説明します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;image7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLayoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLayoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reloadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TableViewCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPageControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onTouchedPageControl(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewFlowLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollDirection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;horizontal&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimumInteritemSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimumLineSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionViewLayout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouchedPageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrollToItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfItemsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForItemAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CollectionViewCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewCell&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scrollViewDidEndDecelerating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;セルの高さは200固定&quot;&gt;セルの高さは200固定&lt;/h3&gt;

&lt;p&gt;TableViewCell内のcollectionView(UICollectionView)の高さを200で固定しています。&lt;br /&gt;
UIPageControlも同様に高さをデフォルトに固定しています。&lt;br /&gt;
これでテーブルの高さ算出をクリアしています。&lt;br /&gt;
もしUICollectionViewに応じてテーブルを可変にしたい場合は高さのConstraintをIBOutletで結んで値を変えることで可変に出来ます。&lt;/p&gt;

&lt;h3 id=&quot;カルーセル構築&quot;&gt;カルーセル構築&lt;/h3&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewFlowLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollDirection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;horizontal&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimumInteritemSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimumLineSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionViewLayout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;セルのサイズを画面サイズに合わせることで画面に１セルしか表示しないようにしてます。&lt;/p&gt;

&lt;h3 id=&quot;端末回転に対応する&quot;&gt;端末回転に対応する&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLayoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLayoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reloadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;setupCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;端末が回転したら、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;テーブルのリロード&lt;/li&gt;
  &lt;li&gt;セルの再レイアウト&lt;/li&gt;
  &lt;li&gt;セル内のコレクションの再レイアウト&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;をして回転後の画面サイズに調整します。&lt;/p&gt;

&lt;h3 id=&quot;ページコントロールを実装する&quot;&gt;ページコントロールを実装する&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onTouchedPageControl(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouchedPageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrollToItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scrollViewDidEndDecelerating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ページコントロールには２つの役割があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;現在のカルーセルページを表す&lt;/li&gt;
  &lt;li&gt;前後のページへ移動&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この２つを実現するために&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pageControl.numberOfPages&lt;/code&gt; でページ数を設定&lt;/li&gt;
  &lt;li&gt;スクロール移動後イベント(&lt;code class=&quot;highlighter-rouge&quot;&gt;scrollViewDidEndDecelerating(_)&lt;/code&gt;)でカレントカルーセルページを算出&lt;/li&gt;
  &lt;li&gt;ページコントロールの前後移動イベントでカルーセルのカレントページを変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を行っています。&lt;/p&gt;

&lt;h2 id=&quot;小ネタ-レイアウト制御は組み合わせできる&quot;&gt;小ネタ: レイアウト制御は組み合わせできる&lt;/h2&gt;

&lt;p&gt;レイアウト制御の反映順序は次の通りになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;xib/storyboard&lt;/li&gt;
  &lt;li&gt;collectionView.collectionViewLayout&lt;/li&gt;
  &lt;li&gt;collectionView.delegate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらは組み合わせ可能で、制御が重複した場合は後発に上書きされます。&lt;/p&gt;

&lt;h2 id=&quot;まとめ-テーブル構成のカルーセルは需要高い&quot;&gt;まとめ: テーブル構成のカルーセルは需要高い&lt;/h2&gt;

&lt;p&gt;最近ではUIStackViewによるレイアウトも盛んではありますが、テーブルによるレイアウト構成は一定の需要があります。&lt;/p&gt;

&lt;p&gt;その中でもUIパターンの1つであるカルーセルは、&lt;br /&gt;
トップページなどにおいてコンテンツが豊富になってくると情報量のスマート化として&lt;br /&gt;
各コンテンツの部分的に出すリデザインが行われ、そのときに使われやすいUIデザインとしてカルーセルがあります。&lt;/p&gt;

&lt;p&gt;プログラミングにおいてアーキテクチャやメンテナンス性、可読性、柔軟性などは共通して求められますが、&lt;br /&gt;
iOS開発ではそれに加えて端末が持つ機能の使い方やUIデザインの実装方法がスキルとして必要になってきます。&lt;/p&gt;

&lt;p&gt;デザイナーから依頼されたデザインをいかに既存のパーツを組み合わせて構成するかが必要になります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="uicollectionview" /><summary type="html">画像の一覧表示や、画面内の情報密度を上げる際に使われるUICollectionViewですが、別の使い方として1列に画像やカードViewなどを並ばせるCarousel(カルーセル)という使い方があります。 今回はこれをUITableViewのCell(セル)に入れる方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-10-12-uicollectionview-in-table/1.png" /></entry></feed>