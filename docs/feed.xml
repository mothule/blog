<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2021-01-21T12:16:00+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">5年近くリモートワークで培ったテキストコミュニケーションを一人で改善する方法</title><link href="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-cool-text-communication" rel="alternate" type="text/html" title="5年近くリモートワークで培ったテキストコミュニケーションを一人で改善する方法" /><published>2021-01-21T00:00:00+09:00</published><updated>2021-01-21T12:15:41+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/notebook-remote-work-cool-text-communication</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-cool-text-communication">&lt;p&gt;5年近くフルリモートワークを経験して分かったことは、テキストコミュニケーションの改善は組織を大きく改善します。&lt;br /&gt;
リモートワークはテキストコミュニケーションが要です。&lt;/p&gt;

&lt;p&gt;この記事では、そんな私がテキストコミュニケーションとは何か？どうやったら上手になれるか？一人から始められる改善についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;テキストコミュニケーションは重要&quot;&gt;テキストコミュニケーションは重要&lt;/h2&gt;
&lt;p&gt;対面でのコミュニケーションが多い企業では、メールやSlackなどの文章による意思疎通の重要性は低いです。&lt;br /&gt;
なぜなら、人が目の前にいて、口で話したほうが楽だからです。&lt;/p&gt;

&lt;h2 id=&quot;隠されたテキストコミュニケーションと音声コミュニケーションの違い&quot;&gt;隠されたテキストコミュニケーションと音声コミュニケーションの違い&lt;/h2&gt;
&lt;p&gt;インタラクティブか否かです。&lt;/p&gt;

&lt;p&gt;口頭や音声コミュニケーションでは、テキストコミュニケーションと比べ圧倒的にやり取り量が異なります。&lt;br /&gt;
文章として完成していなくても相手側の相槌や質問を繰り返して少しずつ情報を伝達します。&lt;br /&gt;
やりとり量が多くても速度でカバーされています。&lt;/p&gt;

&lt;p&gt;テキストコミュニケーションは逆です。速度が遅いのでやりとり量の多さは無駄の要因になります。&lt;br /&gt;
一回で伝える情報を品質良いものにしなければ対話量が増えます。&lt;/p&gt;

&lt;p&gt;音声コミュニケーション慣れしてる人はここを面倒くさがります。&lt;/p&gt;

&lt;h2 id=&quot;良いテキストコミュニケーションの定義&quot;&gt;良いテキストコミュニケーションの定義&lt;/h2&gt;
&lt;p&gt;テキストコミュニケーションとは、伝達手段が「口頭からテキストに変わっただけ」と考える人は多いと思います。&lt;br /&gt;
確かに手段が変わっただけですが、手段が持つ特性も変わったことに気づいていない人は大変多いです。&lt;br /&gt;
では、良いコミュニケーションを取るために必要なものは何でしょうか？&lt;/p&gt;

&lt;h3 id=&quot;文章力&quot;&gt;文章力&lt;/h3&gt;
&lt;p&gt;何が言いたいか分からない人の文章で共通してるのは、当人のコンテキストが伝わりきれていない点です。&lt;br /&gt;
状況や環境により知識差があるはずなのに、そこの差に気づけず説明不足が発生します。&lt;/p&gt;

&lt;p&gt;求められるのは、&lt;strong&gt;簡潔で齟齬なく読みやすい文章で伝える力です。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;解読力&quot;&gt;解読力&lt;/h3&gt;
&lt;p&gt;伝える側に全責任があるのは間違いです。これは口頭であっても同じ話です。&lt;/p&gt;

&lt;p&gt;相手の立場にたって知識差を埋めるために&lt;strong&gt;背景&lt;/strong&gt;を伝えると、長文を面倒くさがって読まない人がいます。&lt;br /&gt;
逆に背景を伝えず要件に伝えると、齟齬が生まれたり、質問が多くてやり取りが増えたりします。&lt;/p&gt;

&lt;p&gt;求められるのは、&lt;strong&gt;複数の条件が絡んだ文章を読み解く力です。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;全員ができて当たり前ではない&quot;&gt;全員ができて当たり前ではない&lt;/h2&gt;
&lt;p&gt;日本語を喋れるからと言って、音声コミュニケーションが得意とは限りません。&lt;br /&gt;
同様に&lt;strong&gt;ひらカナ漢字が読めても文章を読み解くとは限りませんし、齟齬ない文章を作れるとは限りません&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;全ての人が文章力と解読力が及第点を満たしてるとは限りません。苦手な人も当然います。&lt;br /&gt;
そのため良いテキストコミュニケーションは、上記に挙げた２つだけでは現実的に不可能になります。&lt;/p&gt;

&lt;h2 id=&quot;テキストコミュニケーションの隠れた重要特性&quot;&gt;テキストコミュニケーションの隠れた重要特性&lt;/h2&gt;
&lt;p&gt;実はテキストコミュニケーションには音声コミュニケーションにはない重要な特性があります。&lt;/p&gt;

&lt;h3 id=&quot;ノンバーバルコミュニケーションできない&quot;&gt;ノンバーバルコミュニケーションできない&lt;/h3&gt;
&lt;p&gt;ノンバーバルコミュニケーションとは非言語コミュニケーションです。&lt;br /&gt;
顔の表情や相槌、姿勢など文章にはされないボディランゲージです。&lt;/p&gt;

&lt;p&gt;テキストコミュニケーションでは、文章のみになるためこの部分が欠落します。&lt;br /&gt;
相手への疎通確認が意識しないと取れなかったり、感情が読み取れないといった問題がでてきます。&lt;/p&gt;

&lt;h3 id=&quot;読み手が書き手の感情を作る&quot;&gt;読み手が書き手の感情を作る&lt;/h3&gt;
&lt;p&gt;音声では感情を乗せて聞き手に伝わります。&lt;br /&gt;
しかしテキストでは文字に感情は入りません。文字が持つ意味しか伝わりません。
そしてそのテキストを読むのは読み手になります。&lt;/p&gt;

&lt;p&gt;このときに起きるのが、読んでいる文章に無いはずの感情を読み手自身が作り上げてしまいます。&lt;br /&gt;
例えばPRレビューコメントで次のようなコメントを受け取るとします。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A「ここの実装を○○にしてる理由は何ですか？例えば△△にしたほうが良いのでは？」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;一見普通の指摘コメントに思います。&lt;br /&gt;
しかし、この文章を受け取る前に少し叱られた場合はどうでしょうか？&lt;br /&gt;
叱られた後にこのコメントを読むと、読み手は継続して、この文章から怒り感情が作り上げてしまいます。&lt;/p&gt;

&lt;p&gt;もちろん書き手はそんなつもりが全くないです。&lt;br /&gt;
しかしながら、読み手が無感情に読まない限りは、その前のコンテキストから感情を無意識に付与してしまいます。&lt;/p&gt;

&lt;h3 id=&quot;最も円滑なのは蓄積された善意&quot;&gt;最も円滑なのは蓄積された善意&lt;/h3&gt;
&lt;p&gt;上記の話にも関連しますが、普段から優しい人が送るメッセージは、読み手は負の感情を付与しなくなります。&lt;br /&gt;
同様に普段から助けてくれる人が送るメッセージは、読み手は感謝や尊敬が無意識に感じます。&lt;br /&gt;
&lt;strong&gt;この感情が文章の解読モチベーションに大きく作用します。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;今日から誰でもできるテキストコミュニケーションの意識改善&quot;&gt;今日から誰でもできるテキストコミュニケーションの意識改善&lt;/h2&gt;
&lt;p&gt;テキストコミュニケーションの特性や良い定義が分かったら、我々は次のアクションを考えないといけません。&lt;br /&gt;
私が常に意識して忘れないようにしてることがあります。&lt;/p&gt;

&lt;h3 id=&quot;リアクション絵文字の力を侮るなかれ&quot;&gt;リアクション・絵文字の力を侮るなかれ&lt;/h3&gt;
&lt;p&gt;Slackにはメッセージに絵文字をつけれるリアクション機能があります。&lt;br /&gt;
またテキストに絵文字をつけれます。&lt;/p&gt;

&lt;p&gt;この2つは簡単にできますが、効果は絶大です。&lt;br /&gt;
&lt;strong&gt;何故なら感情を付与できるため、読み手が勝手に作り上げる感情をケチらせます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これは見比べると一目瞭然です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「了解です」&lt;/li&gt;
  &lt;li&gt;「了解です🙆‍♀️」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;無感情だったテキストに感情が読み取れるようになります。&lt;/p&gt;

&lt;h3 id=&quot;親切尊重尊敬を忘れない&quot;&gt;親切・尊重・尊敬を忘れない&lt;/h3&gt;
&lt;p&gt;テキストでも、本質は人と人のやりとりです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;相手に親切に接する&lt;/li&gt;
  &lt;li&gt;相手の立場を尊重する&lt;/li&gt;
  &lt;li&gt;相手を尊敬する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この3つは忘れてはいけません。&lt;br /&gt;
&lt;strong&gt;この3つを意識して接した文章や行動をするだけで相手も伝搬して返してくれます。&lt;/strong&gt;&lt;br /&gt;
結果的に互いに想いやり円滑なコミュニケーションができるようになります。&lt;/p&gt;

&lt;h3 id=&quot;文章構造は面倒くさがらず考える&quot;&gt;文章構造は面倒くさがらず考える&lt;/h3&gt;
&lt;p&gt;タイピングが遅い人や文章構造を構築が苦手な人、音声対話に依存してる人は、文章構造を考慮せずに送りつけます。&lt;br /&gt;
読み手は散らばった文章を拾い上げ、自身で文章構造を構築して意味を取り出す必要が生まれます。&lt;/p&gt;

&lt;p&gt;これは書き手の責任放棄で、読み手に丸投げです。&lt;br /&gt;
上司が部下に「こないだのあの案件をいい感じになる早で完了させて。なんかあれば言って」と伝えてるのと変わりません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;苦手な人でもタイピングが遅くても情報にノイズや棘がないように面倒くさがらず向かい合いましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;すぐ送る前に下書きする&quot;&gt;すぐ送る前に下書きする&lt;/h3&gt;
&lt;p&gt;書いた文章が良い文章となっているとは限りません。不慣れな人ならなおさらです。&lt;br /&gt;
急いでるときもありますが、テキストを送る前に下書きしてから整形して送りましょう。&lt;/p&gt;

&lt;p&gt;下書きの段階で伝えたいことが曖昧ではなく明確に含まれているか？誤字脱字はないか？&lt;br /&gt;
相手が何を返信すればいいか明確か？など書き手の責任は果たしましょう。&lt;/p&gt;

&lt;h3 id=&quot;自分で自分の文章を読み解く&quot;&gt;自分で自分の文章を読み解く&lt;/h3&gt;
&lt;p&gt;下書きの話に繋がりますが、送る前にまず出来上がった文章を自身で読んで読み解きやすいか確認しましょう。&lt;br /&gt;
情報が頭に入っている自分が読みにくいと感じたら、相手はほぼ読み解けません。&lt;/p&gt;

&lt;h2 id=&quot;文章改善小手先テクニック&quot;&gt;文章改善小手先テクニック&lt;/h2&gt;
&lt;p&gt;前項で伝えた内容は抽象レベルや意識レベルの話です。&lt;br /&gt;
もう少し具体的に落とした今日から役に立つ文章を改善する方法をまとめます。&lt;br /&gt;
Slackで円滑するために、悪い文章から良い文章になる添削一覧です。&lt;/p&gt;

&lt;h3 id=&quot;装飾は統一する&quot;&gt;装飾は統一する&lt;/h3&gt;
&lt;p&gt;Slackでは太字、斜字、コード、引用、プレコードの装飾を付与できます。&lt;br /&gt;
装飾なしのテキストで長文だと読みにくさが生まれます。&lt;/p&gt;

&lt;p&gt;テキストに付与する装飾にはルールを設けましょう。&lt;br /&gt;
1メッセージ毎でも構わないし、自身の中だけでもいいです。&lt;/p&gt;

&lt;h3 id=&quot;改行と段落で目の動きを狭める&quot;&gt;改行と段落で目の動きを狭める&lt;/h3&gt;
&lt;p&gt;横に長い文章は読みにくいです。行の移動時にどこまで読んだのか見落とすリスクも上がります。&lt;br /&gt;
目に負荷のかかる文章は読みにくいと思いましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文章の段落毎に改行を入れて、話題が見た目で分かるようにしましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;内容は結論から&quot;&gt;内容は結論から&lt;/h3&gt;
&lt;p&gt;日本語は意識しないと重要な結論が最後に来ます。&lt;br /&gt;
読み手は意図が分からないまま読むのは苦痛です。&lt;/p&gt;

&lt;p&gt;なぜなら観点が分からないまま文章を読みますし、モヤモヤが晴れないためです。&lt;/p&gt;

&lt;p&gt;例えば次のような文章であれば、&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;最近導入したPRリマインダーですが、想定通り動かないケースがあります。
調査した結果リマインダーの仕組み上レビュワーがアサインされていないと通知されないようです。
レビュー後もレビュワー横の「Re-request review」ボタンも押す必要があります。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最初の行に結論、依頼したいことを書きましょう&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;【周知】PRレビュワーはアサイン・再アサインしてください。
PRレビュワーは必ずアサインしてください。
レビュー後もレビュワー横の「Re-request review」ボタンで再アサインしてください。

理由↓
最近導入したPRリマインダーですが、想定通り動かないケースがあり、
調査した結果リマインダーの仕組み上レビュワーがアサインされていないと通知されないようです。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;絵文字やテキストで感情を入れる&quot;&gt;絵文字やテキストで感情を入れる&lt;/h3&gt;
&lt;p&gt;慣れないなら絵文字を入れましょう。&lt;br /&gt;
例えば指摘や依頼など、相手に負の感情を汲み取ってしまいそうな文章は、&lt;br /&gt;
絵文字を入れることで相手への感情齟齬を回避しましょう、&lt;/p&gt;

&lt;p&gt;絵文字でなくとも、テキストでも感情は入れられます。&lt;br /&gt;
例えば次のように、フランクな文章にするだけで怒られてる感を緩和できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「○○をしてください」&lt;/li&gt;
  &lt;li&gt;「すみませんが、○○をしてくださいー」&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;テキストコミュニケーションは必須スキルと言える&quot;&gt;テキストコミュニケーションは必須スキルと言える&lt;/h2&gt;
&lt;p&gt;エンジニアだから技術スキルだけを磨けばよいものではありません。&lt;br /&gt;
エンジニアであれどチームとして動く限りコミュニケーションは発生します。&lt;br /&gt;
コミュニケーションが下手な人とは周りの人はやりにくさを感じます。&lt;/p&gt;

&lt;p&gt;この辛い経験が次回採用時はコミュニケーションが下手な人は採用を見送ろうと必須スキルが増えていくでしょう。&lt;br /&gt;
今はまだなんとかなっていてもリモートワークが増えていく限り、近い将来は避けては通れないスキルになると思います。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">5年近くフルリモートワークを経験して分かったことは、テキストコミュニケーションの改善は組織を大きく改善します。 リモートワークはテキストコミュニケーションが要です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2021-01-21-notebook-remote-work-cool-text-communication/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2021-01-21-notebook-remote-work-cool-text-communication/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Webアプリの自動テストのcapybaraやSeleniumなど用語を整理した</title><link href="https://blog.mothule.com/tools/selenium/tools-selenium-glossary" rel="alternate" type="text/html" title="Webアプリの自動テストのcapybaraやSeleniumなど用語を整理した" /><published>2021-01-14T00:00:00+09:00</published><updated>2021-01-15T02:53:19+09:00</updated><id>https://blog.mothule.com/tools/selenium/tools-selenium-glossary</id><content type="html" xml:base="https://blog.mothule.com/tools/selenium/tools-selenium-glossary">&lt;p&gt;SeleniumやWebDriverは、Webアプリのシステムテストの自動化に関する用語です。&lt;br /&gt;
これら用語は名前が似てたり関係性が曖昧で、ネット記事を見てもいまいちに腹落ちしません。&lt;br /&gt;
それゆえ、これらの用語の意味や関係性を整理しました。&lt;/p&gt;

&lt;h2 id=&quot;整理した用語一覧&quot;&gt;整理した用語一覧&lt;/h2&gt;
&lt;p&gt;今回整理した用語はSeleniumを使う上で、混乱の中心となる用語に絞ります。&lt;br /&gt;
選定基準は、私が調べながら分かりにくいと感じた用語です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;capybara&lt;/li&gt;
  &lt;li&gt;WebKit&lt;/li&gt;
  &lt;li&gt;Selenium&lt;/li&gt;
  &lt;li&gt;WebDriver&lt;/li&gt;
  &lt;li&gt;ChromeDriver&lt;/li&gt;
  &lt;li&gt;Chrome用WebDriver&lt;/li&gt;
  &lt;li&gt;selenium_chrome&lt;/li&gt;
  &lt;li&gt;capybara-webkit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;capybaraとはライブラリ名&quot;&gt;capybaraとはライブラリ名&lt;/h2&gt;
&lt;p&gt;capybaraはRubyのライブラリ(gem)の1つで、RackベースのWebアプリ用統合テストツールです。&lt;br /&gt;
Webサイト上のユーザー操作をシミュレートします。
&lt;a href=&quot;https://rubygems.org/gems/capybara&quot;&gt;capybara&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;webkitとはレンダリングエンジン&quot;&gt;WebKitとはレンダリングエンジン&lt;/h2&gt;
&lt;p&gt;WebKitはHTMLレンダリングエンジンの1つで、Safariのレンダリングエンジンとして使われてます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WebKitは、元々アップルのmacOSに搭載されるSafariのレンダリングエンジンとして、LinuxやBSDといった、Unix系用のレンダリングエンジンであるKHTMLをフォークして開発された。現在はその他の多くのプラットフォームに移植されている。Wikipediaより抜粋&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;seleniumとはテストプロジェクト&quot;&gt;Seleniumとはテストプロジェクト&lt;/h2&gt;
&lt;p&gt;SeleniumはWebアプリを自動テストするためのフレームワークまたはプロジェクトです。
「フレームワークまたはプロジェクト」と曖昧なのは、Seleniumの歴史によって用語の意味が変わってるためです。&lt;/p&gt;

&lt;p&gt;現在であれば、プロジェクトです。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Selenium is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SeleniumはWebブラウザの自動化に関する様々なツールやライブラリで構成されたプロジェクトです。&lt;br /&gt;
Selenium WebDriver, Selenium Grid, Selenium IDEなど複数ツールがある。&lt;/p&gt;

&lt;h2 id=&quot;webdriverとはコンポーネント&quot;&gt;WebDriverとはコンポーネント&lt;/h2&gt;
&lt;p&gt;WebDriverはSeleniumコンポーネントの1つで、ブラウザ操作用のAPI群とプロトコルです。&lt;br /&gt;
このプロトコルをブラウザで準拠させたものをDriverと呼ばれ、Seleniumとブラウザ間の通信を仲介します。&lt;br /&gt;
つまり、実行ブラウザ(Driver)が変わっても操作は変えずに実行できます。&lt;/p&gt;

&lt;p&gt;各ブラウザは特定のWebDriverの実装を持ってます。&lt;br /&gt;
例えば、ChromeならChrome用WebDriver（ChromeDriver）がそれにあたります。&lt;/p&gt;

&lt;h2 id=&quot;chromedriverとはwebdriverの1つ&quot;&gt;ChromeDriverとはWebDriverの1つ&lt;/h2&gt;
&lt;p&gt;ChromeDirverはWebDriverをChrome用に実装したDriverであり、ツール名です。&lt;/p&gt;

&lt;p&gt;ChromeDriverはPC向けChromeとAndroid向けChromeで利用できます。&lt;br /&gt;
OSもMac, Linux, Windows, ChromeOSに対応してます。&lt;/p&gt;

&lt;h2 id=&quot;selenium_chromeとは識別用の文字列&quot;&gt;selenium_chromeとは識別用の文字列&lt;/h2&gt;
&lt;p&gt;Capybaraのドライバー指定で、Chrome用WebDriver(ChromeDriver)を指定する文字列です。
下記コードのように使います。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capybara_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;capybara_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;capybara_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_max_wait_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;capybara-webkitとはライブラリ名&quot;&gt;capybara-webkitとはライブラリ名&lt;/h2&gt;
&lt;p&gt;capybara-webkitはRubyのライブラリ(gem)の1つで、CapybaraのためのヘッドレスWebKit用WebDriverです。
&lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit&quot;&gt;capybara-webkit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現在はQtWebKitが非推奨となってことで、アーカイブ状態となってます。&lt;br /&gt;
公式では、代わりにSeleniumかApparitionという別のドライバーを推薦してます。&lt;/p&gt;

&lt;h2 id=&quot;safari用のwebdriverは&quot;&gt;Safari用のWebDriverは？&lt;/h2&gt;
&lt;p&gt;あるようですが、ヘッドレスモードはないようです。&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/issues/5985&quot;&gt;GitHub/selenium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;またiOS13からiOS版Safariでも、WebDriverを正式サポートされました。&lt;a href=&quot;https://www.publickey1.jp/blog/19/ios_13safariwebdriverseleniumui.html&quot;&gt;URL&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;最も重要な用語の関係性を表す&quot;&gt;最も重要な用語の関係性を表す&lt;/h2&gt;
&lt;p&gt;Seleniumを知る上で重要な用語が、SeleniumとWebDriverそして、ChromeDriverです。&lt;br /&gt;
これらの関係性を文章にすると、&lt;br /&gt;
&lt;strong&gt;「SeleniumプロジェクトのWebDriverコンポーネントのプロトコルを採用したChromeウェブブラウザ用WebDriverは、ChromeDriverです」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ツリー構造だと次の構造になります。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Selenium
    &lt;ul&gt;
      &lt;li&gt;WebDriver
        &lt;ul&gt;
          &lt;li&gt;ChromeDriver(=Chrome用WebDriver)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tools" /><category term="selenium" /><category term="capybara" /><category term="webkit" /><category term="web_driver" /><category term="chrome_driver" /><summary type="html">SeleniumやWebDriverは、Webアプリのシステムテストの自動化に関する用語です。 これら用語は名前が似てたり関係性が曖昧で、ネット記事を見てもいまいちに腹落ちしません。 それゆえ、これらの用語の意味や関係性を整理しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2021-01-14-tools-selenium-glossary/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2021-01-14-tools-selenium-glossary/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsのアセットパイプラインの使い方を最短理解する</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-use" rel="alternate" type="text/html" title="Railsのアセットパイプラインの使い方を最短理解する" /><published>2021-01-06T00:00:00+09:00</published><updated>2021-01-20T19:53:23+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-use</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-use">&lt;p&gt;Railsのアセットパイプラインの理解に時間を費やしたくないけど、理解しないといけないケースが多いです。&lt;br /&gt;
アセットパイプラインの使い方をなるべく端的にまとめました。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインasset-pipelineの概要&quot;&gt;アセットパイプライン(Asset Pipeline)の概要&lt;/h2&gt;
&lt;p&gt;アセットパイプラインの概要は「&lt;span&gt;&lt;a href=&quot;/ruby/rails/ruby-rails-assets-pipeline-brief&quot;&gt;Railsのアセットパイプラインの概要を最短理解する&lt;/a&gt;&lt;/span&gt;
」にまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインasset-pipelineとは&quot;&gt;アセットパイプライン(Asset Pipeline)とは&lt;/h2&gt;
&lt;p&gt;アセットパイプラインを後述する用語を使って説明します。&lt;/p&gt;

&lt;p&gt;アセットパイプラインとは、マニフェスト毎に集めたアセット群から1つのマスターファイルを作成するフレームワークです。&lt;br /&gt;
マニフェストファイルにはアセットの一覧となるマニフェストが書かれており、マニフェストの表現にディレクティブ（命令）を使います。&lt;br /&gt;
マニフェストファイルが2個あれば、マスターファイルは2つ作成されます。&lt;/p&gt;

&lt;h3 id=&quot;アセットとは&quot;&gt;アセットとは&lt;/h3&gt;
&lt;p&gt;アセットとはスタイルシートやJavaScriptなどのリソースの指します。&lt;/p&gt;

&lt;h3 id=&quot;パイプラインとは&quot;&gt;パイプラインとは&lt;/h3&gt;
&lt;p&gt;アセットを次々に一連の処理が施される仕組みです。&lt;/p&gt;

&lt;h3 id=&quot;マニフェストファイルとは&quot;&gt;マニフェストファイルとは&lt;/h3&gt;
&lt;p&gt;マニフェストとはロードするアセットの集まりであり、&lt;br /&gt;
マニフェストファイルとはそのマニフェストが書かれたファイルです。&lt;/p&gt;

&lt;h3 id=&quot;ディレクティブとは&quot;&gt;ディレクティブとは&lt;/h3&gt;
&lt;p&gt;マニフェストを実現するためのファイルロードに関する命令です。&lt;br /&gt;
ディレクティブを駆使してマニフェスト（アセットのリスト）を表現します。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインの全体フローを知る&quot;&gt;アセットパイプラインの全体フローを知る&lt;/h2&gt;
&lt;p&gt;例えば、アセットパイプラインを使って複数のスタイルシートから1つのスタイルシートがロードされるまでの流れです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.scss&lt;/code&gt;内のディレクティブに沿ってファイルをロード
    &lt;ul&gt;
      &lt;li&gt;ロード対象の検索先は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/stylesheets&lt;/code&gt;です。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ロードしたファイルをコンパイル&lt;/li&gt;
  &lt;li&gt;マスターファイルとなる&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.css&lt;/code&gt;にコンパイル済みファイルを結合&lt;/li&gt;
  &lt;li&gt;マスターファイルを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.html.haml&lt;/code&gt;からロードする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本番環境の場合はコンパイル処理は事前に実施(プリコンパイル)され、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public/assets&lt;/code&gt;フォルダに配置されます。&lt;/p&gt;

&lt;h3 id=&quot;アセットパイプライン処理の対象フォルダ&quot;&gt;アセットパイプライン処理の対象フォルダ&lt;/h3&gt;
&lt;p&gt;前述したロード対象の検索先の他にもいくつか検索候補があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/assets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vendor/assets&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このなかの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;は、Railsアプリを作成時に自動で作成されます。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインasset-pipelineを使う&quot;&gt;アセットパイプライン(Asset Pipeline)を使う&lt;/h2&gt;

&lt;p&gt;では実際にアセットパイプラインを使ってみます。&lt;br /&gt;
なお、説明に使うコードはerbではなくhamlを使います。&lt;/p&gt;

&lt;h3 id=&quot;仕組みはデフォルトで用意されている&quot;&gt;仕組みはデフォルトで用意されている&lt;/h3&gt;
&lt;p&gt;実はRailsアプリを作成すれば、既にアセットパイプラインを利用できる環境は整っています。&lt;br /&gt;
そのため、各Controllerのスタイルシートを編集してるだけで、それらのスタイルシートはパイプラインの処理を施されマスターファイルが作成されます。&lt;/p&gt;

&lt;p&gt;なぜなら、デフォルトファイル&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.scss&lt;/code&gt;は自身の位置するフォルダ配下のアセットを対象としたマニフェストが書かれてるからです。&lt;/p&gt;

&lt;p&gt;そのため、Controllerを作成すればスタイルシートは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/stylesheets&lt;/code&gt;フォルダ配下に作成されますが、マニフェストの対象となっているため、自動でマスターファイル(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.css&lt;/code&gt;)に結合されます。&lt;/p&gt;

&lt;h3 id=&quot;マスターファイルをロードする&quot;&gt;マスターファイルをロードする&lt;/h3&gt;
&lt;p&gt;作成されたマスターファイルのロードは、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stylesheet_link_tag&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;p&gt;なお、マスターファイル&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.css&lt;/code&gt;は、デフォルトのレイアウトファイル&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.html.haml&lt;/code&gt;でロードされています。
次のコードは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.html.haml&lt;/code&gt;を一部抜粋したものです。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!!!
%html
  %head
    %meta{:content =&amp;gt; &quot;text/html; charset=UTF-8&quot;, &quot;http-equiv&quot; =&amp;gt; &quot;Content-Type&quot;}/
    %meta{name: 'viewport', content: 'width=device-width,initial-scale=1'}
    %title AnyTitle
    = csrf_meta_tags
    = csp_meta_tag
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload'
    = javascript_pack_tag 'application', 'data-turbolinks-track': 'reload'
    = stylesheet_pack_tag 'application', 'data-turbolinks-track': 'reload'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'data-turbolinks-track': 'reload'&lt;/code&gt;はページ遷移時にリソースを必要に応じてリロードします。&lt;/p&gt;

&lt;h2 id=&quot;ディレクティブについて&quot;&gt;ディレクティブについて&lt;/h2&gt;
&lt;p&gt;マニフェストファイル(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.scss&lt;/code&gt;)にはマニフェスト表現のためにディレクティブが書かれてます。
具体的には、次のようなコメント上で特殊な構文が使われます。&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require_tree&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require_self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;require_tree&quot;&gt;require_tree&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require_tree&lt;/code&gt;ディレクティブは指定した相対パスのディレクトリ以下全てのアセットを対象にします。
子ディレクトリにも再帰的に動きます。&lt;/p&gt;

&lt;p&gt;特定のディレクトリだけ指定したい場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require_directory&lt;/code&gt;ディレクティブを使います。&lt;/p&gt;

&lt;h3 id=&quot;require_self&quot;&gt;require_self&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require_self&lt;/code&gt;は自身のCSSを使います。&lt;/p&gt;

&lt;h3 id=&quot;ディレクティブ順番が結合順&quot;&gt;ディレクティブ順番が結合順&lt;/h3&gt;
&lt;p&gt;ディレクティブの順番によってマスターファイルに結合される順番が変わります。
順番によってはcssの設定が上書きされたりするので、注意が必要です。&lt;/p&gt;

&lt;h2 id=&quot;アセットのコンパイルは環境依存&quot;&gt;アセットのコンパイルは環境依存&lt;/h2&gt;
&lt;p&gt;アセットパイプラインの処理には、ミニファイや結合などのファイル操作があります。&lt;br /&gt;
このファイル操作は開発環境では、ファイルのロード時に動的でコンパイルされます。&lt;br /&gt;
これは開発中にアセットが変更されても、自動でコンパイルするので開発しやすいです。&lt;/p&gt;

&lt;h3 id=&quot;本番では自動コンパイル無効&quot;&gt;本番では自動コンパイル無効&lt;/h3&gt;
&lt;p&gt;しかし、本番環境ではアセットは頻繁に変わることはないので、サーバーが動的にコンパイルするのは無駄です。&lt;br /&gt;
そのため、本番環境ではコンパイルはOFFにされており、事前にアセットのコンパイル(プリコンパイル)が必要です。&lt;/p&gt;

&lt;h3 id=&quot;自動コンパイルの設定確認&quot;&gt;自動コンパイルの設定確認&lt;/h3&gt;
&lt;p&gt;なお、アセットの動的コンパイルは次のコードで設定します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本番環境ではこの値がfalseになっています。&lt;/p&gt;

&lt;h2 id=&quot;本番用にプリコンパイルする&quot;&gt;本番用にプリコンパイルする&lt;/h2&gt;
&lt;p&gt;本番環境用にマスターファイルを作成するには、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails assets:precompile&lt;/code&gt;タスクを使います。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bin/rails assets:precompile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;プリコンパイルされたファイルは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public/assets&lt;/code&gt;に展開され、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;ディレクトリ同様に静的ファイルとして扱われます。&lt;/p&gt;

&lt;h3 id=&quot;ファイルが見つからないとエラーが起きる&quot;&gt;ファイルが見つからないとエラーが起きる&lt;/h3&gt;
&lt;p&gt;本番環境でプリコンパイル済みファイルが見つからないと、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sprockets::Helpers::RailsHelper::AssetPaths::AssetNotPrecompiledError&lt;/code&gt;が発生します。&lt;/p&gt;

&lt;h3 id=&quot;フィンガープリントでキャッシュ制御&quot;&gt;フィンガープリントでキャッシュ制御&lt;/h3&gt;
&lt;p&gt;キャッシュが有効な場合、マスターファイルにはフィンガープリントでキャッシュ制御が必要です。&lt;br /&gt;
なぜなら、キャッシュはパスで管理されます。&lt;br /&gt;
アセットに変更が加わってもマスターファイルのパスは変わらないので、キャッシュ有効と判断されます。&lt;/p&gt;

&lt;p&gt;そのため、プリコンパイルするたびにファイル名にフィンガープリントが付与されます。&lt;/p&gt;

&lt;h2 id=&quot;マニフェストを増やす&quot;&gt;マニフェストを増やす&lt;/h2&gt;
&lt;p&gt;デフォルトではマニフェストファイルは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.scss&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.js&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;例えばRailsアプリに管理画面を追加したく、管理画面用Bootstrapフレームワークを使いたいなど、レイアウトが大きく変えたい場合などはマニフェストを分けたほうが使いもしないコードの混在を回避できます。&lt;/p&gt;

&lt;p&gt;別のマニフェストを追加したい場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/initializers/assets.rb&lt;/code&gt;内で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails.application.config.assets.precompile&lt;/code&gt;を使用します。&lt;br /&gt;
管理画面用のマニフェストを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;にしたい場合は、コードは次のようになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;precompile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w( admin.js admin.css )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;アセットパイプラインは未だに健在する&quot;&gt;アセットパイプラインは未だに健在する&lt;/h2&gt;
&lt;p&gt;アセットパイプラインはモダンな環境では使われないかもしれません。&lt;br /&gt;
しかし、世の中で動いているサービスの比率で言うとまだまだアセットパイプラインは負債扱い・現役問わず、まだまだ使用されています。&lt;br /&gt;
アセットパイプラインを使った環境で開発したり、使わない環境へリニューアルするにしてもアセットパイプラインの知識がまだまだ必要なはずです。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="asset-pipeline" /><summary type="html">Railsのアセットパイプラインの理解に時間を費やしたくないけど、理解しないといけないケースが多いです。 アセットパイプラインの使い方をなるべく端的にまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2021-01-06-ruby-rails-assets-pipeline-use/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2021-01-06-ruby-rails-assets-pipeline-use/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsのアセットパイプラインの概要を最短理解する</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-brief" rel="alternate" type="text/html" title="Railsのアセットパイプラインの概要を最短理解する" /><published>2021-01-05T00:00:00+09:00</published><updated>2021-01-20T19:53:23+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-brief</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-assets-pipeline-brief">&lt;p&gt;Railsのアセットパイプラインは、最先端ではないですが、現状の開発において必要な仕組みです。&lt;br /&gt;
最近ではフロントエンドと分離する傾向がありますが、それでもアセットパイプラインを使ったサービスはたくさんあります。&lt;br /&gt;
今回、手っ取り早く全体像を理解するためにまとめました。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインasset-pipelineとは&quot;&gt;アセットパイプライン(Asset Pipeline)とは&lt;/h2&gt;
&lt;p&gt;JavaScriptやCSSを最小化や圧縮して連結するフレームワークです。&lt;br /&gt;
CofeeScriptやSass(SCSS)の変換もサポートします。&lt;br /&gt;
アセットパイプラインの実体はSprocketsミドルウェアです。&lt;/p&gt;

&lt;p&gt;特徴としては下記です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ファイルのミニファイ&lt;/li&gt;
  &lt;li&gt;ファイルの結合&lt;/li&gt;
  &lt;li&gt;ファイルの変換&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらをデプロイ前に事前に処理（プリコンパイル）します。&lt;/p&gt;

&lt;h2 id=&quot;特徴1-ファイルの最小化ミニファイ&quot;&gt;特徴1. ファイルの最小化(ミニファイ)&lt;/h2&gt;
&lt;p&gt;最小化とは、スペースや改行を詰めてサイズを減らすことです。&lt;br /&gt;
最小化はミニファイ(minify)とも呼びます。&lt;/p&gt;

&lt;p&gt;ファイルを最小化することで、3つメリットがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通信量の節約&lt;/li&gt;
  &lt;li&gt;難読化によるセキュリティ向上&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;通信量を節約できる&quot;&gt;通信量を節約できる&lt;/h3&gt;
&lt;p&gt;ファイルにはスペースや改行などが含まれます。&lt;br /&gt;
これらは人には可読性のために必要です。&lt;br /&gt;
でもWebブラウザのファイル解析には、ほとんどが不要です。&lt;br /&gt;
不要なスペースや改行を無くすことで、ファイルサイズが減らせます。&lt;/p&gt;

&lt;p&gt;ファイルの縮小は通信量削減に繋がります。&lt;br /&gt;
その分Webページ表示に必要なファイル取得を短縮できます。&lt;br /&gt;
結果Webページの高速化に繋がります。&lt;/p&gt;

&lt;h3 id=&quot;難読化によるセキュリティ向上&quot;&gt;難読化によるセキュリティ向上&lt;/h3&gt;
&lt;p&gt;前項でも説明しましたが、スペースや改行などは可読性にとって重要です。&lt;br /&gt;
またJavaScript難読化ツールによっては、変数名を短くします。&lt;br /&gt;
短くなることはファイルサイズ削減にもなります。&lt;br /&gt;
そして変数が持つ意味も取り除けます。&lt;/p&gt;

&lt;p&gt;これらがなくなることで、人はコードを非常に読み解きにくくなります。&lt;br /&gt;
読み解きにくくなれば悪意な行動ができなくなります。&lt;br /&gt;
要はセキュリティが向上します。&lt;/p&gt;

&lt;h2 id=&quot;特徴2-複数ファイルの結合&quot;&gt;特徴2. 複数ファイルの結合&lt;/h2&gt;
&lt;p&gt;例えば、あるページに5ファイル必要であれば、&lt;br /&gt;
そのままの場合は、5回に渡りファイルを取得します。&lt;br /&gt;
当然5回分はサーバに負担はかかり、通信帯域も埋めます。&lt;/p&gt;

&lt;p&gt;これを5ファイルを1つに結合してしまえば、その分パフォーマンスは向上します。&lt;/p&gt;

&lt;h2 id=&quot;特徴3-coffeescriptやsassのトランスパイル&quot;&gt;特徴3. CoffeeScriptやSassのトランスパイル&lt;/h2&gt;
&lt;p&gt;トランスパイルとは、ある開発言語から別の開発言語を生成するコンパイル処理です。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoffeeScriptからJavaScriptへ変換&lt;/li&gt;
  &lt;li&gt;Sass(SCSS)からCSSへ変換&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などです。&lt;/p&gt;

&lt;p&gt;WebブラウザがサポートしてるJavaScriptやCSSなどを直接記述するよりも、&lt;br /&gt;
TypeScriptやSCSSを使ったほうが生産的です。&lt;br /&gt;
アセットパイプラインはその変換作業をサポートします。&lt;/p&gt;

&lt;p&gt;例えばSass(SCSS)であれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sass-rails gem&lt;/code&gt;が使われます。&lt;/p&gt;

&lt;h2 id=&quot;アセットパイプラインの使い方&quot;&gt;アセットパイプラインの使い方&lt;/h2&gt;

&lt;p&gt;アセットパイプラインは、パフォーマンス目的のためにファイル(アセット)をミニファイやファイル結合、トランスパイルするフレームワークです。&lt;/p&gt;

&lt;p&gt;実際の使い方は、&lt;span&gt;&lt;a href=&quot;/ruby/rails/ruby-rails-assets-pipeline-use&quot;&gt;Railsのアセットパイプラインの使い方を最短理解する&lt;/a&gt;&lt;/span&gt;
にまとめてあります。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="asset-pipeline" /><summary type="html">Railsのアセットパイプラインは、最先端ではないですが、現状の開発において必要な仕組みです。 最近ではフロントエンドと分離する傾向がありますが、それでもアセットパイプラインを使ったサービスはたくさんあります。 今回、手っ取り早く全体像を理解するためにまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2021-01-05-ruby-rails-assets-pipeline-brief/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2021-01-05-ruby-rails-assets-pipeline-brief/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">公開鍵認証によるSSHで使う鍵管理をssh-agentで楽する</title><link href="https://blog.mothule.com/tools/ssh/tools-ssh-ssh-agent-usage" rel="alternate" type="text/html" title="公開鍵認証によるSSHで使う鍵管理をssh-agentで楽する" /><published>2020-08-18T00:00:00+09:00</published><updated>2020-08-21T00:09:15+09:00</updated><id>https://blog.mothule.com/tools/ssh/tools-ssh-ssh-agent-usage</id><content type="html" xml:base="https://blog.mothule.com/tools/ssh/tools-ssh-ssh-agent-usage">&lt;p&gt;ssh接続で使う公開鍵のパスフレーズ入力は面倒ですが、ssh-agentでパスフレーズ入力を代理してくれます。&lt;br /&gt;
また、複数サーバを横断する場合に鍵の管理に困りますが、ssh-agentで秘密鍵をサーバに配置せずに済みます。&lt;/p&gt;

&lt;h2 id=&quot;ssh-agentとは&quot;&gt;ssh-agentとは？&lt;/h2&gt;
&lt;p&gt;ssh-agentは認証代理プログラムです。&lt;br /&gt;
RSAやDSA、ECDSAなど公開鍵認証に使う秘密鍵をメモリ上に保持します。&lt;br /&gt;
エージェントプロセスが生きている間は、sshログイン時のパスフレーズ入力を代理します。&lt;/p&gt;

&lt;h2 id=&quot;ssh-agentの最大のメリット&quot;&gt;ssh-agentの最大のメリット&lt;/h2&gt;
&lt;p&gt;ssh-agentはパスフレーズを代理してくれることですが、最もその効果を発揮するのは、&lt;br /&gt;
複数サーバーを跨いだ認証で、サーバ毎に秘密鍵の配置が不要になります。&lt;br /&gt;
インターネット上に秘密鍵を配置するリスクを負わずに、ローカル上で秘密鍵を保持しててもエージェントが認証を代理してくれます。&lt;br /&gt;
ssh-agentを使わない場合は、踏み台サーバにサーバBへの秘密鍵を置くなどリスクまたは手間が生じます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-08-18-tools-ssh-ssh-agent-usage/ssh-agent-multi-server.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-08-18-tools-ssh-ssh-agent-usage/ssh-agent-multi-server.png&quot; width=&quot;100%&quot; alt=&quot;複数サーバでのssh-agent&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ssh-agentを使うことで、認証データを他PCに保存不要で、パスフレーズがネットワークに乗りません。&lt;br /&gt;
秘密鍵を必要とする操作をエージェントによって実行されるため、&lt;br /&gt;
秘密鍵はエージェントを使うクライアントに公開されません。&lt;/p&gt;

&lt;h2 id=&quot;ssh-agentの起動&quot;&gt;ssh-agentの起動&lt;/h2&gt;

&lt;p&gt;ssh-agentを起動するには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;コマンドを使います。&lt;br /&gt;
実行するとシェルスクリプトが表示されます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-agent
&lt;span class=&quot;nv&quot;&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/folders/45/7f_wlrcs3xv6rmstcz2l5_000000gn/T//ssh-2tCfpXRm9s6R/agent.12199&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;SSH_AUTH_SOCK&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SSH_AGENT_PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12200&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;SSH_AGENT_PID&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Agent pid 12200&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このスクリプトを実行して環境変数を登録する必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSH_AUTH_SOCK環境変数: unixドメインソケットの名前が入る&lt;/li&gt;
  &lt;li&gt;SSH_AGENT_PID環境変数: エージェントのプロセスIDが入る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なので、通常は起動には、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt;コマンドを使い、出力をそのまま実行します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ssh-agent&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
Agent pid 12200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ssh-agentの起動オプション一覧&quot;&gt;ssh-agentの起動オプション一覧&lt;/h3&gt;

&lt;p&gt;エージェントの起動には様々なオプションを渡せます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent [-c | -s] [-Dd] [-a bind_address] [-E fingerprint_hash] [-P pkcs11_whitelist] [-t life] [command [arg ...]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;コマンドで使えるオプションを説明します。&lt;/p&gt;

&lt;h4 id=&quot;-a-bind_address-unixドメインソケットのパス指定&quot;&gt;-a bind_address: UNIXドメインソケットのパス指定&lt;/h4&gt;
&lt;p&gt;ssh-agentを指定したUNIXドメインソケットにバインドします。&lt;br /&gt;
デフォルトは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$TMPDIR/ssh-XXXXXXXXXX/agent.&amp;lt;ppid&amp;gt;&lt;/code&gt;です。&lt;/p&gt;

&lt;h4 id=&quot;-c-cシェルでログイン&quot;&gt;-c: Cシェルでログイン&lt;/h4&gt;
&lt;p&gt;起動時に表示するシェルをCシェルコマンドで出力します。
SHELL環境変数の値がcsh互換性の場合は、この出力がデフォルトです。&lt;/p&gt;

&lt;h4 id=&quot;-s-bourneシェルでログイン&quot;&gt;-s: Bourneシェルでログイン&lt;/h4&gt;
&lt;p&gt;起動時に表示するシェルをBourneシェル(所謂sh)コマンドで出力します。
SHELL環境変数の値がsh互換性の場合は、この出力がデフォルトです。&lt;/p&gt;

&lt;h4 id=&quot;-d-フォアグラウンドで起動&quot;&gt;-D: フォアグラウンドで起動&lt;/h4&gt;
&lt;p&gt;フォアグラウンドモードで起動します。&lt;br /&gt;
このオプションを使うとssh-agentはforkを使わなくなります。&lt;/p&gt;

&lt;h4 id=&quot;-d-デバッグモードで起動&quot;&gt;-d: デバッグモードで起動&lt;/h4&gt;
&lt;p&gt;デバッグモードで起動します。&lt;br /&gt;
このオプションを使うとssh-agentはforkを使わず、デバッグ情報を標準エラーに出力します。&lt;/p&gt;

&lt;h4 id=&quot;-e-fingerprint_hash-フィンガープリントのハッシュ関数を指定&quot;&gt;-E fingerprint_hash: フィンガープリントのハッシュ関数を指定&lt;/h4&gt;
&lt;p&gt;キーのフィンガープリントを使うハッシュ関数を指定します。&lt;br /&gt;
オプションは、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256&lt;/code&gt;で、デフォルトは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256&lt;/code&gt;です。&lt;/p&gt;

&lt;h4 id=&quot;-p-pkcs11_whitelist-pkcs11共有ライブラリのパス指定&quot;&gt;-P pkcs11_whitelist: PKCS#11共有ライブラリのパス指定&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ss-add&lt;/code&gt;に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;オプションを使って追加できるPKCS#11共有ライブラリの受け入れ可能なパスパターンリストを指定する。&lt;br /&gt;
デフォルトは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/lib/*&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/lib/*&lt;/code&gt;からPKCS#11ライブラリをロードします。&lt;/p&gt;

&lt;p&gt;渡されたホワイトリストに一致しないPKCS#11ライブラリは拒否します。&lt;/p&gt;

&lt;h4 id=&quot;-t-life-追加した鍵の保持寿命設定&quot;&gt;-t life: 追加した鍵の保持寿命設定&lt;/h4&gt;
&lt;p&gt;エージェントに追加されるIDの最大存続時間のデフォルト値を設定します。&lt;br /&gt;
存続時間は秒単位やsshd_configで指定された時間形式で指定します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add&lt;/code&gt;でIDに指定された有効期限は、この値を上書きします。&lt;br /&gt;
このオプションがない場合の最大存続時間は無制限です。&lt;/p&gt;

&lt;p&gt;保持寿命を設定することで、プロセスが起動し続けてても寿命過ぎるとエージェントから削除されるので、セキュリティ制御ができるようになります。&lt;/p&gt;

&lt;h2 id=&quot;ssh-agentの終了&quot;&gt;ssh-agentの終了&lt;/h2&gt;

&lt;p&gt;エージェントを終了するには、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt;オプションを渡します。&lt;br /&gt;
現在のエージェントを強制終了します。&lt;br /&gt;
終了する対象エージェントは環境変数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH_AGENT_PID&lt;/code&gt;のPIDを終了します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent [-c | -s] -k&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;は起動時に渡したのであれば同じように渡します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;SSH_AUTH_SOCK&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;SSH_AGENT_PID&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Agent pid 12200 killed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;終了処理も起動と同じでシェルスクリプトが表示されるので、終了時は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt;コマンドで囲います。&lt;/p&gt;

&lt;h3 id=&quot;指定のエージェントを終了&quot;&gt;指定のエージェントを終了&lt;/h3&gt;
&lt;p&gt;起動時に環境変数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH_AGENT_PID&lt;/code&gt;がセットされてるので、&lt;br /&gt;
通常は問題になりませんが、起動時に環境変数が未登録だと、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH_AGENT_PID not set, cannot kill agent&lt;/code&gt;が表示されます。&lt;br /&gt;
つまり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH_AGENT_PID&lt;/code&gt;に終了したいエージェントのPIDをセットすることで、指定エージェントを終了できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps aux | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ssh-agent
mothule          28671   0.0  0.0  4334652    612 s002  U+    4:33AM   0:00.00 &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ssh-agent
mothule          27257   0.0  0.0  4300640    428   ??  Ss    4:33AM   0:00.00 ssh-agent
mothule          26972   0.0  0.0  4289376    428   ??  Ss    4:33AM   0:00.00 ssh-agent

&lt;span class=&quot;nv&quot;&gt;$ SSH_AGENT_PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;27257 ssh-agent &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;SSH_AUTH_SOCK&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;SSH_AGENT_PID&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Agent pid 27257 killed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps aux | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ssh-agent
mothule          28703   0.0  0.0  4268300    704 s002  S+    4:35AM   0:00.00 &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ssh-agent
mothule          26972   0.0  0.0  4289376    428   ??  Ss    4:33AM   0:00.00 ssh-agent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssh-agentに鍵追加&quot;&gt;ssh-agentに鍵追加&lt;/h2&gt;
&lt;p&gt;当然ながらssh-agentの起動直後は秘密鍵がありません。&lt;br /&gt;
鍵の追加は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/config&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;か&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add&lt;/code&gt;で追加していきます。
ややこしいですが、削除や確認にも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add&lt;/code&gt;を使います。&lt;/p&gt;

&lt;h3 id=&quot;addkeystoagentで登録する&quot;&gt;AddKeysToAgentで登録する&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/config&lt;/code&gt;で使うオプションです。&lt;br /&gt;
ホスト毎に指定できて、指定されてることで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;に秘密鍵の追加有無を設定できます。&lt;/p&gt;

&lt;h4 id=&quot;addkeystoagent未指定&quot;&gt;AddKeysToAgent未指定&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;未指定の&lt;em&gt;~/.ssh/config&lt;/em&gt;です。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host github
  HostName github.com
  IdentityFile ~/.ssh/github
  User git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;がないと、パスフレーズを求められます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh github
Enter passphrase &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;key &lt;span class=&quot;s1&quot;&gt;'/Users/mothule/.ssh/github'&lt;/span&gt;:
PTY allocation request failed on channel 0
Hi mothule! You have successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;addkeystoagent指定&quot;&gt;AddKeysToAgent指定&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;への鍵登録を許可するには、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt;が指定します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;が指定された&lt;em&gt;~/.ssh/config&lt;/em&gt;です。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host github
  HostName github.com
  IdentityFile ~/.ssh/github
  User git
  AddKeysToAgent yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddKeysToAgent&lt;/code&gt;があると、パスフレーズは求められません。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh github
PTY allocation request failed on channel 0
Hi mothule! You have successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;もし指定鍵がssh-agentから見つからない場合は、パスフレーズをユーザーから求めた後に自動でssh-agentに登録します。&lt;/p&gt;

&lt;h3 id=&quot;ssh-addでキー追加する&quot;&gt;ssh-addでキー追加する&lt;/h3&gt;
&lt;p&gt;ssh-addは認証エージェント(ssh-agent)に秘密鍵IDを追加するプログラムです。&lt;br /&gt;
そのため、ssh-addを使うには、ssh-agentが実行されていて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH_AUTH_SOCK&lt;/code&gt;環境変数にエージェントへのソケット名が含まれてる必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add 秘密鍵パス&lt;/code&gt;で秘密鍵を追加します。&lt;br /&gt;
引数なしで実行すると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/id_rsa&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/id_dsa&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/id_ecdsa&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/id_ed25519&lt;/code&gt;の秘密鍵を追加します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-add .ssh/github
Enter passphrase &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; .ssh/github:
Identity added: .ssh/github &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mothule@mothule.local&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-add &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
3072 SHA256:Ik22naSN6JXh0HGRjifWkBDERYUy8Td2dvDYUt3wGpE mothule@mothule.local &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh github
PTY allocation request failed on channel 0
Hi mothule! You have successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssh-agentの登録済み鍵の確認&quot;&gt;ssh-agentの登録済み鍵の確認&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add -l&lt;/code&gt;で登録済み鍵をフィンガープリントで一覧表示します。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add -L&lt;/code&gt;で登録済み鍵の公開鍵を一覧表示します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ssh-agentの登録済み鍵の削除&quot;&gt;ssh-agentの登録済み鍵の削除&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add -d&lt;/code&gt;で指定鍵の削除&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add -D&lt;/code&gt;で登録済み鍵の全削除&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;鍵の保持寿命を設定&quot;&gt;鍵の保持寿命を設定&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-add -t life&lt;/code&gt;で追加する鍵をエージェントが保持する期間を設定できます。&lt;br /&gt;
未指定の場合は、エージェントのデフォルト値が期間として使われます。&lt;br /&gt;
エージェントのデフォルト値も未指定だと期間は無制限になります。&lt;/p&gt;

&lt;p&gt;無制限はセキュリティの観点からしてリスクがあるので、一定の期間を設けておくことを推奨します。&lt;/p&gt;

&lt;h2 id=&quot;ssh-agentを接続先ホストでも使うssh-agent-forwarding&quot;&gt;ssh-agentを接続先ホストでも使う(SSH Agent forwarding)&lt;/h2&gt;
&lt;p&gt;Agent forwardingで接続することで、接続先ホストでローカルのssh-agentを使うことができます。&lt;br /&gt;
つまり、接続先ホストに秘密鍵をおかずに、秘密鍵を使うことができるようになります。&lt;/p&gt;

&lt;h3 id=&quot;agent-forwardingの事前条件&quot;&gt;Agent forwardingの事前条件&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SSHサーバが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowAgentForwarding&lt;/code&gt;の許可が必要&lt;/li&gt;
  &lt;li&gt;SSHクライアント接続時に何れかの方法で指定する
    &lt;ul&gt;
      &lt;li&gt;sshコマンドに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-A&lt;/code&gt;オプションを渡す(セッション毎)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/config&lt;/code&gt;に全体またはホスト毎に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForwardAgent yes&lt;/code&gt;を記載する(ユーザー・ホスト毎)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt;に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForwardAgent yes&lt;/code&gt;を記載する(システム全体)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ssh-agentのリスク&quot;&gt;ssh-agentのリスク&lt;/h2&gt;

&lt;p&gt;便利なssh-agentですが、運用にはリスクが伴います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man ssh&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-A&lt;/code&gt;でも記載されてますが、Agent forwardingには一定のセキュリティリスクが潜在します。&lt;br /&gt;
またssh-agentはパスフレーズを一度登録すればなしにしてしまうので、キーの保持寿命を設定するなど使用には注意が必要です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="ssh" /><category term="ssh-agent" /><summary type="html">ssh接続で使う公開鍵のパスフレーズ入力は面倒ですが、ssh-agentでパスフレーズ入力を代理してくれます。 また、複数サーバを横断する場合に鍵の管理に困りますが、ssh-agentで秘密鍵をサーバに配置せずに済みます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-18-tools-ssh-ssh-agent-usage/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-18-tools-ssh-ssh-agent-usage/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SSH公開鍵認証で必要なssh-keygenの使い方を理解する</title><link href="https://blog.mothule.com/tools/ssh/tools-ssh-keygen-basic" rel="alternate" type="text/html" title="SSH公開鍵認証で必要なssh-keygenの使い方を理解する" /><published>2020-08-14T00:00:00+09:00</published><updated>2020-08-17T05:06:08+09:00</updated><id>https://blog.mothule.com/tools/ssh/tools-ssh-keygen-basic</id><content type="html" xml:base="https://blog.mothule.com/tools/ssh/tools-ssh-keygen-basic">&lt;p&gt;ネット記事に書いてる通りに従ってSSH用公開鍵を作成してばかりで、ssh-keygen自体の理解が進んでいない人に向けて、ssh-keygenの公開鍵認証周りに絞って説明します。&lt;/p&gt;

&lt;h2 id=&quot;ssh-keygenとは&quot;&gt;ssh-keygenとは？&lt;/h2&gt;

&lt;p&gt;SSHの認証キーの生成と管理と変更を行うコマンドです。
SSHを公開鍵認証方式で認証したい場合にそのキーペアを生成できます。&lt;/p&gt;

&lt;h2 id=&quot;公開鍵の作成&quot;&gt;公開鍵の作成&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;公開鍵の作成は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;コマンドのみで作成できます。&lt;/strong&gt;&lt;br /&gt;
パラメータ用オプションが指定されていないと対話形式でパラメータを決めていきます。&lt;br /&gt;
この場合、最低限のパラメータしかイジることができません。&lt;/p&gt;

&lt;p&gt;コメントやファイル形式、暗号タイプやビット長などはデフォルト値となります。&lt;/p&gt;

&lt;p&gt;下記は指定なしで実行して作成されるまでの流れです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/mothule/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: hoge_rsa
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hoge_rsa.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hoge_rsa.pub.
The key fingerprint is:
SHA256:usyuy2k2WRbKlAmx4qJSVjG3m3EkhJvKSOvmvbwRb5Y mothule@mothule.local
The key&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;s randomart image is:
+---[RSA 3072]----+
|  ..oo+ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;        |
|  ...+ +         |
|. ...&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;o &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;        |
|.o .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; .&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;         |
|o++&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; .o.S        |
|++o &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; +.         |
|+  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; E.          |
|.oo.O+ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;         |
|o. &lt;span class=&quot;nv&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;          |
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合だと、鍵は次の情報で作成されます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ファイル名&lt;/td&gt;
      &lt;td&gt;hoge_rsa and hoge_rsa.pub&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;パスフレーズ&lt;/td&gt;
      &lt;td&gt;asdf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;暗号タイプ&lt;/td&gt;
      &lt;td&gt;RSA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ビット長&lt;/td&gt;
      &lt;td&gt;3072&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ファイル形式&lt;/td&gt;
      &lt;td&gt;RFC4716&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;コメント&lt;/td&gt;
      &lt;td&gt;ホスト情報&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;オプションを渡して公開鍵を作成する&quot;&gt;オプションを渡して公開鍵を作成する&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;コマンドにオプションを一緒に渡すことで対話形式をなくしたり、デフォルト値を変えたりできます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 3072 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; コメント &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/hoge_rsa &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; RFC4716 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; asdf &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;公開鍵のフィンガープリントを表示&quot;&gt;公開鍵のフィンガープリントを表示&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt;オプションを使うことで公開鍵のフィンガープリントを表示します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;オプションをつけるとアスキーアートも表示されます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;でキーを指定できます。無指定だと対話形式でファイル名を訪ねてきます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt;オプションで表示するフィンガープリントのハッシュ関数を変更できます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256&lt;/code&gt;が使えます。デフォルトはsha256です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; sha256 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/github_id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;パスフレーズの変更&quot;&gt;パスフレーズの変更&lt;/h2&gt;

&lt;p&gt;既存キーのパスフレーズを変更する場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt;を使います。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;で対象キーを指定しますが、未指定時は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;オプションでパスフレーズの変更を要求します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt;で新しいパスフレーズを渡し、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt;で今のパスフレーズを渡します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/hoge_rsa &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; qwer &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; asdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今のパスフレーズが間違っていたらエラーになります。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Failed to load key hoge_rsa: incorrect passphrase supplied to decrypt private key&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;パスワードとパスフレーズの違い&quot;&gt;パスワードとパスフレーズの違い&lt;/h3&gt;
&lt;p&gt;パスフレーズはパスワードに似てますが、一連の単語、句読点、数字、空白、文字列を含むフレーズで構成できます。&lt;/p&gt;

&lt;p&gt;適切なパスフレーズ長さは10~30文字ぐらいです。ここの詳細は省きます。&lt;br /&gt;
気になる方は別記事でセキュリティ関連の記事を参考にしてください。&lt;/p&gt;

&lt;p&gt;パスフレーズは忘れないようにしてください。&lt;br /&gt;
消失しても復元する方法はなく、新しく鍵を作る必要があります。&lt;/p&gt;

&lt;h2 id=&quot;コメントの変更&quot;&gt;コメントの変更&lt;/h2&gt;

&lt;p&gt;既存キーのコメントを変更する場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-C&lt;/code&gt;を使います。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;で対象キーを指定しますが、未指定時は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;になります。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P&lt;/code&gt;でパスフレーズ事前入力ができます。未指定でパスフレーズがあると対話形式で入力になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt;オプションでコメント変更を要求します。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-C&lt;/code&gt;で新しいコメントを渡します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; 新しいコメント &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/hoge_rsa &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; asdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;known_hostsをハッシュ化&quot;&gt;known_hostsをハッシュ化&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;のホスト部をハッシュ化します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-H&lt;/code&gt;オプションを渡すことでハッシュ化されます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;オプションでは、対象となる&lt;strong&gt;known_hosts&lt;/strong&gt;の指定ができます。&lt;br /&gt;
他のオプションでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;はキーパスが多いので、ここはキーパスではないことに注意してください。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;変更前のファイルは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.old&lt;/code&gt;サフィックスがついて別名保存されます。&lt;/p&gt;

&lt;h3 id=&quot;known_hostsをハッシュ化する目的&quot;&gt;known_hostsをハッシュ化する目的&lt;/h3&gt;

&lt;p&gt;セキュリティの向上です。&lt;br /&gt;
ホスト情報を分からなくすることで紐付けされにくくさせます。&lt;/p&gt;

&lt;h2 id=&quot;known_hostsから検索&quot;&gt;known_hostsから検索&lt;/h2&gt;
&lt;p&gt;ハッシュ化されたknown_hostsだと、調べたいホストがknown_hostsに登録済みか調べられません。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-F&lt;/code&gt;オプションでknown_hostsからホスト名やホスト名:ポートに一致する行を検索します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; github &lt;span class=&quot;nt&quot;&gt;-lv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt;オプションで出力をフィンガープリントに変更します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lv&lt;/code&gt;オプションだとアスキーアートも表示されます。&lt;/p&gt;

&lt;h2 id=&quot;known_hostsから削除&quot;&gt;known_hostsから削除&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt;オプションを指定することでknown_hostsからキーを削除します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;オプションでは、対象となるknown_hostsの指定ができます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; github &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;テキスト形式であれば直接エディタ開いて削除できますが、ハッシュ形式だとどれか分からないため、こちらを使うことになります。&lt;/p&gt;

&lt;h2 id=&quot;openssh形式の秘密鍵に紐づく公開鍵を標準出力に表示&quot;&gt;OpenSSH形式の秘密鍵に紐づく公開鍵を標準出力に表示&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-y&lt;/code&gt;オプションで秘密鍵に紐づく公開鍵を表示します。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;オプションでキー指定ができます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/github_id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;鍵のインポートとエクスポート&quot;&gt;鍵のインポートとエクスポート&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt;オプションで鍵のインポートとエクスポートができます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;でファイル指定をして、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt;でファイル形式の指定ができます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/github_id_rsa &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; RFC4716
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/github_id_rsa &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; RFC4716
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssh-keygenのオプションについて&quot;&gt;ssh-keygenのオプションについて&lt;/h2&gt;

&lt;p&gt;ssh-keygenでは、一部パラメータ用オプションを使い回す傾向があります。&lt;br /&gt;
ここでは使いまわしされてるパラメータ用オプションについてまとめます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;オプション名&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-f&lt;/td&gt;
      &lt;td&gt;ファイルパスの指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-P&lt;/td&gt;
      &lt;td&gt;パスフレーズの指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-m&lt;/td&gt;
      &lt;td&gt;ファイル形式の指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-q&lt;/td&gt;
      &lt;td&gt;サイレントモードの指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;詳細モードの指定&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;ssh-keygenのオプションのデフォルト値について&quot;&gt;ssh-keygenのオプションのデフォルト値について&lt;/h2&gt;

&lt;p&gt;ssh-keygenでは、オプション未指定だとデフォルト値を使ったり、対話形式で入力をしたりします。&lt;/p&gt;

&lt;p&gt;ここではオプションのデフォルト値についてまとめます。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;オプション名&lt;/td&gt;
      &lt;td&gt;デフォルト値&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-t&lt;/td&gt;
      &lt;td&gt;RSA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-f&lt;/td&gt;
      &lt;td&gt;id_rsaやknown_hosts&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-C&lt;/td&gt;
      &lt;td&gt;user@host形式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-m&lt;/td&gt;
      &lt;td&gt;RFC4716&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;一部パラメータ系オプションの挙動について&quot;&gt;一部パラメータ系オプションの挙動について&lt;/h2&gt;

&lt;p&gt;一部パラメータ系オプションは値に制限があったり、複数指定すると挙動が変わったりします。&lt;br /&gt;
ここではそれらについてまとめます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;RFC4716(default)&lt;/li&gt;
      &lt;li&gt;PKCS8&lt;/li&gt;
      &lt;li&gt;PEM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;rsa(default)&lt;/li&gt;
      &lt;li&gt;dsa&lt;/li&gt;
      &lt;li&gt;ecdsa&lt;/li&gt;
      &lt;li&gt;ed25519&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;md5&lt;/li&gt;
      &lt;li&gt;sha256(default)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;複数オプションを指定すると詳細度が最大で3上がります&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;キータイプが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSA&lt;/code&gt;の場合は1024以上、デフォルト3072ビット&lt;/li&gt;
      &lt;li&gt;ECDSAキーの場合は256, 384, 521ビット&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tools" /><category term="ssh" /><category term="ssh-keygen" /><summary type="html">ネット記事に書いてる通りに従ってSSH用公開鍵を作成してばかりで、ssh-keygen自体の理解が進んでいない人に向けて、ssh-keygenの公開鍵認証周りに絞って説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-14-tools-ssh-keygen-basic/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-14-tools-ssh-keygen-basic/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">エンジニアなら知らないとヤバいSSHの基礎</title><link href="https://blog.mothule.com/tools/ssh/tools-ssh-basic" rel="alternate" type="text/html" title="エンジニアなら知らないとヤバいSSHの基礎" /><published>2020-08-13T00:00:00+09:00</published><updated>2020-08-18T05:09:00+09:00</updated><id>https://blog.mothule.com/tools/ssh/tools-ssh-basic</id><content type="html" xml:base="https://blog.mothule.com/tools/ssh/tools-ssh-basic">&lt;p&gt;インフラエンジニアでなくともSSH接続や公開鍵認証は基本知識として覚えといたほうがいいです。&lt;br /&gt;
普段めったに触ることのないiOSエンジニアでもknown_hostsや鍵生成などと接する機会は定期的に発生します。&lt;br /&gt;
GitHubにSSHの技術が使われています。基本知識として覚えといて損はないと思います。&lt;/p&gt;

&lt;p&gt;この記事ではSSHの基本理解から始まり、実際にGitHubに対して公開鍵認証でSSH接続するまでを説明します。&lt;/p&gt;

&lt;h2 id=&quot;sshとは&quot;&gt;SSHとは？&lt;/h2&gt;

&lt;p&gt;SSHとは、安全にネットワーク先のコンピュータと通信するためのプロトコルです。&lt;br /&gt;
暗号や認証の技術を利用してセキュリティを強固にしており、このプロトコルによる通信は全て暗号化されます。&lt;br /&gt;
ちなみにSSHはSecure Shellの略名です。&lt;/p&gt;

&lt;p&gt;SSHは通信元がなりすまし防止するために認証の仕組みを提供している。&lt;/p&gt;

&lt;h3 id=&quot;sshプロトコルを実装したソフトウェア&quot;&gt;SSHプロトコルを実装したソフトウェア&lt;/h3&gt;
&lt;p&gt;SSHはあくまでRFCによって策定されたプロトコル（約束事）であり、実在するソフトウェアではありません。&lt;br /&gt;
このSSHプロトコルを準拠して作成されたソフトウェアの中でデファクトスタンダードとなっているのは、&lt;br /&gt;
OSSとして開発されているOpenSSHになります。&lt;br /&gt;
Macで標準インストールされているSSHもこのOpenSSHで、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ man ssh&lt;/code&gt;を実行すれば確認できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-08-13-tools-ssh-basic/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-08-13-tools-ssh-basic/1.png&quot; width=&quot;100%&quot; alt=&quot;OpenSSH&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sshのない時代&quot;&gt;SSHのない時代&lt;/h3&gt;
&lt;p&gt;Telnetやrshなどネットワーク先のコンピュータとの通信は平文で行われていたため、&lt;br /&gt;
重要ファイルやパスワードをネットワーク経路上で盗聴されるリスクがありました。&lt;/p&gt;

&lt;h3 id=&quot;sshはクライアントサーバソフトウェア&quot;&gt;SSHはクライアントサーバソフトウェア&lt;/h3&gt;
&lt;p&gt;SSH通信を実現するためには通信元(SSHクライアント)と通信先(SSHサーバ)がSSHプロトコルに準拠したソフトウェアがインストールされている必要があります。&lt;br /&gt;
MacやLinuxであればOpenSSHがSSHクライアントとSSHサーバをサポートしています。&lt;/p&gt;

&lt;p&gt;サーバもクライアントもどちらもOpneSSHを使うので勘違いしてしまいそうですが、&lt;br /&gt;
SSHサーバとSSHクライアントは別物です。&lt;/p&gt;

&lt;p&gt;SSHクライアントは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;を使い、SSHサーバは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt;を使います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-08-13-tools-ssh-basic/ssh-server-client-networking.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-08-13-tools-ssh-basic/ssh-server-client-networking.png&quot; width=&quot;100%&quot; alt=&quot;SSHServerClientNetworking&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sshの認証方法&quot;&gt;SSHの認証方法&lt;/h3&gt;

&lt;p&gt;SSHの認証方法は色々と充実しているが、ここでは2つに絞ります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;パスワード認証方式&lt;/li&gt;
  &lt;li&gt;公開鍵認証方式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;パスワード認証方式&quot;&gt;パスワード認証方式&lt;/h4&gt;

&lt;p&gt;クライアントからユーザ名とパスワード名を受け取る方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デフォルト値&lt;/li&gt;
  &lt;li&gt;ユーザ名とパスワードの一致で認証する&lt;/li&gt;
  &lt;li&gt;アカウントは接続先OSのユーザアカウントを使う&lt;/li&gt;
  &lt;li&gt;簡易だがセキュリティは脆弱なので運用時は非推奨&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;公開鍵認証方式&quot;&gt;公開鍵認証方式&lt;/h4&gt;

&lt;p&gt;クライアントが秘密鍵を使い、サーバが公開鍵を使って認証する方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;秘密鍵と公開鍵の2つの鍵を使う&lt;/li&gt;
  &lt;li&gt;予めサーバ側に公開鍵、クライアント側に秘密鍵を登録しておく&lt;/li&gt;
  &lt;li&gt;通信時に秘密鍵と公開鍵で認証を行う&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sshを使ってみる&quot;&gt;SSHを使ってみる&lt;/h2&gt;

&lt;p&gt;実際に別Macにパスワード認証でSSH接続してみます。&lt;/p&gt;

&lt;h3 id=&quot;macでsshサーバ用意&quot;&gt;MacでSSHサーバ用意&lt;/h3&gt;

&lt;p&gt;同一ネットワーク内限定ですが、MacでもSSHサーバを起動できます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;システム環境設定.appを開く&lt;/li&gt;
  &lt;li&gt;共有を開く&lt;/li&gt;
  &lt;li&gt;リモートログインをONにする&lt;/li&gt;
  &lt;li&gt;アクセスを許可をすべてのユーザにする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;※使い終わったら必ずリモートログインをOFFにしてください。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;sshサーバに接続&quot;&gt;SSHサーバに接続&lt;/h3&gt;

&lt;p&gt;SSHクライアントとしてSSHサーバに接続するには次のコマンドを使います。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh user@host&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回別Macで用意したSSHサーバでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mothule@192.168.11.10&lt;/code&gt;と表示されたので、&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh mothule@192.168.11.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h3 id=&quot;初回アクセスだと警告が表示される&quot;&gt;初回アクセスだと警告が表示される&lt;/h3&gt;
&lt;p&gt;接続先が初めてだと「信頼性を確立できていない」と警告が表示されます。&lt;br /&gt;
それと同時に接続を再開してもよいか確認が表示されます。&lt;br /&gt;
ここで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt;をタイプすると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;にホスト情報が追加された後、パスワード認証に進みます。&lt;br /&gt;
ちなみに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no&lt;/code&gt;の場合は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host key verification failed.&lt;/code&gt;となり中断します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh mothule@192.168.11.10
The authenticity of host &lt;span class=&quot;s1&quot;&gt;'192.168.11.10 (192.168.11.10)'&lt;/span&gt; can not be established.
ECDSA key fingerprint is SHA256:yhxvI/1TAjI0wvlYiRMCJvUsiYAX/L6eiy5bg6+Rv00.
Are you sure you want to &lt;span class=&quot;k&quot;&gt;continue &lt;/span&gt;connecting &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;/no/[fingerprint]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;'192.168.11.10'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
Password:
Last login: Thu Aug 13 04:16:45 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECDSA key fingerprint is SHA256:yhxvI/1TAjI0wvlYiRMCJvUsiYAX/L6eiy5bg6+Rv00.&lt;/code&gt;とは、
ECDSA(Elliptic Curve Digital Signature Algorithm)の暗号アルゴリズムを使った鍵のフィンガープリントを表しています。&lt;/p&gt;

&lt;p&gt;腹落ちしてないはずなので、順に説明します。&lt;/p&gt;

&lt;h3 id=&quot;フィンガープリントとは&quot;&gt;フィンガープリントとは&lt;/h3&gt;
&lt;p&gt;フィンガープリント(指紋)とは、公開鍵を識別するための短いバイト列です。&lt;br /&gt;
指紋は公開鍵を元に暗号学的ハッシュ関数を通すことで作成されます。&lt;br /&gt;
指紋は鍵長より短いので、目的は管理の単純化です。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA256&lt;/code&gt;とは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;暗号学的ハッシュ関数&lt;/code&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;暗号学的ハッシュ関数とは&quot;&gt;暗号学的ハッシュ関数とは&lt;/h3&gt;
&lt;p&gt;暗号学的ハッシュ関数とは、暗号数理性質をもったハッシュ関数です。&lt;br /&gt;
ハッシュ関数は、任意データから短い固定長値(ハッシュ値)を得る関数です。&lt;/p&gt;

&lt;h3 id=&quot;暗号化とハッシュ化の違い&quot;&gt;暗号化とハッシュ化の違い&lt;/h3&gt;
&lt;p&gt;暗号化もハッシュ化もどちらも元のデータを別のデータに変換する処理ですが、大きな違いとしては、
ハッシュ化は不可逆変換なので元のデータに復元できません。&lt;br /&gt;
一方暗号化は当然複合できます。&lt;/p&gt;

&lt;h3 id=&quot;known_hostsとは&quot;&gt;known_hostsとは&lt;/h3&gt;
&lt;p&gt;接続経験のあるホストの公開鍵を保存したテキストファイルです。&lt;br /&gt;
ユーザ単位であれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/known_hosts&lt;/code&gt;に配置されてます。&lt;br /&gt;
中身はテキストなので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;などで見れます。&lt;br /&gt;
1行1ホストで列挙されており、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[host],address 暗号スイート 公開鍵&lt;/code&gt;の並びになってます。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[host]&lt;/code&gt;がない行もあります。&lt;/p&gt;

&lt;h4 id=&quot;known_hostsの役割&quot;&gt;known_hostsの役割&lt;/h4&gt;
&lt;p&gt;このファイルに登録されてることで、手元に残してる公開鍵に紐づく秘密鍵があるか検証することで、万が一サーバ側の公開鍵が変更されていても気付ける仕組みとなってます。&lt;/p&gt;

&lt;p&gt;SSHクライント側は、既に一度でも接続経験のあるホストなのに、ワーニングが出たら「鍵が変更された」が想定外か判断してください。&lt;/p&gt;

&lt;h2 id=&quot;sshconfigで接続情報を管理する&quot;&gt;.ssh/configで接続情報を管理する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;とは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;フォルダ内に配置するテキストファイルです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;コマンドでSSHサーバに接続するには、少なくとも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ホスト&lt;/code&gt;情報が必要です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSHポートがデフォルト22ではない場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;オプション&lt;/li&gt;
  &lt;li&gt;ユーザー名を指定する場合はホストの前に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_name@&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;公開鍵認証の鍵がデフォルト名ではない場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt;オプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これら全部を指定すると、&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh mothule@192.168.11,10 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2200 &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/my_second_pc.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように長くなってしまいます。&lt;/p&gt;

&lt;p&gt;更に接続先が1つだけでなく複数となってくると、毎回同じ情報を入力するのは無駄な時間です。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;はこれらを事前に登録しておくことでsshコマンドのオプション等を省略できます。&lt;/p&gt;

&lt;p&gt;例えば先程の全指定したSSH接続の場合だと下記設定を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;に追記することで、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ ssh hoge&lt;/code&gt;だけで済みます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host hoge
HostName 192.168.11.10
User mothule
Port 2200
IdentityFile ~/.ssh/my_second_pc.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;are-you-sure-you-want-to-continue-connecting-yesno-をスキップ&quot;&gt;Are you sure you want to continue connecting (yes/no)? をスキップ&lt;/h3&gt;
&lt;p&gt;~/.ssh/config の接続先ホストに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StrictHostKeyChecking no&lt;/code&gt;を設定することでスキップできる&lt;/p&gt;

&lt;h3 id=&quot;ssh接続のタイムアウトを防ぐ&quot;&gt;SSH接続のタイムアウトを防ぐ&lt;/h3&gt;
&lt;p&gt;~/.ssh/config の接続先ホストに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerAliveInterval 60&lt;/code&gt;を設定することでSSHセッションにハートビート導入できる。&lt;/p&gt;

&lt;h2 id=&quot;githubに公開鍵認証方式でssh接続する&quot;&gt;GitHubに公開鍵認証方式でSSH接続する&lt;/h2&gt;

&lt;p&gt;SSH接続するまでの流れです&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;キーペア作成&lt;/li&gt;
  &lt;li&gt;GitHubに公開鍵登録&lt;/li&gt;
  &lt;li&gt;秘密鍵でssh接続&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;キーペア作成&quot;&gt;キーペア作成&lt;/h3&gt;
&lt;p&gt;公開鍵と秘密鍵の作成はssh-keygenを使います。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/github &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; pass-phrase-this-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ネットで見かける記事によっては、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt;オプションを使っていますが、キータイプのデフォルトはRSAで、RSAのデフォルトビット数は3072ビットになるので、&lt;br /&gt;
省略しても目的のキータイプや一定の強度を保ったキーが作成されます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt;でパスフレーズを決めれます。パスフレーズは空でも作成されますが、セキュリティを上げるためになるべくつけることを推奨します。&lt;/p&gt;

&lt;h4 id=&quot;キー名を別名にする理由&quot;&gt;キー名を別名にする理由&lt;/h4&gt;
&lt;p&gt;鍵の名前はデフォルトだと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;にしようとしてくるので、そこは別名にすることをおすすめします。&lt;br /&gt;
理由としてはしばらく時間経過後に.sshフォルダを覗いたときに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;が何の鍵なのか判断つかなくなるのと、&lt;br /&gt;
&lt;strong&gt;キー作成時に誤ってデフォルト名(id_rsa)にしてしまうと上書きされるリスクがあるためです。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;ssh-keygenの詳細について&quot;&gt;ssh-keygenの詳細について&lt;/h4&gt;
&lt;p&gt;ssh-keygenで公開鍵周りについて詳しく知りたい場合は、「&lt;span&gt;&lt;a href=&quot;/tools/ssh/tools-ssh-keygen-basic&quot;&gt;SSH公開鍵認証で必要なssh-keygenの使い方を理解する&lt;/a&gt;&lt;/span&gt;
」にまとめてあります。&lt;/p&gt;

&lt;h3 id=&quot;githubに公開鍵登録&quot;&gt;GitHubに公開鍵登録&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/keys&quot;&gt;GitHub &amp;gt; Settings &amp;gt; SSH and GPG keys&lt;/a&gt;の遷移&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New SSH key&lt;/code&gt;ボタンを押下&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;キー名&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;公開鍵&lt;/code&gt;を入力して&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add SSH key&lt;/code&gt;ボタンを押下&lt;/li&gt;
  &lt;li&gt;アカウントのパスワード入力&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;成功すると一覧画面に戻り新しく公開鍵が登録されていることを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-08-13-tools-ssh-basic/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-08-13-tools-ssh-basic/2.png&quot; width=&quot;75%&quot; alt=&quot;GitHubSSHKey&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※今回は記事用に用意した鍵であり既に削除済みです。くれぐれもむやみに鍵は公開しないことを推奨します。&lt;/p&gt;

&lt;h4 id=&quot;登録されてる公開鍵のフィンガープリントについて&quot;&gt;登録されてる公開鍵のフィンガープリントについて&lt;/h4&gt;
&lt;p&gt;GitHubで表示されているフィンガープリントは使われてるハッシュ関数はSHA256ではなくMD5になります。&lt;br /&gt;
そのため手元の公開鍵のフィンガープリントを確認する場合は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5&lt;/code&gt;の指定が必要になります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; github &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; md5
3072 MD5:59:68:3f:44:4f:ec:79:23:e9:c8:9a:88:10:1e:36:59 GitHub &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt;指定なしだとデフォルトとして&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256&lt;/code&gt;が使われるため、期待する値になりません。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; github
3072 SHA256:1/1Sdu/MJXQJnPOBDibvs/cvXrmxJKMibFa1kC3NtoI GitHub &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;githubに公開鍵認証方式でssh接続&quot;&gt;GitHubに公開鍵認証方式でSSH接続&lt;/h3&gt;

&lt;p&gt;GitHubにSSH接続するには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git@github.com&lt;/code&gt;で接続します。
認証鍵の指定は、先程登録した鍵を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt;オプションで指定します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; github git@github.com
Enter passphrase &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;key &lt;span class=&quot;s1&quot;&gt;'github'&lt;/span&gt;:
PTY allocation request failed on channel 0
Hi mothule! You have successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GitHubはシェルアクセスを許可していないのですぐに終了してしまいますが、接続が成功できたことは確認できます。&lt;/p&gt;

&lt;h4 id=&quot;permission-denied-publickeyエラーが出たら&quot;&gt;Permission denied (publickey)エラーが出たら&lt;/h4&gt;
&lt;p&gt;SSH接続で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Permission denied (publickey)&lt;/code&gt;が出たら、公開鍵に限らず、秘密鍵が無効値になっているケースでもこのエラーが表示されます。
公開鍵と秘密鍵のどちらかが正しい値になっていない可能性があります。&lt;br /&gt;
分からない場合はもう一度作成して再登録してください。&lt;/p&gt;

&lt;h4 id=&quot;githubを使ったssh接続はサーバ設定は不要&quot;&gt;GitHubを使ったSSH接続はサーバ設定は不要&lt;/h4&gt;
&lt;p&gt;GitHubに対して公開鍵認証方式によるSSH接続を試しましたが、&lt;br /&gt;
GitHubではSSHサーバとしての設定はGitHub側がよしなになってくれているため、&lt;br /&gt;
公開鍵を渡した後のSSHサーバ側の説明はスキップしてます。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="ssh" /><summary type="html">インフラエンジニアでなくともSSH接続や公開鍵認証は基本知識として覚えといたほうがいいです。 普段めったに触ることのないiOSエンジニアでもknown_hostsや鍵生成などと接する機会は定期的に発生します。 GitHubにSSHの技術が使われています。基本知識として覚えといて損はないと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-13-tools-ssh-basic/eyecatch.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-13-tools-ssh-basic/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">iOSでMVVMする前に基本を整理する</title><link href="https://blog.mothule.com/ios/swift/ios-swift-mvvm" rel="alternate" type="text/html" title="iOSでMVVMする前に基本を整理する" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-09T19:24:57+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-mvvm</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-mvvm">&lt;p&gt;MVVMを知らなかったり曖昧知識で採用すると、MVCとは異なる部分で問題がおきるだけです。&lt;/p&gt;

&lt;h2 id=&quot;mvvmとは&quot;&gt;MVVMとは？&lt;/h2&gt;
&lt;p&gt;アーキテクチャパターンの一つ。
MVCの派生パターンでModel-View-ViewModel
プレゼンテーションとドメインを分離することで保守性と生産性を貢献する。&lt;/p&gt;

&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;
&lt;p&gt;アプリのドメイン（問題領域）を担当する。
ここで、このアプリが解決するドメイン(問題領域)のデータと手続き処理（ビジネスロジック）を表現する。&lt;br /&gt;
その他にも永続化ロジック、通信ロジックも含める。&lt;/p&gt;

&lt;h4 id=&quot;表示寄りデータの扱い&quot;&gt;表示寄りデータの扱い&lt;/h4&gt;
&lt;p&gt;アプリが背景色や文字色や余白のサイズなど表示カスタマイズ機能をもつ場合は、&lt;br /&gt;
それら表示に関する情報を保持するのはModelになる。&lt;br /&gt;
もちろんModelの情報はViewModelを経由してバインドされる。&lt;/p&gt;

&lt;h4 id=&quot;注意点&quot;&gt;注意点&lt;/h4&gt;
&lt;p&gt;一般的にドメインを担当すると決めつけると混乱が生じる。
例えばサーバの存在するクライアント・サーバモデルだとドメイン(問題領域)はサーバ側にあたるため、
クライアント側はアプリケーションとしてみたときにドメインではなくプレゼンテーションに該当する。&lt;/p&gt;

&lt;p&gt;ModelはViewとViewModelの役割以外の部分を担うのが妥当。&lt;/p&gt;

&lt;h3 id=&quot;view&quot;&gt;View&lt;/h3&gt;
&lt;p&gt;UIへの入出力を担当。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプリが扱うデータをユーザーに向けて表示&lt;/li&gt;
  &lt;li&gt;ユーザーからの入力を受け取る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MVVMにおけるViewはViewModelが持つデータを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;データバインディング&lt;/code&gt;機構を通じて自身の担当領域を全うする。
Viewは複雑なロジックと状態を持たないのがMVVMのViewの特徴。&lt;/p&gt;

&lt;h4 id=&quot;データバインディング&quot;&gt;データバインディング&lt;/h4&gt;
&lt;p&gt;RxSwiftやReactiveSwiftやCombineなどを使って、予めデータとイベントと振る舞いの関係性を宣言しておくことで、&lt;br /&gt;
実際のイベント発生時には宣言した処理フローに従って振る舞いが行われる。&lt;/p&gt;

&lt;h3 id=&quot;viewmodel&quot;&gt;ViewModel&lt;/h3&gt;
&lt;p&gt;Viewが状態やロジックを待たない分ここで解決する。
Viewの見た目に影響する状態の保持、Viewから受け取った入力を適切な形に変換しModelに伝達する役目。
つまりViewとModel間の情報伝達とView用状態保持の役割を持つ。&lt;/p&gt;

&lt;h3 id=&quot;viewmodelとmodel間のバインディング&quot;&gt;ViewModelとModel間のバインディング&lt;/h3&gt;
&lt;p&gt;MVVMではView-ViewModel間はデータバインディング機構を使うことでメッセージフローを実現している。&lt;br /&gt;
では、ViewModel-Model間も同様にデータバインディングを行ってはいけないのか？というと、それは別に構わないと思っている。&lt;br /&gt;
MVVMはアーキテクチャパターンであり、そこから肉付けするのは自由だから。
メッセージフローを統一する観点においてデータバインディングやオブザーバーパターンによるメッセージフローの仕組み化を行うことは問題ないと見れる。&lt;/p&gt;

&lt;h2 id=&quot;iosでmvvmを実現するには&quot;&gt;iOSでMVVMを実現するには&lt;/h2&gt;
&lt;p&gt;MVVMは特性上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;データバインディング&lt;/code&gt;が重要な機能となる。&lt;br /&gt;
iOSではViewとViewModel間の情報伝達を手動で同期が必要となるため、そのままでは実現コストが高くMVVMメリットへのコスパが悪い。
そのためiOSでMVVMアーキテクチャを実現するためには、データバインディング機構を何らかの方法で取り込む必要があります。&lt;/p&gt;

&lt;h3 id=&quot;データバインディング機構を提供するライブラリ&quot;&gt;データバインディング機構を提供するライブラリ&lt;/h3&gt;
&lt;p&gt;一般的に認知度の高いデータバインディング機構を提供してるライブラリ下記になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RxSwift&lt;/li&gt;
  &lt;li&gt;ReactiveSwift&lt;/li&gt;
  &lt;li&gt;Combine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中でCombineはiOS13からApple公式frameworkとして提供されています。&lt;br /&gt;
近い将来公式のCombineがデファクトスタンダードとなるかもしれませんが、登場して間もないためまだまだ他のライブラリの利用率が高いです。&lt;/p&gt;

&lt;h2 id=&quot;iosでmvvm採用するメリットとデメリット&quot;&gt;iOSでMVVM採用するメリットとデメリット&lt;/h2&gt;

&lt;p&gt;ここまでで得た情報からiOSでMVVMを採用することで得られるメリットとデメリットについて並べました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Viewロジックのテスタビリティが向上&lt;/li&gt;
  &lt;li&gt;Viewロジックとドメインロジックを分離できる&lt;/li&gt;
  &lt;li&gt;データバインディング機構を提供するライブラリのメンテナンスが必要&lt;/li&gt;
  &lt;li&gt;データバインディング機構を提供するライブラリの理解が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fat-viewmodelになるリスク&quot;&gt;Fat ViewModelになるリスク&lt;/h3&gt;
&lt;p&gt;ドメイン(アプリの問題領域)を理解できていないと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「ModelではないのでViewModel」&lt;/li&gt;
  &lt;li&gt;「この画面で扱うデータはドメインではなく画面依存だからViewModel」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など、データやロジックがドメインなのか判断できないことが起因してViewModelへと責務が委任されていきます。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="program-design" /><category term="ios" /><summary type="html">MVVMを知らなかったり曖昧知識で採用すると、MVCとは異なる部分で問題がおきるだけです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-08-ios-swift-mvvm/0.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-08-ios-swift-mvvm/0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SwiftのCollectionとRangeを組み合わせて使いこなし術</title><link href="https://blog.mothule.com/ios/swift/ios-swift-collection-range-tips" rel="alternate" type="text/html" title="SwiftのCollectionとRangeを組み合わせて使いこなし術" /><published>2020-08-07T00:00:00+09:00</published><updated>2020-08-07T19:34:01+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-collection-range-tips</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-collection-range-tips">&lt;p&gt;SwiftのCollectionはSetやArray、Dictionaryの土台となる重要なポジションです。&lt;br /&gt;
今回は&lt;a href=&quot;https://developer.apple.com/documentation/swift/swift_standard_library/collections/supporting_types&quot;&gt;Supporting Types - Apple Developer Documentation&lt;/a&gt;にあるサポート機能について使えそうなものがないかを調べてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;collectionとrangeの組み合わせ&quot;&gt;CollectionとRangeの組み合わせ&lt;/h2&gt;

&lt;p&gt;Collectionには範囲取得する機能があります。&lt;br /&gt;
範囲を表す型は、Rangeを使います。&lt;br /&gt;
例えば、下のコードを見かけた人は多いと思います。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実はこれ以外の範囲指定方法がCollectionには用意されています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PartialRangeUpTo: 上限のみ(上限未満)&lt;/li&gt;
  &lt;li&gt;PartialRangeThrough: 上限のみ(上限以下)&lt;/li&gt;
  &lt;li&gt;PartialRangeFrom: 下限のみ&lt;/li&gt;
  &lt;li&gt;UnboundedRange_: 上限下限なし&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;partialrangeupto-上限のみ上限未満&quot;&gt;PartialRangeUpTo: 上限のみ(上限未満)&lt;/h3&gt;

&lt;p&gt;上限値のみが指定された範囲型です。&lt;br /&gt;
下限は無制限となります。&lt;br /&gt;
そのため&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt;メソッドで範囲内判定を確認するとマイナスでも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;を返します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upToFive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upToFive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// PartialRangeUpTo&amp;lt;Double&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upToFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upToFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upToFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upToFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをCollectionの範囲指定として使えます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみにパターンマッチング演算子(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~=&lt;/code&gt;)が用意されているので下記2つは同じ意味です。&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;partialrangethrough-上限のみ上限以下&quot;&gt;PartialRangeThrough: 上限のみ(上限以下)&lt;/h3&gt;

&lt;p&gt;PartialRangeUpToと同じですが、こちらは上限値も範囲に含めます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;throughFive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throughFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throughFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throughFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throughFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをCollectionの範囲指定として使えます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4, 2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;partialrangefrom-下限のみ&quot;&gt;PartialRangeFrom: 下限のみ&lt;/h3&gt;

&lt;p&gt;下限値のみが指定された範囲型です。&lt;br /&gt;
上限は無制限となります。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt;メソッドで確認すると下記のようになります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atLeastFive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atLeastFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atLeastFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atLeastFive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをCollectionの範囲指定として使えます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;unboundedrange_-上限下限なし&quot;&gt;UnboundedRange_: 上限下限なし&lt;/h3&gt;

&lt;p&gt;これはレアケースな気がしますが、上限も下限も無制限の指定方法があります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [4, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;collectionrangeまとめ&quot;&gt;Collection+Rangeまとめ&lt;/h2&gt;

&lt;p&gt;出てきた書き方を下記にまとめます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Collectionの範囲取得で 0..&amp;lt;3 のような書き方をショートハンドのように省略できるようになります。&lt;br /&gt;
使い所は広くはありませんが、知っておくとライブラリコードで突然出てきても落ち着いて読み進めることができます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">SwiftのCollectionはSetやArray、Dictionaryの土台となる重要なポジションです。 今回はSupporting Types - Apple Developer Documentationにあるサポート機能について使えそうなものがないかを調べてまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-07-ios-swift-collection-range-tips/0.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-07-ios-swift-collection-range-tips/0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Swiftの高階関数で遅延評価(lazy)を使い処理を効率化する</title><link href="https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection" rel="alternate" type="text/html" title="Swiftの高階関数で遅延評価(lazy)を使い処理を効率化する" /><published>2020-08-07T00:00:00+09:00</published><updated>2020-08-07T03:55:23+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection">&lt;p&gt;例えばlazyを使うと10万件のフルアクセス処理が1件で済みます。&lt;/p&gt;

&lt;h2 id=&quot;swiftの高階関数はその場でクロージャを評価する&quot;&gt;Swiftの高階関数はその場でクロージャを評価する&lt;/h2&gt;
&lt;p&gt;SwiftのCollectionなどで使える高階関数(filter, map, reduceなど)は、&lt;br /&gt;
関数が呼ばれたら、その場でクロージャが評価されます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Will call count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例えば上記コードを実行すると、コンソールには下記が出力されます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toString(from:)
Will call count
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ケースによっては無駄な処理が生まれる&quot;&gt;ケースによっては無駄な処理が生まれる&lt;/h2&gt;

&lt;p&gt;例えば10万件に対しあるfilter処理した結果に対し&lt;strong&gt;isEmpty&lt;/strong&gt;を呼びたいケースはコードだとこうなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを高階関数を使わず書くとこうなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ①&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;isEmptyは1回でも条件満たせばいいので、それ以降のループ処理を走らせる必要がありません。&lt;br /&gt;
①の部分でisEmpty = falseの後にbreakでループを抜けるべきです。&lt;/p&gt;

&lt;h3 id=&quot;高負荷だと無駄が顕著に現れる&quot;&gt;高負荷だと無駄が顕著に現れる&lt;/h3&gt;

&lt;p&gt;例えば高階関数のクロージャが少し重かったとします。(0.001秒かかる)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合、最終的な結果を得るには、少なくとも100秒(0.001秒 × 10万件)かかります。&lt;/p&gt;

&lt;h2 id=&quot;lazy遅延評価を使う&quot;&gt;lazy(遅延評価)を使う&lt;/h2&gt;
&lt;p&gt;SwiftのSequenceやCollectionにはlazy機能があります。&lt;br /&gt;
これは実際の値が必要になるまで高階関数内クロージャを実行しません。&lt;br /&gt;
実際の値とは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first&lt;/code&gt;などです。&lt;/p&gt;

&lt;h3 id=&quot;遅延を確認する&quot;&gt;遅延を確認する&lt;/h3&gt;

&lt;p&gt;lazyを使うには、高階関数を呼ぶ前に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt;メソッドを呼びます。&lt;br /&gt;
冒頭に説明したコードを使ってlazy化します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Will call count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行するとコンソールには下記が出力されます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Will call count
toString(from:)
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;高階関数内で呼ばれている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString(from:)&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Will call count&lt;/code&gt;より後に来ています。&lt;/p&gt;

&lt;h3 id=&quot;効率化を確認する&quot;&gt;効率化を確認する&lt;/h3&gt;

&lt;p&gt;Swiftのlazyにはもう一つ特徴があります。&lt;br /&gt;
それは実際の値を必要としてるメソッドによって、高階関数のクロージャを中断することです。&lt;br /&gt;
例えば先程使った100秒かかるコードをlazy化してみます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行するとコンソールは下記を出力します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;in filter
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in filter&lt;/code&gt;が1回しか呼ばれていないです。
これは1回目のループで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;になったことで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;の判断ができるようになったので処理を中断してます。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;にすると、lazyしてないコード同様に全てのループを実行します。&lt;br /&gt;
これは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;の結果を判断するには全部の処理を通さないと結果が分からないためです。&lt;/p&gt;

&lt;p&gt;つまり&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt;を使うことで途中で結果が得られたら中断し得られない場合は継続します。&lt;/p&gt;

&lt;h2 id=&quot;全部lazyというわけではない&quot;&gt;全部lazyというわけではない&lt;/h2&gt;
&lt;p&gt;とりあえず全部lazyにしとけば良いというものではありません。&lt;br /&gt;
lazyにすることで通常と比べ遅延用の仕組みが必要となるため内部処理が複雑となるため速度やメモリ負荷がその分かかります。&lt;/p&gt;

&lt;p&gt;またlazyは評価を遅らせます。遅延評価のデメリットが発生することを知る必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LazyCollectionやLazySequenceには用意されてない高階関数がある&lt;/li&gt;
  &lt;li&gt;呼出元と処理実行タイミングが異なるため、どこで実際の処理が走るのか読みにくくなる&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">例えばlazyを使うと10万件のフルアクセス処理が1件で済みます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-07-ios-swift-lazy-sequence-and-collection/0.png" /><media:content medium="image" url="https://blog.mothule.com/assets/images/2020-08-07-ios-swift-lazy-sequence-and-collection/0.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>