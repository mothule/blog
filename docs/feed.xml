<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2019-09-29T04:23:13+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">【厳選】エンジニアによるエンジニア向けおすすめエンジニア映画</title><link href="https://blog.mothule.com/notebook/notebook-recommended-movies-for-engineers" rel="alternate" type="text/html" title="【厳選】エンジニアによるエンジニア向けおすすめエンジニア映画" /><published>2019-09-29T00:00:00+09:00</published><updated>2019-09-29T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/notebook-recommended-movies-for-engineers</id><content type="html" xml:base="https://blog.mothule.com/notebook/notebook-recommended-movies-for-engineers">&lt;p&gt;映画など作中にPC画面を操作するシーンがあると「お」ってなりますよね。私がそれです。&lt;/p&gt;

&lt;p&gt;「そんなわけない」「そんなグラフィカルいらんやろ」とかツッコミ満載なものもありますが、&lt;br /&gt;
それとは別にセリフがエンジニアのやり取りであるあるだと「ふっｗ」って鼻で笑ってしまいませんか？&lt;/p&gt;

&lt;p&gt;自分が見たエンジニアが関係する映画や海外ドラマで面白かったものを紹介します。&lt;/p&gt;

&lt;p&gt;この記事を書いたきっかけは単純に面白くて共有したかっただけです。&lt;/p&gt;

&lt;h2 id=&quot;厳選推奨映画&quot;&gt;厳選推奨映画&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SILICON VALLEY(シリコンバレー)&lt;/li&gt;
  &lt;li&gt;MR.ROBOT(ミスター・ロボット)&lt;/li&gt;
  &lt;li&gt;インターンシップ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;silicon-valleyシリコンバレー&quot;&gt;SILICON VALLEY(シリコンバレー)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E5%AE%9F%E7%94%A8%E6%9C%80%E5%B0%8F%E9%99%90%E3%81%AE%E8%A3%BD%E5%93%81/dp/B077TK3HK9/ref=as_li_ss_il?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;keywords=silicon+valley&amp;amp;qid=1569695699&amp;amp;s=instant-video&amp;amp;sr=1-1&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=8961949b3e79c7aed19fbfc37e589848&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B077TK3HK9&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B077TK3HK9&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;オタクな主人公が起業しスタートアップ会社のSEOとして働きながら、VC(ベンチャーキャピタル)から資金集めしたり、コンペに参加するために奮闘するが、
若さゆえに過ちを犯ししっちゃかめっちゃになりつつむ前に進むコメディ・ドラマ&lt;/p&gt;

&lt;p&gt;海外ドラマになっており、執筆現在シーズン1からシーズン5までAmazon Prime会員なら無料見ることができます。&lt;/p&gt;

&lt;h4 id=&quot;見どころここが面白い&quot;&gt;見どころ・ここが面白い&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;実際にスタートアップ企業でありそうな雰囲気や言葉の投げあいや資金繰り&lt;/li&gt;
  &lt;li&gt;vim と emacs の派閥争いのようなネタや専門用語の登場&lt;/li&gt;
  &lt;li&gt;個性濃いメンバーとパロディ&lt;/li&gt;
  &lt;li&gt;話が分岐して同時進行しつつ集約したときの面白さ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;おすすめ度：★★★★★&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;インターンシップ&quot;&gt;インターンシップ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%83%E3%83%97-%E5%AD%97%E5%B9%95%E7%89%88-%E3%83%B4%E3%82%A3%E3%83%B3%E3%82%B9%E3%83%BB%E3%83%9C%E3%83%BC%E3%83%B3/dp/B00UMBA7FA/ref=as_li_ss_il?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;keywords=%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%83%E3%83%97&amp;amp;qid=1569696109&amp;amp;s=instant-video&amp;amp;sr=1-1&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=3a9b9cef7fadf80c78f983c3945e037f&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00UMBA7FA&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B00UMBA7FA&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ITリテラシー皆無の主人公が超大手Googleにインターンになり、6つの難題を解決して社員を目指す人生逆転ゲーム。&lt;/p&gt;

&lt;h4 id=&quot;見どころここが面白い-1&quot;&gt;見どころ・ここが面白い&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Googleのオフィスをロケーションにしてる&lt;/li&gt;
  &lt;li&gt;主役二人のコメディ全開&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;おすすめ度：★★★★&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mrrobotミスターロボット&quot;&gt;MR.ROBOT(ミスター・ロボット)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/%EF%BC%91%E3%81%8B%E3%82%BC%E3%83%AD%E3%81%8B/dp/B015NZFICG/ref=as_li_ss_il?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;keywords=mr.robot&amp;amp;qid=1569696313&amp;amp;s=instant-video&amp;amp;sr=1-1&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=888454bd0fdf0cd1a94c71515d1505e5&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B015NZFICG&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B015NZFICG&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主人公がプログラマーで、喋り相手は主に脳内再生。普段はセキュリティ会社で働いているが、夜はハッカーとして他人にハッキングして不正を暴き正義を守る
顔を持つ。そんな主人公がハッカー集団に誘われ大きな策略に巻き込まれていくドラマ。&lt;/p&gt;

&lt;h4 id=&quot;見どころここが面白い-2&quot;&gt;見どころ・ここが面白い&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;PC画面シーンが多い&lt;/li&gt;
  &lt;li&gt;使われてるツールや言語が本物&lt;/li&gt;
  &lt;li&gt;本物のハッカーっぽい（厳密にはクラッカーですが)&lt;/li&gt;
  &lt;li&gt;セリフの専門用語がデタラメじゃない&lt;/li&gt;
  &lt;li&gt;PCスキル以外が全然ダメ故にPC触らせたときの天才ぶりにワキワキする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;おすすめ度：★★★★★&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;すべてamazonで見れます&quot;&gt;すべてAmazonで見れます&lt;/h2&gt;

&lt;p&gt;回し者みたいな書き方ですが、まぁみんながAmazonで見てくれれば、それだけ面白い映画が増えてくれるので、回し者といえば回し者です。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=mothule05-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B077TK3HK9&amp;amp;linkId=3ce21c80da61f87bc1e4ce2c4140ed69&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=mothule05-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00UMBA7FA&amp;amp;linkId=815eb89e13b32b7a5f48d3f51d64a71d&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=mothule05-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B015NZFICG&amp;amp;linkId=b64efff5aa4cd8c218f7ece21351f29a&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;おすすめしない映画&quot;&gt;おすすめしない映画&lt;/h2&gt;

&lt;p&gt;面白くなくて全部見ずにやめたのは書いていません。
なので少ないです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;betas(ベータス)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;betasベータス&quot;&gt;betas(ベータス)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E5%87%BA%E4%BC%9A%E3%81%84%E3%81%AF%E3%82%A2%E3%83%97%E3%83%AA%E2%80%9C%EF%BC%A2%EF%BC%B2%EF%BC%A2%E2%80%9D/dp/B00MF7DEHC/ref=as_li_ss_il?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;keywords=betas&amp;amp;qid=1569697265&amp;amp;s=instant-video&amp;amp;sr=1-1&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=03cfbdea28dcdfe75cbcec19b08d94aa&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00MF7DEHC&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B00MF7DEHC&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主人公たちがVCから資金融資を受けるためにパーティに参加してエンジェル投資家に事業説明をしたり、シェアオフィスでサービスローンチのために奮闘するドラマ&lt;/p&gt;

&lt;h4 id=&quot;ここがダメ萎えた&quot;&gt;ここがダメ・萎えた&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;コメディでもシリアスでもない&lt;/li&gt;
  &lt;li&gt;色恋沙汰ばかり&lt;/li&gt;
  &lt;li&gt;世界観が嘘っぱい&lt;/li&gt;
  &lt;li&gt;技術の話が出そうで出ない&lt;/li&gt;
  &lt;li&gt;ジャンプ感満載&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="notebook" /><summary type="html">映画など作中にPC画面を操作するシーンがあると「お」ってなりますよね。私がそれです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-29-notebook-recommended-movies-for-engineers.png" /></entry><entry><title type="html">RxSwiftの基本を動かして理解する</title><link href="https://blog.mothule.com/ios/rxswift/ios-swift-rxswfit-basic" rel="alternate" type="text/html" title="RxSwiftの基本を動かして理解する" /><published>2019-09-18T00:00:00+09:00</published><updated>2019-09-18T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/rxswift/ios-swift-rxswfit-basic</id><content type="html" xml:base="https://blog.mothule.com/ios/rxswift/ios-swift-rxswfit-basic">&lt;p&gt;RxSwiftの理解ハードルが高くて苦労してる人やネットにある記事では理解できない人っていませんか？&lt;br /&gt;
私もその一人でした。ネットで見かける記事を読み解いても&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;公式の英文をそのまま直訳しただけの説明&lt;/li&gt;
  &lt;li&gt;公式の順序通りの説明順番&lt;/li&gt;
  &lt;li&gt;正しい言葉に拘り過ぎて「パルスのファルシのルシがパージでコクーン」みたいな用語だけが独り歩き&lt;/li&gt;
  &lt;li&gt;マーブルダイアグラムという慣れないし、慣れてもやっぱり直感で理解できないグラフに説明を丸投げ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど読み手に負担がかかった記事が多く「なんでこんなに分かりにくいのだろう？なぜか腹落ちしない」と何度も思いました。&lt;/p&gt;

&lt;p&gt;なので自分が学習を通して「これを最初に腹落ちしないとダメじゃん」と思うアプローチで、RxSwiftを説明する記事を書きました。&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;ざっくりとRxSwiftの立ち位置やこの記事で得られる知識について簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;最近のios開発事情&quot;&gt;最近のiOS開発事情&lt;/h3&gt;
&lt;p&gt;iOSはSwiftに加え、RxSwift、MVVM、そしてSwiftUI。
iOSはAndroidと異なり明確なアーキテクチャを提示やサポートをしません。
そのため実装が群雄割拠になり、案件や会社によってバラバラでどんどん覚える量が増えています。&lt;/p&gt;

&lt;p&gt;スクール上がりの経験1年ちょいでもiOSアプリは作れますが、
メンテナンス、チーム、大規模、テスタビリティ、バグ抑制、レビューなど求められる要件に対して、適切なデザインを提示できるには相応のスキルを必要とされます。&lt;/p&gt;

&lt;p&gt;つまりiOSアプリはSDKと言語仕様の上に明確なフレームワークが存在しないため、上記で上げた項目の品質がブレやすく、そしてエンジニアによって依存します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-18-ios-swift-rxswfit-basic-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-18-ios-swift-rxswfit-basic-1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;em&gt;iOSにはアーキテクチャ指針が明確ではない&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;rxswiftはちょっとした課題のちょっとした提案&quot;&gt;RxSwiftはちょっとした課題のちょっとした提案&lt;/h3&gt;

&lt;p&gt;RxSwiftは解決策をある程度強制します。&lt;br /&gt;
アーキテクチャもMVVMが最適解として選択されます。&lt;br /&gt;
RxSwiftが提示するレールにチームが従うことで、無数にある実装においてルールを強制することができます。&lt;/p&gt;

&lt;p&gt;RxSwiftは従来の処理フローの繋がりが集約・視覚化されない問題を解決する１つのアプローチです。&lt;br /&gt;
そのアプローチ方法について理解することがRxSwiftを使用する上で必須となっています。&lt;/p&gt;

&lt;p&gt;しかし、この知識に正面からぶつかると難解な動きや構造をするモデルに心を折られてしまいます。&lt;/p&gt;

&lt;h3 id=&quot;この記事ではとっかかりを掴む&quot;&gt;この記事ではとっかかりを掴む&lt;/h3&gt;

&lt;p&gt;この記事を通して、コードを動かして理解することで、体系的な知識の点、そしてそれを繋ぐ線を少しずつ構築し、難解なモデルに対して戦える密度の薄い体系知識を得られればなと思います。&lt;/p&gt;

&lt;p&gt;ネットで拾えるRxSwiftの記事はどれもオリジナルでもあるのかと、思うような似たような解説記事ばかりなので、私なりに噛み砕いて説明します。&lt;/p&gt;

&lt;p&gt;まず巨大なモデルを理解するには、大きさを知るために &lt;strong&gt;ざっくりイメージできる&lt;/strong&gt; ことが大事です。&lt;/p&gt;

&lt;p&gt;粒度は少しずつ細かくして、少しずつ詳細を把握していくべきです。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RxSwift 5.x&lt;/li&gt;
  &lt;li&gt;Swift 5.x&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;この記事の読み方&quot;&gt;この記事の読み方&lt;/h3&gt;

&lt;p&gt;この記事だけでRxSwiftについて理解する記事ではありません。&lt;br /&gt;
この記事だけで完結するほど精巧に作られていませんし、RxSwiftはそんなに単純ではないです。&lt;/p&gt;

&lt;p&gt;タイトルの通り実際にまたRxSwiftを使ったプロジェクトを用意し、動かしながら読むことを推奨します。&lt;br /&gt;
RxSwiftのコード自体もあるとなお良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;注意点&quot;&gt;注意点&lt;/h3&gt;

&lt;p&gt;この記事では全てについて説明は&lt;strong&gt;していません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目的は&lt;strong&gt;ざっくりイメージできる&lt;/strong&gt;ことを重視しています。&lt;/p&gt;

&lt;p&gt;RxSwiftとはなにか？を知ったときに得るイメージを崩さないように記事を書いてあるので、専門用語や実践的なノウハウについては記載していません。
また説明順序に関しても、私が学習を通して、このセクションをこの順序でやったほうが分かりやすいはず。という判断で記事を書いてあります。&lt;/p&gt;

&lt;h2 id=&quot;rxswiftはオブザーバーパターンとパイプライン&quot;&gt;RxSwiftはオブザーバーパターンとパイプライン&lt;/h2&gt;

&lt;p&gt;デザインパターンの１つであるオブザーバーパターンと、シェルでよく使うパイプ(&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;)を使って、&lt;br /&gt;
&lt;strong&gt;イベントにリアクションを連結するイメージです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;他のサイトなどでRxSwiftについてざっくり概要を知った人たちが考えるRxSwiftとは&lt;br /&gt;
&lt;strong&gt;「イベントを監視し、動きがあれば逐一報告し、報告を受けたものが何らかの反応をする」&lt;/strong&gt;&lt;br /&gt;
という説明で大体が納得できるのではないでしょうか？&lt;/p&gt;

&lt;p&gt;つまり「RxSwiftとはオブザーバーパターンを使っている」というイメージが強くあることで、&lt;br /&gt;
読み手側はオブザーバーの&lt;strong&gt;イベントを報告する者&lt;/strong&gt;と&lt;strong&gt;イベントを受け取る者&lt;/strong&gt;はどれか？をキーに文章を読むのではないでしょうか？&lt;/p&gt;

&lt;p&gt;しかしそれが返って邪魔となり道に迷っているのではないかと私は思います。&lt;/p&gt;

&lt;h2 id=&quot;イベントを報告する者とイベントを受け取る者&quot;&gt;イベントを報告する者とイベントを受け取る者&lt;/h2&gt;
&lt;p&gt;たくさんあるクラスのなかでまず覚えるべきは&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;です。&lt;br /&gt;
そして採用している&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType&lt;/code&gt; プロトコルです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType.subscribe&lt;/code&gt; がイベントを受け取るための講読手続きになります。&lt;br /&gt;
なので &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType&lt;/code&gt; を採用しているクラスは全て、 &lt;strong&gt;イベントを受け取る者&lt;/strong&gt; となります。&lt;br /&gt;
つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;は &lt;strong&gt;イベントを受け取る者&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;では、&lt;strong&gt;イベントを報告する者&lt;/strong&gt; は誰でしょうか。&lt;/p&gt;

&lt;p&gt;それは &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType.subscribe&lt;/code&gt;の引数が採用している&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;です。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;かなり似てるので、注意して読んでください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;プロトコルは &lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt; メソッドを持っており、これを使って報告をしています。&lt;br /&gt;
つまり &lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;を採用しているクラスは全て、 &lt;strong&gt;イベントを報告する者&lt;/strong&gt; となります。&lt;/p&gt;

&lt;h3 id=&quot;整理&quot;&gt;整理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType&lt;/code&gt; が &lt;strong&gt;イベントを受け取る者&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt; が &lt;strong&gt;イベントを報告する者&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;つまり &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;は &lt;strong&gt;イベントを受け取る者&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;イベントを報告してイベントを受け取る&quot;&gt;イベントを報告してイベントを受け取る&lt;/h2&gt;

&lt;p&gt;イベントを報告する者と受け取る者の２つがあることは分かりました。&lt;br /&gt;
イベントを受け取る者のクラスは&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;でした。&lt;br /&gt;
ではイベントを報告する者のクラスは何でしょう？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;を採用しているクラスを探すと出てきます。&lt;/p&gt;

&lt;p&gt;今回はその中からよく使う &lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt; を使います。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt;は &lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt; メソッドに &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;状態と&lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt;状態をそれぞれ報告しています。
ただのラッパーメソッドです。&lt;/p&gt;

&lt;p&gt;これだけでは &lt;strong&gt;イベントを報告する者&lt;/strong&gt; だけで &lt;strong&gt;イベントを受け取る者&lt;/strong&gt; がいません。&lt;br /&gt;
しかも、イベントを受け取る者が報告する者に対し、講読する手続きも必要になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;の定義へジャンプすると次のような定義になっています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubjectType&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cancelable&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObserverType&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SynchronizedUnsubscribeType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;なんと、&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; を採用しています。
つまり &lt;strong&gt;イベントを受け取る者&lt;/strong&gt; でもあったのです。&lt;/p&gt;

&lt;p&gt;そのため&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;1つで、次のような &lt;strong&gt;報告&lt;/strong&gt; と &lt;strong&gt;受け取り&lt;/strong&gt; ができます。&lt;/p&gt;

&lt;p&gt;次のコードは、&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;disposed&lt;/code&gt; それぞれの状態に対してハンドリングしています。&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext:  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onError: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onDisposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onDisposed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  A
onNext:  B
onNext:  C
onCompleted
onDisposed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに途中でエラーイベントを報告した場合、講読は終了します。
例えば先程のコードの一部を次のように &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; を挟むと結果が変わります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;domain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  A
onNext:  B
onError:  The operation couldn’t be completed. (domain error -1.)
onDisposed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;イベントは報告されず、&lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt;も報告されません。&lt;br /&gt;
そして&lt;code class=&quot;highlighter-rouge&quot;&gt;disposed&lt;/code&gt;が報告され講読終了となります。&lt;/p&gt;

&lt;h3 id=&quot;整理-1&quot;&gt;整理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt; は &lt;strong&gt;報告する者&lt;/strong&gt; でもあり &lt;strong&gt;受け取る者&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;エラーが起きたら講読は終了する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;他のobservertypeの採用クラス&quot;&gt;他のObserverTypeの採用クラス&lt;/h2&gt;

&lt;p&gt;PublishSubject以外に&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt;を採用してるクラスについて簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;publishrelay&quot;&gt;PublishRelay&lt;/h3&gt;

&lt;p&gt;PublishSubjectのラッパーです。
PublishSubjectの&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt;はなく、&lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;のみになります。
この&lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;の中身は&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;となります。
結果的にエラーや完了のイベントを流せないので、実質エラーや完了で終了できなくなります。&lt;/p&gt;

&lt;h3 id=&quot;behaviorsubject&quot;&gt;BehaviorSubject&lt;/h3&gt;

&lt;p&gt;PublishSubjectに状態を持たせたようなクラスです。
BehaviorSubjectは最後に報告した値を保持しています。
保持しているのでsubscribeしたらその状態も通知します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BehaviorSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onError: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onDisposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onDisposed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  ABC
onNext:  D
D
onNext:  E
onCompleted
onDisposed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;イベントの報告に経路に手を加える&quot;&gt;イベントの報告に経路に手を加える&lt;/h2&gt;

&lt;p&gt;RxSwiftでは、報告する者がイベントを受け取る者に通知する経路を加工することができます。&lt;/p&gt;

&lt;h3 id=&quot;filter-条件満たすイベントのみ連絡する&quot;&gt;filter: 条件満たすイベントのみ連絡する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;を通すことで、イベントを受け取る者への連絡を制限することができます。&lt;br /&gt;
次のコードは、3文字以下のみを連絡しています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishRelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!$#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ABCDE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  A
onNext:  12
onNext:  !$#
onNext:  ABC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;map-イベント情報を変換して連絡する&quot;&gt;map: イベント情報を変換して連絡する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;を通すことで、イベントを連絡する者が持つデータを加工して、受け取る者へ通知できます。
次のコードは整数から文字列に変換して連絡しています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishRelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  1
onNext:  2
onNext:  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;講読を解除する&quot;&gt;講読を解除する&lt;/h2&gt;
&lt;p&gt;受け取る者が報告する者から、データを受け取る講読手続きがあるように、反対に講読を解除する処理もあります。&lt;/p&gt;

&lt;p&gt;次のコードでは、途中で&lt;code class=&quot;highlighter-rouge&quot;&gt;dispose&lt;/code&gt;を読んだことで、それ以降のイベントが届いていません。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext:  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onDisposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Disposed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  A
onNext:  B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この講読の解除は、明示的に呼び出して解除する方法ですが、エラーや完了イベントを受け取った場合も講読を解除します。&lt;/p&gt;

&lt;h3 id=&quot;disposebag&quot;&gt;DisposeBag&lt;/h3&gt;

&lt;p&gt;他の購読解除のタイミングとして、データの連絡する者が開放されるケースがあります。
このようなケースで自身の開放タイミングで保持するdisposableをまとめて解除してくれるのがこのクラスです。&lt;/p&gt;

&lt;p&gt;次のコードでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;DisposeBag&lt;/code&gt;に講読先のdisposableを入れておき、講読途中でnilを渡してメモリ解放をすることで&lt;br /&gt;
「DisposeBagの開放タイミングでバッグ内のdisposableを全て開放する」特性を再現しています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PublishRelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;disposable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onNext: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onError: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onDisposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onDisposed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisposeBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DisposeBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onNext:  A
onDisposed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常であれば、上記コードのようにnilを渡すといった意識した開放はせずとも、&lt;code class=&quot;highlighter-rouge&quot;&gt;DisposeBag&lt;/code&gt;インスタンスのスコープアウトや親クラスの開放で、意識をせずとも開放をしてくれます。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;以上がRxSwiftの基礎を動かして理解する説明です。&lt;/p&gt;

&lt;p&gt;記事の内容に加え、手を動かしながらやったことで、RxSwiftに抱くオブサーバーのイメージを崩さずRxSwiftの基礎中の基礎を理解できたのではないかと思います。&lt;/p&gt;

&lt;p&gt;まだ &lt;code class=&quot;highlighter-rouge&quot;&gt;Driver&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Cold/Hot&lt;/code&gt; など山程あるのですが、それは別記事として投稿したら、ここにリンクを貼ろうと思います。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="rxswift" /><summary type="html">RxSwiftの理解ハードルが高くて苦労してる人やネットにある記事では理解できない人っていませんか？ 私もその一人でした。ネットで見かける記事を読み解いても</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-18-ios-swift-rxswfit-basic.png" /></entry><entry><title type="html">原因と対応「Error: RuboCop found unsupported Ruby version 2.1」</title><link href="https://blog.mothule.com/ruby/rubocop/ruby-rubocop-found-unsupported-ruby-version" rel="alternate" type="text/html" title="原因と対応「Error: RuboCop found unsupported Ruby version 2.1」" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rubocop/ruby-rubocop-found-unsupported-ruby-version</id><content type="html" xml:base="https://blog.mothule.com/ruby/rubocop/ruby-rubocop-found-unsupported-ruby-version">&lt;p&gt;先日コマンドラインツールを作ろうと bunlder や activesupport, rubocop など環境構築をしていたときに、ちょっとした勘違いでRuboCopがエラーを吐いて躓いたので、調査して分かった原因と対応方法についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;rubocopでエラーが発生&quot;&gt;RuboCopでエラーが発生&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle exec rubocop&lt;/code&gt; を実行したら次のようなエラーが発生しました。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rubocop
Error: RuboCop found unsupported Ruby version 2.1 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;TargetRubyVersion&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; parameter &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;vendor/bundle/ruby/2.6.0/gems/rainbow-3.0.0/.rubocop.yml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 2.1-compatible analysis was dropped after version 0.58.
Supported versions: 2.3, 2.4, 2.5, 2.6, 2.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.1？ 自分の環境では rbenv で .ruby-version を使っており、 2.6.2 を使っていました。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .ruby-version
2.6.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;targetrubyversion-を指定し忘れ&quot;&gt;TargetRubyVersion を指定し忘れ&lt;/h3&gt;
&lt;p&gt;TargetRubyVersion指定するのを忘れてたので .rubocop.yml に追記しました。&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;AllCops&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TargetRubyVersion &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.6.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし問題は解決せず…&lt;/p&gt;

&lt;h2 id=&quot;エラーをちゃんと読むと分かる&quot;&gt;エラーをちゃんと読むと分かる&lt;/h2&gt;
&lt;p&gt;一行目の半分あたりを読んだ後に1行目終わりから2行目初めにパスが記載されていたので、それ以外の箇所をきちんと読んでいませんでした。
問題が起きてる場所が &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/bundle/ruby/2.6.0/gems/rainbow-3.0.0/.rubocop.yml&lt;/code&gt; と書いており自分の場所ではない。
しかも 何やら .rubocop.yml が配置されている。
中身を見ると次のような指定がされています。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;vendor/bundle/ruby/2.6.0/gems/rainbow-3.0.0/.rubocop.yml
inherit_from: .rubocop_todo.yml

AllCops:
  DisplayCopNames: &lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;DisplayStyleGuide: &lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;TargetRubyVersion: &lt;span class=&quot;s2&quot;&gt;&quot;2.1&quot;&lt;/span&gt;
  Exclude:
    - &lt;span class=&quot;s2&quot;&gt;&quot;spec/**/*&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;vendor/**/*&quot;&lt;/span&gt;
Documentation:
  Enabled: &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;HashSyntax:
  Enabled: &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;MethodName:
  Enabled: &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;StringLiterals:
  Enabled: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;どうやら raibow gem では &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetRubyVersion&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;2.1&lt;/code&gt; を指定してあることで、互換性エラーが起きていました。
エラー文「2.1-compatible analysis was dropped after version 0.58.」と書いてあるように RubCop version 0.58 以降では 2.1互換性を破棄しています。&lt;/p&gt;

&lt;p&gt;インストールした RubCop のバージョンは0.72.0でした。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rubocop &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
0.72.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;なぜエラーが起きたのか&quot;&gt;なぜエラーが起きたのか？&lt;/h2&gt;
&lt;p&gt;普段自分が作っている別のrailsアプリとかでは、このような問題は起きていません。
しかしRuboCopがgems内まで解析しようとしていることはエラーから判断できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.rubocop.yml&lt;/code&gt; でもgemは見ないように設定しています。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;AllCops&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TargetRubyVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.6.2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmp/**/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これ今見ると恥ずかしいミスです。。&lt;/p&gt;

&lt;h3 id=&quot;指定方法を間違えている&quot;&gt;指定方法を間違えている&lt;/h3&gt;

&lt;p&gt;実は gems内の解析を除外する指定方法が間違っており正しくははこうでした。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;AllCops&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TargetRubyVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.6.2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/**/*&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmp/**/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt;でも下のtmp同様に除外されると勘違いしていました。
おそらく.gitignoreで指定フォルダを無視する設定をした後だったのか原因かもしれません。&lt;/p&gt;

&lt;h2 id=&quot;rubocop-found-unsupported-ruby-version-21-の原因と対応方法のまとめ&quot;&gt;RuboCop found unsupported Ruby version 2.1 の原因と対応方法のまとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;原因：gem内も解析対象となっている&lt;/li&gt;
  &lt;li&gt;対応：.rubocop.ymlで&lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/**/*&lt;/code&gt;のように除外指定をする&lt;/li&gt;
  &lt;li&gt;まとめ：エラー文をちゃんと読む&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ruby" /><category term="rubocop" /><summary type="html">先日コマンドラインツールを作ろうと bunlder や activesupport, rubocop など環境構築をしていたときに、ちょっとした勘違いでRuboCopがエラーを吐いて躓いたので、調査して分かった原因と対応方法についてまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-15-ruby-rubocop-found-unsupported-ruby-version.png" /></entry><entry><title type="html">フルリモート1年半で知った、ただ1つの最重要なルーチン</title><link href="https://blog.mothule.com/notebook/notebook-remote-worker-need-thinkg-just-one" rel="alternate" type="text/html" title="フルリモート1年半で知った、ただ1つの最重要なルーチン" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/notebook-remote-worker-need-thinkg-just-one</id><content type="html" xml:base="https://blog.mothule.com/notebook/notebook-remote-worker-need-thinkg-just-one">&lt;h2 id=&quot;運動&quot;&gt;運動&lt;/h2&gt;

&lt;p&gt;以上です。&lt;/p&gt;

&lt;p&gt;分からない人向けに順を追って説明します。&lt;/p&gt;

&lt;h2 id=&quot;フルリモート1年半の環境&quot;&gt;フルリモート1年半の環境&lt;/h2&gt;

&lt;p&gt;今は私が働いている会社ではフルリモートで正社員をしています。&lt;br /&gt;
私がフルリモートを始めたのは2018年3月の後半、つまりおそよ1年半近くフルリモートで仕事をしています。&lt;/p&gt;

&lt;p&gt;週に1回、会社に顔だしてオフィスにいるメンバーと雑談したり、マネージャーと少しおしゃべりしたり。&lt;br /&gt;
必須ではなく大体任意で出社しています。都内から離脱したらこの行動はやらなくなるでしょう。&lt;/p&gt;

&lt;p&gt;その間、私はずっと自宅 ⇔ 保育園の毎日で、自宅ではほぼ椅子に座りっぱなしです。&lt;br /&gt;
日中はトイレ、昼食で立ち上がる程度でしょうか。&lt;/p&gt;

&lt;p&gt;体力は地を抜けて底抜けに落ちていきました。&lt;br /&gt;
食事制限しても、痩せにくい体質と急激に変化しました。&lt;br /&gt;
ここまで変化すると進化と言っても過言ではないです。&lt;br /&gt;
いや、厳密には現代社会に適用できていない変化なので退化なのかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;体力が落ちて変化したもの&quot;&gt;体力が落ちて変化したもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;体の柔軟性&lt;/li&gt;
  &lt;li&gt;筋力&lt;/li&gt;
  &lt;li&gt;体力&lt;/li&gt;
  &lt;li&gt;集中力&lt;/li&gt;
  &lt;li&gt;冷静さ&lt;/li&gt;
  &lt;li&gt;ポジティブ／ネガティブといった思考&lt;/li&gt;
  &lt;li&gt;センス&lt;/li&gt;
  &lt;li&gt;記憶力&lt;/li&gt;
  &lt;li&gt;体重&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり心身共にジワジワと朽ちていきました。&lt;/p&gt;

&lt;p&gt;これが急激に落ちると危機感を覚え、もっと早く行動にうつせたのかもしれませんが、&lt;br /&gt;
自分自身、自覚症状が殆どないまま「太ったなぁ〜痩せないとな〜歳取ったな〜」程度にしか思っていませんでした。&lt;/p&gt;

&lt;h2 id=&quot;運動で得られるもの&quot;&gt;運動で得られるもの&lt;/h2&gt;

&lt;p&gt;体力が落ちて変化したものすべて。&lt;/p&gt;

&lt;p&gt;しかし加齢もあると思うので100%回復は見込めないと思います。&lt;/p&gt;

&lt;h2 id=&quot;体力は集中力冷静記憶の根源である&quot;&gt;体力は集中力・冷静・記憶の根源である&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;勉強を継続しようにも体力が尽きてると眠くて続きません&lt;/li&gt;
  &lt;li&gt;朝はやく起きようにも一度尽きた体力は回復に時間がかかります&lt;/li&gt;
  &lt;li&gt;睡眠の質が悪く回復力が低いです&lt;/li&gt;
  &lt;li&gt;何か集中しようにも続きません&lt;/li&gt;
  &lt;li&gt;ネガティブが一度体に浴びると、復帰するのに時間がかかります&lt;/li&gt;
  &lt;li&gt;効率よく動こうにも記憶力と集中力がないためセンスがなくなります&lt;/li&gt;
  &lt;li&gt;アイデアもひらめくのに時間がかかります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;↑を見ると胡散臭いなと自分でも思いますが、まだ体力があった頃から考えると、認めざる得ません。&lt;/p&gt;

&lt;p&gt;具体的な証明は私はできませんが、やっぱ以前よりslackの言動はネガティブに落ちるケースが増えたと実感します。&lt;/p&gt;

&lt;h2 id=&quot;なぜ気づいたのか&quot;&gt;なぜ気づいたのか？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;過去の自分コードを読んだ時、今のコンディションでは閃かない、理解に時間がかかると思う場面が&lt;strong&gt;増えた&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;健康診断の結果で振り返るきっかけを得た&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;色々と必要とか見かけますが、一番怖いのは体力の低下による全能力の低下です。&lt;br /&gt;
とにかくリモートワーカーは仕事もだけど、運動する時間を確保しましょう。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">運動</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-15-notebook-remote-worker-need-thinkg-just-one.jpg" /></entry><entry><title type="html">今さらCarthage入門</title><link href="https://blog.mothule.com/ios/carthage/ios-carthage" rel="alternate" type="text/html" title="今さらCarthage入門" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/carthage/ios-carthage</id><content type="html" xml:base="https://blog.mothule.com/ios/carthage/ios-carthage">&lt;p&gt;ライブラリ管理ツールとして市民権を得て暫く経つCarthageですが、iOS/Swiftに入門したばかりの人や使う機会がなかった人などもいると思います。&lt;/p&gt;

&lt;p&gt;そんな人たち向けに改めてCarthageとは何か？どう便利なのか？どう使うのか？についてまとめてみました。&lt;br /&gt;
なお、iOSアプリに主軸を置いて説明しています。&lt;/p&gt;

&lt;h2 id=&quot;carthageとはswift製ライブラリ管理ツール&quot;&gt;CarthageとはSwift製ライブラリ管理ツール&lt;/h2&gt;

&lt;p&gt;Carthageとは、Swift製のライブラリ管理ツールです。&lt;/p&gt;

&lt;p&gt;CocoaPodsと同様の立ち位置で、ライブラリ管理に便利なツールとなります。&lt;/p&gt;

&lt;h2 id=&quot;carthageとcocoapodsの違い&quot;&gt;CarthageとCocoaPodsの違い&lt;/h2&gt;

&lt;h3 id=&quot;cocoapods&quot;&gt;CocoaPods&lt;/h3&gt;

&lt;p&gt;CocoaPodsは&lt;code class=&quot;highlighter-rouge&quot;&gt;$ pod install&lt;/code&gt;でライブラリをインストールすると、対象プロジェクトに対してワークスペース(.xcworkspace)を作成をしたり、
プロジェクトに対してオプション更新をしたりと、導入が楽になっているかわりに高機能となっています。&lt;/p&gt;

&lt;p&gt;作成されたワークスペースには、対象プロジェクトとは別に Podsプロジェクト(Pods.xcodeproj)が作成されており、
その中にライブラリとなるソースコードが含まれています。
ビルドすることでPodsプロジェクト内のソースコードも一緒にビルドされて、対象プロジェクトにはフレームワークとしてリンクされます。&lt;/p&gt;

&lt;p&gt;リンク処理も全てCocoaPodsが自動で行ってくれます。&lt;/p&gt;

&lt;h3 id=&quot;carthage&quot;&gt;Carthage&lt;/h3&gt;

&lt;p&gt;Carthageは最低限のライブラリからフレームワークの作成・更新のみとなります。
ワークスペースを作成したり、フレームワークをプロジェクトにリンクしたりはしません。
つまり、リンク処理は自分で行う必要があります。&lt;/p&gt;

&lt;h2 id=&quot;carthageの利点&quot;&gt;Carthageの利点&lt;/h2&gt;

&lt;h3 id=&quot;ビルド時間の短縮&quot;&gt;ビルド時間の短縮&lt;/h3&gt;
&lt;p&gt;フレームワークのリンク構築を自分で行う必要がある、Carthageの利点は&lt;strong&gt;ビルド時間の短縮&lt;/strong&gt;になります。&lt;/p&gt;

&lt;p&gt;Carthageはコマンド実行するとライブラリをインストールしてフレームワークを作成します。
その作成されたフレームワークを、プロジェクトにリンクすることになるため、
つまり事前にフレームワークを作っておくことで、プロジェクトに対してのビルド時間が短くできます。&lt;/p&gt;

&lt;h4 id=&quot;速度差を測定してみる&quot;&gt;速度差を測定してみる&lt;/h4&gt;
&lt;p&gt;ここでそれぞれのビルド時間を測定してみました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;測定は最初の5回は慣らし、5回目から数回測定。&lt;/li&gt;
  &lt;li&gt;測定ではRebuild(Clean+Build)で測定する。&lt;/li&gt;
  &lt;li&gt;インストールライブラリはSwiftJSON。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;環境&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;th&gt;avg&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CocoaPods&lt;/td&gt;
      &lt;td&gt;3.208s&lt;/td&gt;
      &lt;td&gt;3.492s&lt;/td&gt;
      &lt;td&gt;3.308s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Carthage&lt;/td&gt;
      &lt;td&gt;1.478s&lt;/td&gt;
      &lt;td&gt;1.765s&lt;/td&gt;
      &lt;td&gt;1.60725s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vanilla&lt;/td&gt;
      &lt;td&gt;0.932s&lt;/td&gt;
      &lt;td&gt;1.143s&lt;/td&gt;
      &lt;td&gt;1.04967s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;効果としては期待どおりで、ビルド時間短縮を目的とするには、十分効果があると見てよいと思います。&lt;/p&gt;

&lt;h3 id=&quot;xcodeの仕様変更に影響しにくい&quot;&gt;Xcodeの仕様変更に影響しにくい&lt;/h3&gt;

&lt;p&gt;Xcode内部の設定や仕様変更が行われるとCocoaPodsの場合は、ワークスペースや設定などを作成・更新をするため
ときとして動かないケースに出くわします。この場合、CocoaPodsが対応してくれるまで待ったあとにバージョンを上げる必要があります。&lt;/p&gt;

&lt;p&gt;その点、Carthageはフレームワークを作成するだけなので、フレームワークの仕様が破壊変更されるなど、Xcodeの変更の影響を受けにくいので
開発安定性はCocoaPodsより勝っているとも言えます。&lt;/p&gt;

&lt;h2 id=&quot;carthageの欠点&quot;&gt;Carthageの欠点&lt;/h2&gt;

&lt;p&gt;旨味の多いCarthageですが、欠点としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;対応ライブラリがCocoaPodsより少ない&lt;/li&gt;
  &lt;li&gt;初期導入が少々面倒&lt;/li&gt;
  &lt;li&gt;フレームワークの削除が少々面倒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の２つを上げておきます。&lt;/p&gt;

&lt;p&gt;フレームワークの削除は、リンクを外す処理が必要になるため、その手間分面倒ということになります。
CocoaPodsの場合、Podfileから削除してインストールするだけで自動でリンクを外してくれます。&lt;/p&gt;

&lt;p&gt;そして、対応ライブラリが少ないというのは、今の所一番痛い課題かと思います。
これに関しては今後時間による量が増えるのを期待するしかなさそうです。&lt;/p&gt;

&lt;h2 id=&quot;carthageを導入する&quot;&gt;Carthageを導入する&lt;/h2&gt;

&lt;p&gt;ではCarthageの概要や利点について説明したので、実際に導入する手順について説明します。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Carghageをインストール&lt;/li&gt;
  &lt;li&gt;Cartfileにインストールしたいライブラリを記入&lt;/li&gt;
  &lt;li&gt;コマンド実行&lt;/li&gt;
  &lt;li&gt;リンク設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;になります。&lt;/p&gt;

&lt;h3 id=&quot;carghageをインストール&quot;&gt;Carghageをインストール&lt;/h3&gt;

&lt;p&gt;最も手軽なHomebrewでインストールします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;インストールされない場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;$ brew update&lt;/code&gt; 実行後の再実行してみてください。&lt;/p&gt;

&lt;h3 id=&quot;cartfileを用意してライブラリを記入&quot;&gt;Cartfileを用意してライブラリを記入&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cartfileファイルの用意&lt;/li&gt;
  &lt;li&gt;Cartfileの編集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の順番でCartfileを作成します。&lt;/p&gt;

&lt;h4 id=&quot;cartfile作成&quot;&gt;Cartfile作成&lt;/h4&gt;

&lt;p&gt;対象プロジェクトがあるディレクトリ上に &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt; を作成してください。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;your xcode project&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ touch: Cartfileという名前のファイルを作るだけのコマンドです。中身は空です。&lt;/p&gt;

&lt;h4 id=&quot;cartfile編集&quot;&gt;Cartfile編集&lt;/h4&gt;

&lt;p&gt;テキストエディタでインストールしたいライブラリを追記します。
例えば SwiftyJSON であれば次のようにします。
これは githubのSwiftyJSONユーザーのSwiftyJSONレポジトリーを指しています。 &lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot;&gt;SwifthJSON&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Cartfile
github &lt;span class=&quot;s2&quot;&gt;&quot;SwiftyJSON/SwiftyJSON&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;コマンドでインストールする&quot;&gt;コマンドでインストールする&lt;/h4&gt;

&lt;p&gt;記入が終わったら保存して下記コマンドを実行します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;carthage update &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; iOS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--platfrom iOS&lt;/code&gt;というオプションは作成するフレームワークをiOSのみに指定するオプションです。
これがない場合、ライブラリによっては、OSXやwatchOS用もビルドが走ります。今回は使わないのでiOS指定をしています。&lt;/p&gt;

&lt;p&gt;下記は、自分の環境で実行したときの結果です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;carthage update &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; iOS
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Cloning SwiftyJSON
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Checking out SwiftyJSON at &lt;span class=&quot;s2&quot;&gt;&quot;5.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; xcodebuild output can be found &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /var/folders/45/7f_wlrcs3xv6rmstcz2l5_000000gn/T/carthage-xcodebuild.MQ3JFo.log
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Building scheme &lt;span class=&quot;s2&quot;&gt;&quot;SwiftyJSON iOS&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;SwiftyJSON.xcworkspace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;プロジェクトにフレームワークをリンクする&quot;&gt;プロジェクトにフレームワークをリンクする&lt;/h3&gt;

&lt;p&gt;コマンドによってフレームワークが作成されますが、まだプロジェクトにはリンクされていません。
プロジェクトに対してフレームワーク使うよう設定する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;フレームワークをリンクする&quot;&gt;フレームワークをリンクする&lt;/h3&gt;

&lt;p&gt;プロジェクトのターゲットのGeneralを開いて、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Linked frameworks and Libraries&lt;/code&gt; を ＋ ボタンを押してください。
&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フレームワーク／ライブラリの選択画面が出るので、&lt;code class=&quot;highlighter-rouge&quot;&gt;Add Other...&lt;/code&gt; ボタンを押してください。
&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-2.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで先程作成したフレームワークを指定します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なおフレームワークは&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; Carthage/Build/iOS
total 288
&lt;span class=&quot;nt&quot;&gt;-rw-------&lt;/span&gt;  1 mothule  staff  73046  9 15 14:31 11B6ADD2-B8F8-3816-830A-C3C0B53B18B2.bcsymbolmap
&lt;span class=&quot;nt&quot;&gt;-rw-------&lt;/span&gt;  1 mothule  staff  70266  9 15 14:31 36F8ED49-B83F-3A70-B0D4-DED92A0D89E2.bcsymbolmap
drwxr-xr-x  6 mothule  staff    192  9 15 14:31 SwiftyJSON.framework
drwxr-xr-x  3 mothule  staff     96  9 15 14:31 SwiftyJSON.framework.dSYM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;に作成されています。
次の図のように追加されていればOKです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次に &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;上の ＋ ボタンを押して &lt;code class=&quot;highlighter-rouge&quot;&gt;New Run Script Phase&lt;/code&gt; を選んでください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-5.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-5.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Run Script&lt;/code&gt;フェイズが作成されるので、中にコマンドと、コマンドに渡す引数としてフレームワークのパスを指定します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-15-ios-carthage-6.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-ios-carthage-6.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにこの &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage copy-frameworks&lt;/code&gt; を実行しなかった場合、ビルドは通りますが、実行すると次のエラーが起きます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dyld: Library not loaded: @rpath/SwiftyJSON.framework/SwiftyJSON
  Referenced from: /Users/mothule/Library/Developer/CoreSimulator/Devices/1DB7E7C4-D7CD-44BA-B3F9-F66DC4E5EC51/data/Containers/Bundle/Application/6B0FDFCC-9D12-47D5-9B74-B837BE8FC983/UseCarthage.app/UseCarthage
  Reason: image not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;まとめて指定も可能&quot;&gt;まとめて指定も可能&lt;/h3&gt;

&lt;p&gt;Inputfilesに各フレームワーク毎にパス追記せずとも、xcfilelistという拡張子で指定することで一律管理も可能です。
手順は&lt;a href=&quot;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&quot;&gt;公式&lt;/a&gt;に記載されています。
番号5~9になります。英語ですが、英語読めなくとも手順は読み取れると思います。&lt;/p&gt;

&lt;h2 id=&quot;デバッグについて&quot;&gt;デバッグについて&lt;/h2&gt;

&lt;p&gt;事前に構築されたフレームワークは、フレームワークが構築されたPC以外でのステップ実行などはできません。
その場合は、&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;carthage update &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; iOS &lt;span class=&quot;nt&quot;&gt;--no-use-binaries&lt;/span&gt; &amp;lt;library name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;で解決することができます。&lt;/p&gt;

&lt;h2 id=&quot;cartfileの記法について&quot;&gt;Cartfileの記法について&lt;/h2&gt;

&lt;h3 id=&quot;ライブラリのバージョン指定&quot;&gt;ライブラリのバージョン指定&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;github &quot;SwiftyJSON&quot; ~&amp;gt; 4.2.0
github &quot;Hoge&quot; &amp;gt;= 4.2.0
github &quot;Fuga&quot; == 4.2.0
github &quot;Nuga&quot; &quot;ブランチ or タグ or revision&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように指定が可能です。
&lt;a href=&quot;https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#version-requirement&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github以外からライブラリインストール&quot;&gt;GitHub以外からライブラリインストール&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;github &quot;https://enterprise.local/hoge/fuga/perfect-library&quot; # GitHub Enterprise
git &quot;https://enterprise.local/hoge/fuga/perfect-me.git&quot; # Other Git repositories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;テスト環境限定のライブラリインストール&quot;&gt;テスト環境限定のライブラリインストール&lt;/h2&gt;
&lt;p&gt;テストでしか使用しないフレームワークは通常のCartfileではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile.private&lt;/code&gt;ファイルを用意して、インストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch Cartfile.private
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;中身の書き方は通常のCartfileと変わりません。&lt;/p&gt;

&lt;p&gt;注意点としては、プロジェクトへのリンク設定で、ターゲットをテストに対して行うことを忘れずに。&lt;/p&gt;

&lt;h2 id=&quot;git管理について&quot;&gt;git管理について&lt;/h2&gt;
&lt;p&gt;作成されたフレームワークやその他データに関して全てのgit管理する必要はありません。
使うのはフレームワーク成果物だけで、それ以外の途中データは、再現可能なデータであるため.gitignoreに追加しても大丈夫です。&lt;/p&gt;

&lt;p&gt;私の環境では次のようにしています。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Carthage
Carthage/Checkouts
!Carthage/Build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上がCarthageの入門記事になります。&lt;/p&gt;

&lt;p&gt;他にも色々な機能や仕様を含んでおりますが、全部を紹介すると、入門として知っても慣れず、腹落ちしにくいかと思うので省きました。&lt;/p&gt;

&lt;p&gt;当然ながら、&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;公式&lt;/a&gt;には記載がされているので暇があったら少しずつ追うのもいいかもしれません。
README.mdだけでなく&lt;a href=&quot;https://github.com/Carthage/Carthage/tree/master/Documentation&quot;&gt;Documentation&lt;/a&gt;もあるので見落とさず。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt;シンプルなまま対応ライブラリが増えるといいですね。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="carthage" /><summary type="html">ライブラリ管理ツールとして市民権を得て暫く経つCarthageですが、iOS/Swiftに入門したばかりの人や使う機会がなかった人などもいると思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-15-ios-carthage.png" /></entry><entry><title type="html">実装の速度を養うトレーニングサポートツールを作った</title><link href="https://blog.mothule.com/tools/tools-training-support-tools-urcoach" rel="alternate" type="text/html" title="実装の速度を養うトレーニングサポートツールを作った" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/tools-training-support-tools-urcoach</id><content type="html" xml:base="https://blog.mothule.com/tools/tools-training-support-tools-urcoach">&lt;p&gt;新しくプログラム言語やフレームワーク、サービスなどを学習するのは、エンジニアの嗜みですね。&lt;br /&gt;
プロアスリート同様に日々の鍛錬があるからこそ、エンジニアとして品質を維持できています。&lt;/p&gt;

&lt;p&gt;そしてエンジニアを生業にする以上、&lt;strong&gt;実装速度と品質は最重要指標&lt;/strong&gt; です。
しかしながら、新しい言語やフレームワークなどでは実装速度が大幅に落ち込みます。
今回はこの実装速度を及第点に近づけるためのツールを作ってみたので紹介します。&lt;/p&gt;

&lt;h2 id=&quot;実装において速度は重要なスキルの一つ&quot;&gt;実装において速度は重要なスキルの一つ&lt;/h2&gt;

&lt;p&gt;さきほども書きましたが実装速度は重要です。
なぜならエンジニアは流れの早い時間軸で生きるクリエイティブ職業です。
それゆえ速度が足りないとニーズに追いつけず実装完了した頃には無用の長物になりかねません。
そのようなエンジニアは品質としては決して高くはありません。&lt;/p&gt;

&lt;h2 id=&quot;実装速度の向上は慣れるが真理&quot;&gt;実装速度の向上は慣れるが真理&lt;/h2&gt;

&lt;p&gt;つまり言語やフレームワークなどに使い慣れるということです。&lt;br /&gt;
慣れるとは、&lt;strong&gt;意識せずとも知識を引き出せて、余裕がある状態です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;覚えたてと違い、知識の引き出し場所を探す速度が超速だからこそ、設計や脳内フローで立ち止まらず早く実装に取り掛かれます。&lt;br /&gt;
既に経験のあるパターンであれば実装イメージも即座に思い浮かべられます。&lt;/p&gt;

&lt;p&gt;そして、あまり意識せずとも実装イメージがつくからこそ余裕が生まれ、今まで見落としていた知識や観点に気づきまた一歩スキルが向上します。&lt;/p&gt;

&lt;h2 id=&quot;ツール説明&quot;&gt;ツール説明&lt;/h2&gt;

&lt;p&gt;ツール名は&lt;code class=&quot;highlighter-rouge&quot;&gt;Your coach&lt;/code&gt;です。
&lt;a href=&quot;https://github.com/mothule/urcoach&quot;&gt;mothule/urcoach&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今はまだgem化していないのでgitからcloneするなどしてお使いください。&lt;/p&gt;

&lt;p&gt;例えば次のようにコマンドを実行すると&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby urcoach &lt;span class=&quot;nt&quot;&gt;--level&lt;/span&gt; normal &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt; 60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;登録されてあるトレーニングプランの中から条件に一致するプランをランダムで提示してくれます。
&lt;a href=&quot;/assets/images/2019-09-15-tools-training-support-tools-urcoach-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-15-tools-training-support-tools-urcoach-1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
プラン提示&lt;/p&gt;

&lt;h3 id=&quot;更新は-yamlをいじれば反映される&quot;&gt;更新は yamlをいじれば反映される&lt;/h3&gt;
&lt;p&gt;プランを追加したり変更したい場合は同梱するyamlファイルを編集すれば反映されます。
そのため自分専用のプランを作ることも可能です。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;rubyに慣れるためrailsを使わずCLIツールを作成しました。
まだまだできたばかりなので不足を感じますが、ドッグフーディングしつつ少しずつ育てるのもありかなと考えています。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="ruby" /><summary type="html">新しくプログラム言語やフレームワーク、サービスなどを学習するのは、エンジニアの嗜みですね。 プロアスリート同様に日々の鍛錬があるからこそ、エンジニアとして品質を維持できています。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-15-tools-training-support-tools-urcoach.jpg" /></entry><entry><title type="html">エンジニアが個の価値向上のために継続するべき10個の行動</title><link href="https://blog.mothule.com/notebook/necessary-continual-behavior-for-engineer" rel="alternate" type="text/html" title="エンジニアが個の価値向上のために継続するべき10個の行動" /><published>2019-09-10T00:00:00+09:00</published><updated>2019-09-10T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/necessary-continual-behavior-for-engineer</id><content type="html" xml:base="https://blog.mothule.com/notebook/necessary-continual-behavior-for-engineer">&lt;p&gt;これは私自身の過去の経験を経てこれからの自分のために、これを継続することがエンジニアとして生きていくために、&lt;br /&gt;
エンジニアという人間で居続けられるために、エンジニアだからできて、そして必要だと思う重要な行動10個について&lt;br /&gt;
まとめてみました。&lt;/p&gt;

&lt;h2 id=&quot;エンジニアにとって何を重要だと決めるか&quot;&gt;エンジニアにとって何を重要だと決めるか？&lt;/h2&gt;

&lt;p&gt;まず最初にエンジニアが個として、何が重要なのかを決めました。
私にとって重視すべきは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;健康&lt;/li&gt;
  &lt;li&gt;お金&lt;/li&gt;
  &lt;li&gt;汎用(基礎)&lt;/li&gt;
  &lt;li&gt;効率&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4つです。&lt;/p&gt;

&lt;h3 id=&quot;健康&quot;&gt;健康&lt;/h3&gt;
&lt;p&gt;全ての行動においての根源だと思っています。&lt;/p&gt;

&lt;p&gt;欲望や思惑、実行、全てにおいて健康でなければスタートにもなりませんし、ゴールにも到達できません。&lt;/p&gt;

&lt;p&gt;一番捨てやすく一番重要です。&lt;/p&gt;

&lt;h3 id=&quot;お金&quot;&gt;お金&lt;/h3&gt;
&lt;p&gt;私には家族がいるため、私一人の乱暴なライフワークでは、迷惑をかけてしまいます。
行動には必ずお金が保証できている行動が求められています。&lt;/p&gt;

&lt;p&gt;そして、これからも家族を養うために私にとってお金は必要な存在です。&lt;/p&gt;

&lt;h3 id=&quot;汎用基礎&quot;&gt;汎用(基礎)&lt;/h3&gt;

&lt;p&gt;汎用的な知識、技術、能力と柔軟性を指します。&lt;/p&gt;

&lt;p&gt;専門スキルに特化しすぎると振り切りにそれだけ力が必要になります。
例えばガチフロントエンドを極めているときに、バックエンドへのコンバートはそれだけ知識とスキルの再吸収が必要とします。&lt;/p&gt;

&lt;p&gt;不変となる基礎技術、能力やエンジニア以外の職種でも使える汎用性の高いスキルなどを習得し続ける必要があります。&lt;/p&gt;

&lt;p&gt;なぜなら、私には自分の時間が人より少ないため、限られた時間の中から優先度の高いものに集中する必要があります。
出たばかりの技術やトレンドに深くのめりこむ時間が私にはありません。&lt;/p&gt;

&lt;p&gt;それよりも使いまわしの聞きやすい汎用性の高い技術や知識を身につけるほうが柔軟に対処ができます。&lt;/p&gt;

&lt;h3 id=&quot;効率&quot;&gt;効率&lt;/h3&gt;

&lt;p&gt;前述したように私には時間がありません、故に時間がないならないなりに効率よく情報吸収をしなければなりません。
情報だけではありません、自己ブランディングにおいても効率よく動く必要があります。&lt;/p&gt;

&lt;h2 id=&quot;重要なことを高める10個の行動&quot;&gt;重要なことを高める10個の行動&lt;/h2&gt;

&lt;p&gt;では私が歩んだエンジニア人生を経て、これからの私のエンジニア人生を歩むために必要だなと思う行動を並べます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;独自ドメインの確保&lt;/li&gt;
  &lt;li&gt;ブログ or SNS or 勉強会などによるアウトプット&lt;/li&gt;
  &lt;li&gt;心身の健康&lt;/li&gt;
  &lt;li&gt;自己投資の予算確保&lt;/li&gt;
  &lt;li&gt;書く力, 読む力, 話す力, 聞く力&lt;/li&gt;
  &lt;li&gt;英語の読む,聞く,書く,話す&lt;/li&gt;
  &lt;li&gt;人と交流のある趣味&lt;/li&gt;
  &lt;li&gt;情報が集まるアンテナ作り&lt;/li&gt;
  &lt;li&gt;法律理解&lt;/li&gt;
  &lt;li&gt;お金の投資&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;独自ドメインの確保&quot;&gt;独自ドメインの確保&lt;/h3&gt;
&lt;p&gt;個の価値観を向上するには、価値を集約せねばならず、至るところに価値創造を行っても
対した評価には繋がらず、それよりも1箇所に集中することで価値が上がりやすくなると思っています。&lt;/p&gt;

&lt;p&gt;また独自ドメインを持つことで過去の資産を継続しやすくなると思っています。&lt;/p&gt;

&lt;h3 id=&quot;ブログ-or-sns-or-勉強会などによるアウトプット&quot;&gt;ブログ or SNS or 勉強会などによるアウトプット&lt;/h3&gt;

&lt;p&gt;エンジニアとして入力と出力を怠っては、他者より劣る自分が生き残り続けるには必要な行動です。&lt;/p&gt;

&lt;p&gt;外へ発信することで個の存在を認知させ、価値向上にも期待できます。&lt;/p&gt;

&lt;h3 id=&quot;心身の健康&quot;&gt;心身の健康&lt;/h3&gt;

&lt;p&gt;体、心の健康に必要な運動や瞑想、ストレッチ、娯楽によるリフレッシュ、家庭内環境の健全維持は重要な行動です。&lt;/p&gt;

&lt;p&gt;体調が悪いのに体力はつきませんし、体力がなければ集中力もつかず効率悪いです。
メンタルが落ち込んでいても、頭に情報が入ってきません。&lt;/p&gt;

&lt;h3 id=&quot;自己投資の予算確保&quot;&gt;自己投資の予算確保&lt;/h3&gt;

&lt;p&gt;家庭の収入から予算を策定し、その予算枠に己に対する投資のお金を確保することは、現在地点からの脱却に必要な行動だと思います。
勉強会、本、時間、リフレッシュ、己のスキル向上に関係する行動にお金をつぎ込むのです。&lt;/p&gt;

&lt;h3 id=&quot;書く力-読む力-話す力-聞く力&quot;&gt;書く力, 読む力, 話す力, 聞く力&lt;/h3&gt;

&lt;p&gt;お金を稼ぐ力、他者とのコミュニケーションによる個の認知によるブランディング、スキル習得効率、アウトプットの品質。
何においても関係する汎用的なスキルです。&lt;/p&gt;

&lt;h3 id=&quot;英語の読む聞く書く話す&quot;&gt;英語の読む,聞く,書く,話す&lt;/h3&gt;

&lt;p&gt;英語による汎用性の拡大です。
全ての行動において母数が向上し、継続しやすい環境となりえます。&lt;/p&gt;

&lt;h3 id=&quot;人と交流のある趣味&quot;&gt;人と交流のある趣味&lt;/h3&gt;

&lt;p&gt;人と話す、人の話を聞くなどの人と触れ合う行為は、エンジニアという閉じやすい職種において捨てておくと将来後悔すると思っています。
人と話せる趣味があることで、エンジニア行動で嫌なことがあっても、悪循環に陥らないための楔となるのです。&lt;/p&gt;

&lt;h3 id=&quot;情報が集まるアンテナ作り&quot;&gt;情報が集まるアンテナ作り&lt;/h3&gt;

&lt;p&gt;エンジニアリングのみならず必要な情報において探すのではなく集まるよう情報ストリームの構築は重要です。
情報が集まりやすい環境で情報を見ることで、トレンドや現在地を見失わないようにするためです。&lt;/p&gt;

&lt;h3 id=&quot;法律理解&quot;&gt;法律理解&lt;/h3&gt;

&lt;p&gt;自身を守るため、家族を守るために必要な行動です。
労働法、税法といった仕事に関わる部分だけでなく、子どもや家庭に外から圧力がかかったときに行動できる知識は強い武器となります。&lt;/p&gt;

&lt;h3 id=&quot;お金の投資&quot;&gt;お金の投資&lt;/h3&gt;

&lt;p&gt;お金を稼ぐためにお金の知識、投資は必要な行動です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><summary type="html">これは私自身の過去の経験を経てこれからの自分のために、これを継続することがエンジニアとして生きていくために、 エンジニアという人間で居続けられるために、エンジニアだからできて、そして必要だと思う重要な行動10個について まとめてみました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-10-necessary-continual-behavior-for-engineer.png" /></entry><entry><title type="html">Nimbleでenum(Associated Value)の自作matcher作って可読性を上げる</title><link href="https://blog.mothule.com/ios/nimble/swift-nimble-associated-valued-enum-custom-matcher" rel="alternate" type="text/html" title="Nimbleでenum(Associated Value)の自作matcher作って可読性を上げる" /><published>2019-09-09T00:00:00+09:00</published><updated>2019-09-09T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/nimble/swift-nimble-associated-valued-enum-custom-matcher</id><content type="html" xml:base="https://blog.mothule.com/ios/nimble/swift-nimble-associated-valued-enum-custom-matcher">&lt;p&gt;テストフレームワークでQuickとマッチャーにNimbleを使って開発する人は多いのではないかと思います。&lt;/p&gt;

&lt;p&gt;通常のenumであればテストは別に困ることはないのですが、それがAssociated Valueとなると話が180度変わります。
そのまま対策せずゴリ押しでテストコードを書くと、後で気持ち悪いテストコードを目にすることになるので、
少しでも健全で見やすいテストコードを書く方法について書いています。&lt;/p&gt;

&lt;h2 id=&quot;テストターゲットは次のモデル&quot;&gt;テストターゲットは次のモデル&lt;/h2&gt;
&lt;p&gt;次のようなAssociated Valueなenumがあったとします。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;特に何もしないでテストを書いた場合&quot;&gt;特に何もしないでテストを書いた場合&lt;/h2&gt;

&lt;p&gt;この状態のままテストをする場合、次のようなコードになると思います。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VariableTypeSpec.swift&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableTypeSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuickSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VariableTypeSpec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;equatable-protocolを採用する&quot;&gt;Equatable protocolを採用する&lt;/h2&gt;

&lt;p&gt;これを解決するには, Equatable protocol を VariableType に採用することでよりシンプルな書き方が可能になります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VariableType.swift&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;VariableTypeSpec.swift&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableTypeSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuickSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VariableTypeSpec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-matcher-を用意する&quot;&gt;Custom Matcher を用意する&lt;/h2&gt;

&lt;p&gt;今のままで十分可読性は良いのですが、もし &lt;code class=&quot;highlighter-rouge&quot;&gt;Equatable&lt;/code&gt; だけでは厳しい場合やエラー時のメッセージの情報を増やしたい場合は
Custom Matcherを用意するといいでしょう。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Predicate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PredicateResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExpectationMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expectedActualValueTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PredicateResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PredicateResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようにルールに準拠したメソッドを用意することで次のようにNimbleでMatcherとして使えるようになります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VariableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まぁこれは &lt;code class=&quot;highlighter-rouge&quot;&gt;equal()&lt;/code&gt; とほぼ同じMatcherになりますね。&lt;/p&gt;

&lt;h2 id=&quot;テストコードをプロダクションに含む是非について&quot;&gt;テストコードをプロダクションに含む是非について&lt;/h2&gt;

&lt;p&gt;私は追加することは構わないと思います。&lt;/p&gt;

&lt;p&gt;なぜならSwiftのMockingはマニュアルモッキングを推奨していますが、&lt;br /&gt;
マニュアルモッキング用にprotocolを用意してMockを作ることが、既にテストコードが設計レベルで組み込まれているからです。&lt;/p&gt;

&lt;p&gt;本来ならprotocolを挟まずともよい部分にも関わらずprotocol化したり、DIで依存性注入したりと、
「なんのためにその実装を書いているのか？」と考えればテスタビリティを上げるためです。&lt;/p&gt;

&lt;p&gt;であれば、今更テストコードがプロダクションに入ることになんの違和感を持ちましょうか。&lt;/p&gt;

&lt;p&gt;違和感を感じる暇があれば、テストコードの暴発と本番時のみ動くコードを減らす労力に回したほうがマシです。&lt;/p&gt;

&lt;p&gt;これは仕方がないことです。Swiftという言語仕様がテスタビリティを下げているので従うしかなく、&lt;br /&gt;
私達が求めるテスタビリティまで向上させるには必要せざる得ない対応策だと思います。&lt;/p&gt;</content><author><name></name></author><category term="swift" /><category term="test" /><category term="nimble" /><summary type="html">テストフレームワークでQuickとマッチャーにNimbleを使って開発する人は多いのではないかと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-09-swift-nimble-associated-valued-enum-custom-matcher.png" /></entry><entry><title type="html">360度パノラマ画像を閲覧するpod更新でGLKitからSceneKitに変えた話</title><link href="https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc" rel="alternate" type="text/html" title="360度パノラマ画像を閲覧するpod更新でGLKitからSceneKitに変えた話" /><published>2019-09-07T00:00:00+09:00</published><updated>2019-09-07T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc</id><content type="html" xml:base="https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc">&lt;p&gt;GLKitからSceneKitに変えざるを得ない状況に直面し、SceneKitの調査や躓いたポイントについてまとめます。&lt;/p&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;先日国内最大のiOS開発者カンファレンス iOSDC Japan 2019に参加して、AVFoundationを使っているセッションばかり聞いていたら
「自分も何か発表できるネタないかな？発表してみたいな。」とウズウズした結果、過去の自作ライブラリで人気がある360度パノラマ画像ビューワーをSwift5に追従して動くようにして、実現方法などについてスライド纏めれば、ちょっとした登壇とかできそうだなと思ったことがきっかけです。&lt;/p&gt;

&lt;p&gt;この自作ライブラリは以前&lt;a href=&quot;https://qiita.com/mothule/items/026bac1cf1fc229d0c4d&quot;&gt;Qiita&lt;/a&gt;に書いてあります&lt;/p&gt;

&lt;h2 id=&quot;swift5に変えたが動かず&quot;&gt;Swift5に変えたが動かず&lt;/h2&gt;

&lt;p&gt;ライブラリのSwift言語はSwift3なので古いな〜と思いつつSwift5にして、ビルドが通ったので実行したのですが、画面が白いままで全く何も表示されませんでした。&lt;/p&gt;

&lt;p&gt;原因がいまいち分からず、情報集めるため公式ドキュメントを覗いたら驚愕しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;oh…&lt;/strong&gt; なんとほぼ全部が &lt;code class=&quot;highlighter-rouge&quot;&gt;Deprecated&lt;/code&gt; ラベルがついてました。&lt;/p&gt;

&lt;p&gt;これでは折角ライブラリのSwiftを追従させても、追従したとは言えません。
Swiftバージョンだけでなく、描画周りも一新することにしました。&lt;/p&gt;

&lt;h2 id=&quot;scenekitってのが出てた&quot;&gt;SceneKitってのが出てた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation&quot;&gt;公式サイト&lt;/a&gt;を１つに戻って見てみたらSceneKitと呼ばれるフレームワークを見つけました。
googleで調べてもGLKitは影を潜めMetalやSceneKit,ARKitが並んでいます。&lt;/p&gt;

&lt;h3 id=&quot;scenekitは3dゲームやコンテンツの上位レイヤー開発キット&quot;&gt;SceneKitは3Dゲームやコンテンツの上位レイヤー開発キット&lt;/h3&gt;

&lt;p&gt;GLKitが低レイヤーだとすれば、SceneKitは上位レイヤーに当たります。
GLKitが描画エンジンだとすれば、SceneKitはゲームエンジンといったところでしょうか。
また描画だけでなくアニメーション,物理演算などもサポートしています。&lt;/p&gt;

&lt;p&gt;SceneKitは描画テクノロジーにはGLKitやMetalが使われています。
OpenGLかDirectXかなど描画エンジンになるべく気にせずコンテンツ作りに特化しやすい開発キットってことですね。
それゆえ、GLKitを直接使われるよりは新しく提供したSceneKitを使うようGLKitを非推奨にしたのかもしれません。&lt;/p&gt;

&lt;p&gt;GLKitと異なりSceneKitではOpenGLを直接操作するのではなく、Sceneと呼ばれる単位で描画環境の構築を行います。&lt;br /&gt;
そしてこのScene内はNodeと呼ばれるディレクトリのような階層構造で描画オブジェクトを管理しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-2.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
↑ &lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscene&quot;&gt;公式&lt;/a&gt;より抜粋&lt;/p&gt;

&lt;p&gt;映画の1シーンと捉えると理解がしやすいかと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ロケ地で撮影 : landscapeNode&lt;/li&gt;
  &lt;li&gt;俳優が立つ : characterNode&lt;/li&gt;
  &lt;li&gt;カメラで撮影 : cameraNode&lt;/li&gt;
  &lt;li&gt;照明で照らす : lightNode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scnnodeはデザインとしては多少強引な何でもボックス&quot;&gt;SCNNodeはデザインとしては多少強引な何でもボックス&lt;/h3&gt;

&lt;p&gt;このNodeと呼ばれるものは&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNNode&lt;/code&gt;一つで上の全てのオブジェクトをサポートしている
設計としては多少強引な何でもボックスです。&lt;/p&gt;

&lt;p&gt;なぜなら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ライト&lt;/li&gt;
  &lt;li&gt;カメラ&lt;/li&gt;
  &lt;li&gt;アニメーション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;へのアクセスプロパティを持っており、設定によってどれにでもなり得るからです。
ただこのような設計にしたのは、Nodeによる階層構造をシンプルにしたかったかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;scenekitで360度パノラマ画像ビューワーを実装する&quot;&gt;SceneKitで360度パノラマ画像ビューワーを実装する&lt;/h2&gt;

&lt;p&gt;ではSceneKitを使った360度パノラマ画像ビューワーの実装について説明します。
全容は&lt;a href=&quot;https://github.com/mothule/RNSphereImageViewer&quot;&gt;GitHub/RNSphereImageViewer&lt;/a&gt;で確認できます。
数ファイルしかないので、億劫にならないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;scnviewでsceneの描画先を決める&quot;&gt;SCNViewでSceneの描画先を決める&lt;/h3&gt;

&lt;p&gt;先の説明の通り、Sceneで描画計画を立てたら、それを実際に反映する先が必要になります。
映画でいうと映画館のスクリーンといったところです。&lt;/p&gt;

&lt;p&gt;これはSCNViewと呼ばれる&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;のサブクラスを対象ViewControllerのviewに代入すれば終わりです。
以下は&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;の抜粋です.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 1. スクリーン先をviewにする&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sceneView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 2. SCNSceneRendererDelegateで毎フレームフックする&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. FPS指定&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// FPSはSceneKitが管理している&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendersContinuously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// これをtrueにしないと毎フレーム更新が呼ばれない&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 4. その他&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 何も描画してないときの背景色. ライトとは違う色にすることをオススメします&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoenablesDefaultLighting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showsStatistics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 以下省略&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-スクリーン先をviewにする&quot;&gt;1. スクリーン先をviewにする&lt;/h4&gt;

&lt;p&gt;self.viewに対し SCNViewを指定することで投影先(スクリーン先)を設定します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sceneView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SCNViewの初期化メソッドは、frameは描画領域、optionsは MetalやOpenGLなど&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNRenderer&lt;/code&gt;に渡すオプションになります。&lt;br /&gt;
このoptionsは&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnrenderer/1518404-init&quot;&gt;MetalのSCNRenderer&lt;/a&gt;や&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnrenderer/1518408-init&quot;&gt;OpenGLのSCNRenderer&lt;/a&gt;は将来向けの拡張オプションでまだ使われていないようです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-scnscenerendererdelegateで毎フレームフックする&quot;&gt;2. SCNSceneRendererDelegateで毎フレームフックする&lt;/h4&gt;
&lt;p&gt;SCNView.delegateは &lt;code class=&quot;highlighter-rouge&quot;&gt;SCNSceneRendererDelegate&lt;/code&gt; protocolになります。
これを採用すれば、SceneKitが行っている描画やアニメ処理、物理演算といったタイミングにフックすることができます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;scenekitがフレーム毎にしていること&quot;&gt;SceneKitがフレーム毎にしていること&lt;/h5&gt;
&lt;p&gt;SceneKitが何を行っているかについては、&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerendererdelegate&quot;&gt;公式&lt;/a&gt;にて解説されています。&lt;br /&gt;
下の図は1フレーム※で行われている処理と各フックタイミングの解説です。&lt;br /&gt;
※ 60FPSだとしたら、 1 / 60 ≒ 0.01667秒毎に呼ばれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は更新毎にカメラ制御などをしたいので&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerendererdelegate/1522937-renderer&quot;&gt;func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval)&lt;/a&gt;を使います。&lt;/p&gt;

&lt;h5 id=&quot;デフォルトだと動かないと更新されない&quot;&gt;デフォルトだと動かないと更新されない&lt;/h5&gt;

&lt;p&gt;SceneKitはデフォルト値だと、描画物やアニメ、物理演算など前フレームより変化がないと更新が実行されず、
同様にdelegateによるフックも呼び出されません。&lt;/p&gt;

&lt;p&gt;これでは1フレーム毎に動かしたい、一定時間たったら動くなど、時間軸による制御が不可能なので、常にこれが呼ばれるようにする必要があります。
これは&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/2867339-renderscontinuously&quot;&gt;SCNView.rendersContinuously&lt;/a&gt;として用意されてるので、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にすれば,後述するFPS値のレートで更新処理が行われます。&lt;/p&gt;

&lt;h4 id=&quot;3-fps指定&quot;&gt;3. FPS指定&lt;/h4&gt;

&lt;p&gt;FPSはSceneKitが管理しており、この値レートに従って更新されます。&lt;br /&gt;
その値プロパティが&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/1621205-preferredframespersecond&quot;&gt;preferredFramesPerSecond&lt;/a&gt;となります。&lt;br /&gt;
この値はデフォルトでは60FPSとなっています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendersContinuously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意点が2点あり、FPSは処理負荷に依存するモニター値であるため、ここの値が実際のFPS値となるものではなく、指標としてのFPSとなります。
つまり60FPSであれば0.01秒に1回描画を行うように動きます。&lt;br /&gt;
またもう1点は、与えられたFPSにそのまま適用するのではなくSceneKit内部で定めたできるだけ近いFPSを選択するようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/2867339-renderscontinuously&quot;&gt;rendersContinuously&lt;/a&gt;は先程述べたように、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にしないと毎回FPSレートに呼ばれなくなります。&lt;/p&gt;

&lt;h4 id=&quot;4-その他&quot;&gt;4. その他&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 何も描画してないときの背景色. ライトとは違う色にすることをオススメします&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoenablesDefaultLighting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showsStatistics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;自体に説明は特に不要ですが、アドバイスとしては、SCNLightの色とは異なる色にしておくことをオススメします。
なぜなら最初の実装中は、ライトと同じ色にしていると描画されているのかどうか分からないためです。&lt;/p&gt;

&lt;p&gt;例えば、背景を白、ライトを白の場合にしたとしましょう。&lt;br /&gt;
この場合、 画面が真っ白だった場合に&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;そもそもオブジェクトが描画されていない&lt;/li&gt;
  &lt;li&gt;描画されているが陰影処理が未適用まはライトが強すぎて視覚認識できない&lt;/li&gt;
  &lt;li&gt;カメラが違う方向向いていてスクリーンに投影されていない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など複数要因が浮上し、原因特定に時間がかかるためです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerenderer/1523812-autoenablesdefaultlighting&quot;&gt;autoenablesDefaultLighting&lt;/a&gt;はSceneに自動でライトを追加するかどうかを決めます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;の場合、ライトなしかambientライトのみのときに、omnidirectionalなライトを自動で追加、配置します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerenderer/1522763-showsstatistics&quot;&gt;showsStatistics&lt;/a&gt;はstatisticsを表示するフラグです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にして実行すると画面下にオーバーレイでviewが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左側の+をタップすると、上記で解説したSceneKitがに行っている処理区分に分かれた負荷が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-5.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-5.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;カメラをセット&quot;&gt;カメラをセット&lt;/h3&gt;

&lt;p&gt;viewの準備が出来たら、sceneを用意しnodeを追加してく作業になります。&lt;/p&gt;

&lt;p&gt;まずカメラを追加します。最初にカメラである理由はなく、モデルやライトが先でも問題はないです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cameraNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNVector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldOfView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fovy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zFar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomOutMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNode&lt;/code&gt;という箱にcameraに対して &lt;code class=&quot;highlighter-rouge&quot;&gt;SCNCamera&lt;/code&gt;をセットしたことでカメラとして使います。ダックタイピングみたいですね。。
&lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNCamera&lt;/code&gt;の位置となります。
&lt;code class=&quot;highlighter-rouge&quot;&gt;camera&lt;/code&gt;のFOVとZ-Farの値を設定します。
この値がなんなのかは、&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scncamera&quot;&gt;公式&lt;/a&gt;に解説があります。
ざっくり説明するとFOVが視野でZ-Farが見える距離です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-6.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-6.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにFloatだったりSCNFloatだったりCGFloatだったりと型が統一されていません。ここらへんは後々統一されるといいですね。&lt;/p&gt;

&lt;h3 id=&quot;球体モデルに画像を貼る&quot;&gt;球体モデルに画像を貼る&lt;/h3&gt;
&lt;p&gt;今回はGLKitで作ったときとは異なり、球体モデルは自作ではなくプリセットSCNSphereを使いました。
もしSCNSphereのTexture UV値が頂点情報になかったり、値がでたらめだったら、従来どおり自作する予定でした。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sphere&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentCount&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;materials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;materials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDoubleSided&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sphereNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sphereNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;modelNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphereNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;球体を作成し、画像を球体が持つマテリアル情報のdiffuse陰影に適用します。
diffuseに関しては&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnmaterial/1462589-diffuse&quot;&gt;SCNMaterial.diffuse&lt;/a&gt;に説明があります。&lt;/p&gt;

&lt;p&gt;とりあえず覚えることとしてはdiffuseは基礎カラーまたはテクスチャとして捉えといても構いません。&lt;br /&gt;
diffuseの他にambientやmetalness,specularなどシェーダーがありますが、これらはシェーダー言語で自作することも可能です。&lt;br /&gt;
とりあえず基本だから用意してくれているってだけです。&lt;br /&gt;
頑張れば下図のような川瀬式シェーダーも可能になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-7.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-7.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
(図は[Kawase 2003]より)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isDoubleSided&lt;/code&gt; はポリゴン面の法線を無視して両面に画像を表示するように支持しています。
これは360度パノラマ画像は球体の中から見ることを基本としてるためです。
本来であれば球体の法線を逆ベクトルにする方法もあるのですが、SCNSphereは予めモデリングされたものなので面毎に法線を反転となると再生成となり、元の球体自作と変わらないので、今回の形をとりました。&lt;/p&gt;

&lt;h3 id=&quot;ambientライトを用意&quot;&gt;ambientライトを用意&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ambientLightNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ambient&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは既に読めると思うので特に説明はせず省きます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magnificationFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CALayerContentsFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minificationFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CALayerContentsFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは受け取ったレイヤーに対する拡大と縮小時の補間フィルターアルゴリズムの選定です。&lt;/p&gt;

&lt;h3 id=&quot;scnscenerendererdelegateでフレーム更新を受け取る&quot;&gt;SCNSceneRendererDelegateでフレーム更新を受け取る&lt;/h3&gt;

&lt;p&gt;前述したとおり、VCに対してSCNSceneRendererDelegateを採用しています。
GLKitのときの違いとしては、前回時間の算出方法が異なります。&lt;br /&gt;
SceneKitでは自分で保持し算出する必要があります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateAtTime&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timeSinceLastUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousTime&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;previousTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また回転行列がYawPitchRollではなく任意軸になっているため、
Yawの回転比率に応じて、PitchとRollの値をcos/sinでだしてPitch軸を回転させていたのに対して&lt;br /&gt;
任意軸となるため、そのままだと実質Roll軸の回転となってしまいます。&lt;/p&gt;

&lt;p&gt;そのためカメラの上下回転に関しては、カメラの横のベクトルが必要となるので、元々求めている前ベクトルとYベクトルの２つを外積することで
カメラの横ベクトルを算出し、それを回転の任意軸として設定することで、カメラの上下回転を実現しました。&lt;/p&gt;

&lt;h3 id=&quot;あとは同じ&quot;&gt;あとは同じ&lt;/h3&gt;

&lt;p&gt;あとはほとんど前回と同じになります。&lt;/p&gt;

&lt;h2 id=&quot;glkitと異なり躓いたポイント&quot;&gt;GLKitと異なり躓いたポイント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;動かないとupdateが呼ばれない&lt;/li&gt;
  &lt;li&gt;回転行列がYawPitchRollの3軸ではなく任意軸&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上, 実際にやってみたら躓きポイント、特に回転行列APIが任意軸になってる部分で大分気づくのに時間がかかりました。
今回GLKitからSceneKitに差し替えたことで、SceneKitの手軽さを体験できたことは良かったなと思いました。&lt;/p&gt;

&lt;p&gt;Unityであればリソースアセット管理とそれの編集などトータル的に勝ってはいますが、
ここまでグラフィカルエンジンのことを気にせず3Dコンテンツに集中できるとなると、ちょっと元ゲーム開発者としてはゲームを作ってみようかなと心がソワソワしました。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="scene-kit" /><category term="swift" /><summary type="html">GLKitからSceneKitに変えざるを得ない状況に直面し、SceneKitの調査や躓いたポイントについてまとめます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-07-ios-scene-kit-abc.jpg" /></entry><entry><title type="html">iOSDC Japan 2019に行くメリットについて考えてみた</title><link href="https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro" rel="alternate" type="text/html" title="iOSDC Japan 2019に行くメリットについて考えてみた" /><published>2019-09-05T00:00:00+09:00</published><updated>2019-09-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro</id><content type="html" xml:base="https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro">&lt;p&gt;9月5日から7日までの3日間で開催されるiOSDC Japan 2019の初日に参加しました。
初日は前夜祭ということで、トークは2つ参加で終わる短さでした。&lt;/p&gt;

&lt;h2 id=&quot;私は普段勉強会にほとんど参加しません&quot;&gt;私は普段勉強会にほとんど参加しません&lt;/h2&gt;

&lt;p&gt;なぜなら、大抵の発表内容で使われるスライドは公開され、
そのスライドやトークを聞いた人がまた記事にするので、その記事を見れば大抵のことは理解できるためです。
トークで全てが分からなくても、スライドにはアウトラインとアピールの２つが入っていることが必須であるため、
その２つがあればそこから自分で知識を吸収することは十分に可能です。&lt;/p&gt;

&lt;h3 id=&quot;リスナーとスピーカー間のメリット差が天地&quot;&gt;リスナーとスピーカー間のメリット差が天地&lt;/h3&gt;

&lt;p&gt;スピーカーとして参加するのはとても意義があるメリットの多い行為だと思います。
なぜなら、スピーカーとして発表するスライドを作成するために必要な調査や得た知識を体系的にまとめあげ
分かりやすい資料として作り上げることは、己の知識の棚卸しとなりスキルとして強く結びつくためです。&lt;/p&gt;

&lt;p&gt;それだけでなく、スピーカーは注目され名前や顔を覚えられ個人としてのブランディングも行えるため
個人活動において優位に働きます。&lt;/p&gt;

&lt;p&gt;反対にリスナーはそのどちらもなく、聞くに徹します。
面識のない人同士で話すことはできたとしても、有意義な会話に繋がることは希少で大抵はちょっとした会話で終わります。&lt;/p&gt;

&lt;h2 id=&quot;iosdc-japan-2019に参加するメリット&quot;&gt;iOSDC Japan 2019に参加するメリット&lt;/h2&gt;

&lt;p&gt;iOSDC Japanでは、他勉強会と違いなく、トークでは使用されるスライドは後日ネットでも見れるようになっており、
質問に関しては、今はTwitterによりメンションを送り直接質問を投げることもできます。&lt;/p&gt;

&lt;p&gt;では直接カンファレンスに参加するメリットとは何でしょうか？&lt;/p&gt;

&lt;h3 id=&quot;規模感によるトレンドを知る&quot;&gt;規模感によるトレンドを知る&lt;/h3&gt;

&lt;p&gt;実際に参加することで分かることの一つとして、参加人数です。
参加人数からiOS/Swiftに興味を持つエンジニアの規模と質が分かります。&lt;/p&gt;

&lt;p&gt;若い人が多いのか？ どの話題に興味を持っているのか？が若干汲み取ることができます。&lt;/p&gt;

&lt;p&gt;もしあなたがiOS/Swiftが下火に感じているのなら参加して他カンファレンスとの相対的な規模感を比較するといいでしょう。&lt;/p&gt;

&lt;h3 id=&quot;スライドだけでは汲み取れない周りのスキルとかが見える&quot;&gt;スライドだけでは汲み取れない周りのスキルとかが見える&lt;/h3&gt;

&lt;p&gt;スライドでは丁寧に作り上げられていると、この人はできる人なんだろうなと感じてしまいますが、
実際の発表を聞くとそこに疑問を感じることがあります。人間味があり自分と大差ないなと感じます。
&lt;strong&gt;反対もあり、スライドだけでは見えてこない、「この人多分相当苦労して色々な知識を得てこの内容に絞ってるな」と感じるトークもあります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;またリスナーの質問によっても登壇者の知識が体系的なのか特化型なのか知ることもできますし、
質問する人達が多ければ、自分がそれらの質問内容についてこれているか？程度が分かります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このようにリスナーにとってiOSDC Japanのような規模の大きいカンファレンスには、他の勉強会と違って一定のメリットは存在します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;市場を知れる&lt;/li&gt;
  &lt;li&gt;自分の現在地を知れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然ながらスピーカーにとっては、通常の勉強会のメリットに拍車がかかります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="report" /><summary type="html">9月5日から7日までの3日間で開催されるiOSDC Japan 2019の初日に参加しました。 初日は前夜祭ということで、トークは2つ参加で終わる短さでした。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-05-ios-iosdc-japan-2019-pro.png" /></entry></feed>