<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-02-08T23:35:55+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">iOSエンジニアでもRubyでスクリプトを書いて時間のかかる手作業からの卒業</title><link href="https://blog.mothule.com/ruby/ruby-script-basic" rel="alternate" type="text/html" title="iOSエンジニアでもRubyでスクリプトを書いて時間のかかる手作業からの卒業" /><published>2020-02-08T00:00:00+09:00</published><updated>2020-02-08T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/ruby-script-basic</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-script-basic">&lt;p&gt;iOSエンジニアでもスクリプトがかければ生産性は上がります。&lt;br /&gt;
ちょっとしたツールを作るだけでコーディング以外の作業を効率化できるからです。&lt;br /&gt;
&lt;strong&gt;この記事ではセットアップとよく使う関数の紹介や何がスクリプトに適してるか説明します。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;なぜiosエンジニアがrubyなのか&quot;&gt;なぜiOSエンジニアがRubyなのか？&lt;/h2&gt;
&lt;p&gt;Rails使うだけがRubyではありません。サーバーサイド専用言語でもありません。&lt;br /&gt;
&lt;strong&gt;fastlaneやCocoaPodsはRubyで書かれています。&lt;/strong&gt; iOSエンジニアとってRubyは意外と身近な存在です。&lt;/p&gt;

&lt;h2 id=&quot;どこでrubyスクリプトは生産性を上げるのか&quot;&gt;どこでRubyスクリプトは生産性を上げるのか？&lt;/h2&gt;
&lt;p&gt;下記の一覧は私が個人や業務などで作ったスクリプトです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テストのためにFirestoreへの大量データの登録&lt;/li&gt;
  &lt;li&gt;強制バージョンアップの値変更&lt;/li&gt;
  &lt;li&gt;BigQuery内View(SQL)の自動バックアップ&lt;/li&gt;
  &lt;li&gt;テストのためにAPIへの複数アクセスで疑似ユーザーのエミュレート&lt;/li&gt;
  &lt;li&gt;当サイトのアイキャッチの記事タイトル付き画像の自動生成&lt;/li&gt;
  &lt;li&gt;当サイトの記事作成フローやデプロイ、記事の簡易分析&lt;/li&gt;
  &lt;li&gt;当サイトの記事投稿前のバリデーション&lt;/li&gt;
  &lt;li&gt;記事作成時のスクショから画像最適化して所定位置に配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;始めからfastlaneやCocoaPodsのような複雑で大きなツールを作る必要はありません。&lt;br /&gt;
&lt;strong&gt;ちょっとした手間を自動化で解決してくれるスクリプトでも十分効果を発揮します。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;この記事の対象読者&quot;&gt;この記事の対象読者&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Rubyを少しでもかじった。&lt;/li&gt;
  &lt;li&gt;日常業務にコーディング以外が多いのでなんとかしたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubyでスクリプト書く準備&quot;&gt;Rubyでスクリプト書く準備&lt;/h2&gt;

&lt;p&gt;Rubyでスクリプト作成には、他Ruby環境から影響を避けるため次の準備が必要です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rbenvで&lt;strong&gt;Rubyバージョンを固定&lt;/strong&gt;する&lt;/li&gt;
  &lt;li&gt;Bundlerで&lt;strong&gt;gemバージョンを固定&lt;/strong&gt;する
    &lt;ul&gt;
      &lt;li&gt;Active Support gemでRubyをより使いやすくする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次の構成がRubyでスクリプトを書く準備が整った状態です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 1
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── Gemfile
├── Gemfile.lock
├── main
└── vendor

1 directory, 3 files

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;main
&lt;span class=&quot;nt&quot;&gt;-rwx--x--x&lt;/span&gt;  1 mothule  staff   55  2  8 21:36 main

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;main
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
require &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
require &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
require &lt;span class=&quot;s1&quot;&gt;'active_support/all'&lt;/span&gt;

puts &lt;span class=&quot;s1&quot;&gt;'Hello world'&lt;/span&gt;
puts &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;順を追って説明します。&lt;/p&gt;

&lt;h3 id=&quot;rbenvでrubyバージョンを固定する&quot;&gt;rbenvでRubyバージョンを固定する&lt;/h3&gt;
&lt;p&gt;どの言語にも言えますが、言語バージョンが異なると実行結果に影響与えます。&lt;br /&gt;
そのためRubyのバージョン管理ソフトrbenvを使って、Rubyバージョンを他Rubyアプリから影響受けないようにします。&lt;/p&gt;

&lt;p&gt;(rbenvインストールについては検索すれば出てくるのでそちらを参考にしてください。)&lt;/p&gt;

&lt;p&gt;Rubyバージョンを固定するため次のコマンドを実行します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;特に理由がなければ最新バージョンを使います。&lt;br /&gt;
実行すれば &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt; が作成されます。&lt;br /&gt;
指定バージョンがrbenvになければインストールしてください。&lt;/p&gt;

&lt;p&gt;これでRubyバージョン固定できました。&lt;/p&gt;

&lt;h3 id=&quot;bundlerでgemバージョンを固定する&quot;&gt;Bundlerでgemバージョンを固定する&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;スクリプトでgemを使う場合はBundlerを使いましょう。※1&lt;/strong&gt;&lt;br /&gt;
Bundlerを準備するのは簡単です。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これだけです。
実行すれば Gemfile が作成されるので、ここに使うgemを入れていきます。&lt;/p&gt;

&lt;h4 id=&quot;1-bundler使わず直接インストールするリスク&quot;&gt;※1 Bundler使わず直接インストールするリスク&lt;/h4&gt;
&lt;p&gt;Bundlerを使わず直接gemをインストールすると、もし同一バージョンの別Rubyアプリがあり、そちらでも直接gemを使ってたら片方の都合でgemが更新するともう片方も影響を与えてしまい、気づかぬうちに動作しなくなるリスクがあります。&lt;br /&gt;
Swiftなどコンパイル言語であればコンパイルエラーで検知できますが、Rubyはランタイムに問題となるコードが実行されないとエラーにならないので、気づかぬうちに深刻な不具合が潜伏します。&lt;/p&gt;

&lt;h4 id=&quot;インストール時はgem先を指定する&quot;&gt;インストール時はgem先を指定する&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vender/bundle &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;gemの準備ができたらインストールですが、gemのインストール先を &lt;code class=&quot;highlighter-rouge&quot;&gt;vender/bundle&lt;/code&gt; に指定することでカレントディレクトリにgemsがインストールされるようになり、使われているgemsに対して検索やコードリーディングなどしやすくなります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-j4&lt;/code&gt; はインストールジョブが4つ同時に走るのでインストールが早く終わります。&lt;/p&gt;

&lt;h4 id=&quot;active-support-gemでrubyをより使いやすくする&quot;&gt;Active Support gemでRubyをより使いやすくする&lt;/h4&gt;

&lt;p&gt;RailsでRubyを書いてる書き方はActive Support gemのお陰で便利にコーディングできます。&lt;br /&gt;
これをRailsなしのスクリプトでも使えるようにするには、&lt;code class=&quot;highlighter-rouge&quot;&gt;activesupport&lt;/code&gt; gemが必要です。  &lt;br /&gt;
&lt;em&gt;Gemfile&lt;/em&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'activesupport'&lt;/code&gt; を追記しましょう。&lt;/p&gt;

&lt;h2 id=&quot;railsなしでbundlerを使うには&quot;&gt;RailsなしでBundlerを使うには？&lt;/h2&gt;

&lt;p&gt;Rubyでは当然のようにBundlerを使ってgem管理を行い, gemを追加すればすぐ使えるものばかりですが、
Railsなしの場合は、require を自分で呼ぶ必要があります。
&lt;code class=&quot;highlighter-rouge&quot;&gt;require 'rubygems'&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'bundler/setup'&lt;/code&gt; を入れます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;main&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/all'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rbenvのrubyパスshebangについて&quot;&gt;rbenvのRubyパス(shebang)について&lt;/h3&gt;
&lt;p&gt;前述コードのshebangは、rbenvを使う場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&lt;/code&gt; にします。&lt;/p&gt;

&lt;h2 id=&quot;chmodでスクリプトに実行権限を与える&quot;&gt;chmodでスクリプトに実行権限を与える&lt;/h2&gt;
&lt;p&gt;作成したファイルのままでは実行権限が不十分です。
&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; コマンドで誰でも実行できるように権限付与します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(権限エラーの場合はsudoをつけて再実行)&lt;/p&gt;

&lt;h2 id=&quot;０から準備まで工程を列挙する&quot;&gt;０から準備まで工程を列挙する&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir hoge &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;2.7.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem 'activesupport'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;main&lt;/em&gt; ファイルに下記を追加する。&lt;/p&gt;
&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/all'&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello world'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`ruby -v`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでRubyでスクリプトを書く準備が整います。&lt;/p&gt;

&lt;h2 id=&quot;よく使う関数やシェルコマンド&quot;&gt;よく使う関数やシェルコマンド&lt;/h2&gt;
&lt;p&gt;Rubyにはシェル操作関数があります。
つまりRubyから&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; といったシェルコマンドや、 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; といったHomebrewで落としたコマンドラインツールも実行することができます。&lt;/p&gt;

&lt;p&gt;スクリプトを作るときに比較的よく使う関数やシェルコマンドを紹介します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ARGV
    &lt;ul&gt;
      &lt;li&gt;実行時に渡された引数情報です&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;puts
    &lt;ul&gt;
      &lt;li&gt;標準出力関数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exit
    &lt;ul&gt;
      &lt;li&gt;終了ステータスの発行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;File.read
    &lt;ul&gt;
      &lt;li&gt;外部ファイルの一括読み込み&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;File.write
    &lt;ul&gt;
      &lt;li&gt;外部ファイルの一括書き込み&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gem ‘parallel’
    &lt;ul&gt;
      &lt;li&gt;スレッドやプロセスの並列処理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OptionParser
    &lt;ul&gt;
      &lt;li&gt;ARGVのパーサー&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;YAML
    &lt;ul&gt;
      &lt;li&gt;yamlファイルの制御&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ERB
    &lt;ul&gt;
      &lt;li&gt;erbファイルの制御&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;%x(cmd)
    &lt;ul&gt;
      &lt;li&gt;シェルコマンドの実行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;スクリプト化の気づき&quot;&gt;スクリプト化の気づき&lt;/h2&gt;

&lt;p&gt;どういった作業がスクリプトしたほうがいいのかを少しだけ紹介します。&lt;/p&gt;

&lt;h3 id=&quot;マウスのポチポチ作業はスクリプト化の可能性あり&quot;&gt;マウスのポチポチ作業はスクリプト化の可能性あり&lt;/h3&gt;
&lt;p&gt;iOSエンジニアといえど、XcodeとSwiftで完結はしません。
テスト準備などiOSアプリ開発以外で「これプログラム書いたほうが楽そうだな」と思うことはあります。&lt;br /&gt;
そのときスクリプトの書き方を知っておいて、取り掛かりやすくしておけば、ササっとスクリプトが書いて楽ができます。&lt;/p&gt;

&lt;h3 id=&quot;定期的な確認はcronスクリプトで検討してみる&quot;&gt;定期的な確認はcron+スクリプトで検討してみる&lt;/h3&gt;
&lt;p&gt;定期的に変更されているかなど確認が必要な場合は、その確認作業をスクリプトで完結できないかを検討してみましょう。&lt;br /&gt;
もしできそうなら続けてcronでそのスクリプトを走らせることでこちらから意識せずとも確認をし続けてくれるようになります。&lt;br /&gt;
またcronではなくともCircleCIやBitriseのNightly実行でも問題ありません。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;iOSエンジニアいえどエンジニアです。iOSの知識とSwiftのコーディングスキル, iPhoneの特性だけを理解するだけでは、つぶしの効かず、限界が早めに来ます。&lt;br /&gt;
大事なのはエンジニアとしての強みを理解し、自分の代わりにプログラムが解決してくれないかを考えることです。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="ios" /><category term="bundler" /><category term="shellscript" /><category term="tools" /><category term="rbenv" /><summary type="html">iOSエンジニアでもスクリプトがかければ生産性は上がります。 ちょっとしたツールを作るだけでコーディング以外の作業を効率化できるからです。 この記事ではセットアップとよく使う関数の紹介や何がスクリプトに適してるか説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-08-ruby-script-basic.png" /></entry><entry><title type="html">iOSエンジニアが開発効率のために最低限知るべきシェルスクリプト入門</title><link href="https://blog.mothule.com/tools/shellscript/shellscript-basic-for-mobile-enginner" rel="alternate" type="text/html" title="iOSエンジニアが開発効率のために最低限知るべきシェルスクリプト入門" /><published>2020-02-05T00:00:00+09:00</published><updated>2020-02-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/shellscript/shellscript-basic-for-mobile-enginner</id><content type="html" xml:base="https://blog.mothule.com/tools/shellscript/shellscript-basic-for-mobile-enginner">&lt;p&gt;bashやzsh,ターミナルは弄っていますか？黒い画面は古臭いと思ってませんか？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOSエンジニアと言えどXcode上でSwiftをコーディングだけが全てではありません。&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;CocoaPods&lt;/em&gt;や&lt;em&gt;Carthage&lt;/em&gt;、&lt;em&gt;fastlane&lt;/em&gt; などエコシステムはシェルコマンド操作が必須です。&lt;/p&gt;

&lt;p&gt;またAPIとの通信にシェルスクリプトを使うことで、効率よく情報を集めたり事前準備できたりします。&lt;br /&gt;
シェルスクリプトはSwiftと同じただの道具です。使い方を覚えて視野を広げましょう。&lt;/p&gt;

&lt;h2 id=&quot;この記事で基礎知識を得よう&quot;&gt;この記事で基礎知識を得よう&lt;/h2&gt;
&lt;p&gt;この記事では難しいイディオムテクニックが書けるなどではなく、基本を理解してシェルスクリプトを読めるようになるための土台作りだとイメージしてください。&lt;br /&gt;
この土台を踏み台に少しずつシェルスクリプトに触れていくことで、より生産性の高いスキルを身に付けれるかと思います。&lt;/p&gt;

&lt;h2 id=&quot;bashやzsh-fishと色々あるが基本は同じ&quot;&gt;bashやzsh, fishと色々あるが基本は同じ&lt;/h2&gt;
&lt;p&gt;シェルスクリプトは色々ありますが、Swiftと違ってどれも活躍場所がターミナル上に閉じています。&lt;br /&gt;
そして基本部分は同じなので慣れてきたら自分好みのシェルを選ぶと流れがいいです。&lt;br /&gt;
ターミナル上の作業を効率よく進められれば結果的にiOS開発効率の向上に繋がります。&lt;/p&gt;

&lt;h2 id=&quot;シェルスクリプトとは&quot;&gt;シェルスクリプトとは？&lt;/h2&gt;
&lt;p&gt;広義と狭義の意味を持っているのですが、ここではUnixシェルで使われるスクリプト言語です。&lt;br /&gt;
つまりシェルのスクリプトです。&lt;/p&gt;

&lt;h3 id=&quot;ではシェルとは&quot;&gt;ではシェルとは？&lt;/h3&gt;
&lt;p&gt;シェルとはOSとユーザーが対話するためのインターフェイスを提供するソフトウェアです。&lt;br /&gt;
ユーザーがOSに対して命令するための窓口とも言えます。&lt;br /&gt;
bashやzshなどもシェルでありコマンド言語でもあります。&lt;/p&gt;

&lt;h3 id=&quot;コマンドとは&quot;&gt;コマンドとは？&lt;/h3&gt;

&lt;p&gt;シェルが提供している対話手段みたいなものです。&lt;br /&gt;
echo などがそれにあたります。&lt;/p&gt;

&lt;p&gt;つまりシェルスクリプトとはechoなどのシェルコマンドにより構成されたスクリプト言語です。&lt;/p&gt;

&lt;h2 id=&quot;よく使うコマンド&quot;&gt;よく使うコマンド&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;echo: 画面に文字列などを出力する&lt;/li&gt;
  &lt;li&gt;shift: 引数をN個ずらす&lt;/li&gt;
  &lt;li&gt;source: ファイル内のシェルを読み込んで実行する&lt;/li&gt;
  &lt;li&gt;awk: 空白で区切られたテキストを処理する&lt;/li&gt;
  &lt;li&gt;sed: 文字列置換&lt;/li&gt;
  &lt;li&gt;grep: テキスト検索&lt;/li&gt;
  &lt;li&gt;ag: grep高速版&lt;/li&gt;
  &lt;li&gt;pbcopy: クリップボードにコピー&lt;/li&gt;
  &lt;li&gt;pbpaste: クリップボードからペースト&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;echo-画面に文字列などを出力する&quot;&gt;echo: 画面に文字列などを出力する&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hoge&quot;&lt;/span&gt;
hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;単純に出力するしたり&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'asdf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
asdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;変数を展開したり&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed tests&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/Downloads/test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;出力先をリダイレクトしたりも出来ます。&lt;/p&gt;

&lt;h3 id=&quot;shift-引数をn個ずらす&quot;&gt;shift: 引数をN個ずらす&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shift [N]&lt;/code&gt;
引数が1,2,3,4,5の場合、&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; → 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; → 2
&lt;span class=&quot;nb&quot;&gt;shift
echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; → 2
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; → 3
&lt;span class=&quot;nb&quot;&gt;shift &lt;/span&gt;2
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; → 4
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; → 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;case/inと組み合わせることで引数を一つずつハンドリングする処理が書くこともできます。&lt;/p&gt;

&lt;h3 id=&quot;source-ファイル内のシェルを読み込んで実行する&quot;&gt;source: ファイル内のシェルを読み込んで実行する&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;というは、実は &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; というシェルスクリプトを実行してるだけです。&lt;/p&gt;

&lt;h3 id=&quot;awk-空白で区切られたテキストを処理する&quot;&gt;awk: 空白で区切られたテキストを処理する&lt;/h3&gt;

&lt;p&gt;パイプなどで受け取った出力結果を一部分だけ抜き取る場合などに利用できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a b c d e f'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{ print $2 }'&lt;/span&gt;
b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは空白区切りして2つ目のテキストを出力します。&lt;/p&gt;

&lt;p&gt;awkは高機能なためこれだけではありません。
詳しくは他解説サイトをご覧ください。&lt;/p&gt;

&lt;h3 id=&quot;sed-文字列置換&quot;&gt;sed: 文字列置換&lt;/h3&gt;

&lt;p&gt;パイプなどで受け取った出力結果にたいし文字列置換したい場合に利用できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple orange&quot;&lt;/span&gt; | sed s/apple/Apple/
Apple orange
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sedは高機能なためこれだけではありません。
詳しくは他解説サイトをご覧ください。&lt;/p&gt;

&lt;h3 id=&quot;grep-テキスト検索&quot;&gt;grep: テキスト検索&lt;/h3&gt;
&lt;p&gt;パイプで受け取った出力結果に対して文字列を検索します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Podfile.lock | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; firebase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このようにPodfile.lockに対してちょっとした検索などにも使えます。&lt;/p&gt;

&lt;p&gt;パイプだけでなく指定フォルダのファイル内検索も可能ですが、結構重いです。なので自分は次のagを使っています。&lt;/p&gt;

&lt;h3 id=&quot;ag-grep高速版&quot;&gt;ag: grep高速版&lt;/h3&gt;

&lt;p&gt;The Silver Searcherと呼ばれてます。&lt;br /&gt;
grepよりかなり高速です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ag .storyboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;とするだけで実行ディレクトリから子ディレクトリ含め全部のファイルに対し、ファイル内検索を実行します。&lt;br /&gt;
アプリ上で指定文言が使われているか検索する場合、Xcode使わずこれを使うと早いです。&lt;br /&gt;
Xcodeでは検索に引っかからない場合もありますし。&lt;/p&gt;

&lt;h3 id=&quot;pbcopy-クリップボードにコピー&quot;&gt;pbcopy: クリップボードにコピー&lt;/h3&gt;

&lt;p&gt;出力結果をクリップボードにコピーします。&lt;br /&gt;
結果をslackなどに貼りたいなど別の場所に貼りたい場合に便利です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 2 Gemfile.lock | pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;↓がコピーされます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BUNDLED WITH&lt;br /&gt;
  1.17.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pbpaste-クリップボードからペースト&quot;&gt;pbpaste: クリップボードからペースト&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbcopy&lt;/code&gt; とは逆の貼り付けです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hoge&quot;&lt;/span&gt; | pbcopy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pbpaste
hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;入出力リダイレクト&quot;&gt;入出力リダイレクト&lt;/h2&gt;

&lt;p&gt;入力をコマンドに渡したり、コマンドの結果を別ストリームに渡したりすることをいいます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; : 上書き or ファイル作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; : 追加出力 or ファイル作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2&amp;gt;&lt;/code&gt; : 標準エラー出力をファイルにリダイレクト(上書き or 作成)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;gt;&lt;/code&gt; : 標準出力と標準エラー出力をファイルにリダイレクト&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;gt;&amp;gt;&lt;/code&gt; : 標準出力と標準エラー出力をファイルに追記書き込み&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;amp;2&lt;/code&gt; : 標準出力を標準エラー出力にリダイレクト&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ファイル作成上書き&quot;&gt;ファイル作成(上書き)&lt;/h3&gt;

&lt;p&gt;結果を指定パスに出力します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/test.txt
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;出力先が存在する場合は上書きします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/test.txt
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/test.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/test.txt
test2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;パイプライン&quot;&gt;パイプライン&lt;/h2&gt;
&lt;p&gt;コマンドの結果を次のコマンドに渡す処理のことをいいます。&lt;br /&gt;
コマンドとコマンドをつなぐシェルでとても重要な機能の一つです。&lt;/p&gt;

&lt;h3 id=&quot;使い方は簡単&quot;&gt;使い方は簡単&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command a | command b&lt;/code&gt;のように &lt;strong&gt;|&lt;/strong&gt; を挟むだけで、 &lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;の結果が &lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt; に引数として渡されます。&lt;/p&gt;

&lt;p&gt;例えばファイル一覧からテキストを絞り込む場合は&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.txt&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;の出力結果を&lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;に渡してテキストファイルの行を絞り込みします。&lt;/p&gt;

&lt;h2 id=&quot;コマンドの連結&quot;&gt;コマンドの連結&lt;/h2&gt;
&lt;p&gt;連結することで、コマンドを立て続けに実行して一度の命令で複数のコマンドを実行することができる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;(セミコロン)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;(アンパサンド)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;(ダブルアンパサンド)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;セミコロンで連結&quot;&gt;;(セミコロン)で連結&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command a ; command b&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;を実行、コマンドが終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt;を実行する。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;
a
b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;アンパサンドで連結&quot;&gt;&amp;amp;(アンパサンド)で連結&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command a &amp;amp; command b&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;を実行後すぐに &lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sleep 1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;だと1秒後にaが出力される。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sleep 1 &amp;amp; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;だと待たずにaが出力される。&lt;/p&gt;

&lt;h3 id=&quot;ダブルアンパサンドで連結&quot;&gt;&amp;amp;&amp;amp;(ダブルアンパサンド)で連結&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command a &amp;amp;&amp;amp; command b&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;が成功したら、&lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt;を実行する。
&lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;が失敗したら、&lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt;は実行しない。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout develop &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout pull &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; feature/hoge &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; feature/fuga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;というコマンド連結だと、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;developブランチに移動&lt;/li&gt;
  &lt;li&gt;pull –prune 実行&lt;/li&gt;
  &lt;li&gt;feature/hogeブランチを削除&lt;/li&gt;
  &lt;li&gt;feature/fugaブランチをチェックアウト or 作成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;になりますが、どれか失敗すると以降のコマンドは実行されません。&lt;/p&gt;

&lt;h3 id=&quot;で連結&quot;&gt;||で連結&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command a || command b&lt;/code&gt;
&amp;amp;&amp;amp; の逆。&lt;code class=&quot;highlighter-rouge&quot;&gt;command a&lt;/code&gt;に失敗したら&lt;code class=&quot;highlighter-rouge&quot;&gt;command b&lt;/code&gt;を実行する。&lt;/p&gt;

&lt;h2 id=&quot;外部シェルスクリプトの作成&quot;&gt;外部シェルスクリプトの作成&lt;/h2&gt;

&lt;p&gt;ターミナル上でシェルを操作するだけだとたくさんのコマンドや複雑な条件処理をしたいときに1行で書くこととなり不便です。
別のPCでも実行したいとなると保存されていないので、またそのPCで最初から打ち直すことになります。&lt;br /&gt;
1つファイルにシェルコマンドを集約するのがシェルスクリプトとなります。&lt;/p&gt;

&lt;h3 id=&quot;シェルスクリプト雛形を用意&quot;&gt;シェルスクリプト雛形を用意&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;ファイル作成&lt;/li&gt;
  &lt;li&gt;シェバング記載&lt;/li&gt;
  &lt;li&gt;適当なコマンド入れる&lt;/li&gt;
  &lt;li&gt;実行権限の付与&lt;/li&gt;
  &lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ファイル作成&quot;&gt;ファイル作成&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これでscriptというファイルが作成されます。&lt;/p&gt;

&lt;h4 id=&quot;シェバング記載&quot;&gt;シェバング記載&lt;/h4&gt;

&lt;p&gt;scriptファイルをエディタで開いて1行目に次のコードを入れます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;適当なコマンド入れる&quot;&gt;適当なコマンド入れる&lt;/h4&gt;

&lt;p&gt;scriptファイルを実行時に正しく実行できたか判断できるように簡単なコマンドを入れておきます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I am script.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;実行権限の付与&quot;&gt;実行権限の付与&lt;/h4&gt;
&lt;p&gt;scriptファイルに実行権限を付与します。これをしないと作成者以外のユーザーがこれを実行できないためです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;権限エラーの場合は頭にsudoつけてください。&lt;/p&gt;

&lt;h4 id=&quot;実行してみる&quot;&gt;実行してみる&lt;/h4&gt;
&lt;p&gt;ではこれを実行してみます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;コメント&quot;&gt;コメント&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# これはコメント&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;シェバングshebangでosにスクリプト情報を伝える&quot;&gt;シェバング(Shebang)でOSにスクリプト情報を伝える&lt;/h3&gt;
&lt;p&gt;シェルスクリプトの先頭にコメントで&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;と入っているのは、おまじないではなく、シェルスクリプトを実行したときOSがどの言語で実行するべきスクリプトなのかを判断するための情報となります。&lt;/p&gt;

&lt;p&gt;例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge.sh&lt;/code&gt;というファイル名であれば拡張子から実行方法を割り出します。でも&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;というファイル名では分かりません。&lt;br /&gt;
OSはファイルの先頭に記載された情報を元に実行する方法を切り替えています。&lt;/p&gt;

&lt;h4 id=&quot;実際に動かしてみる&quot;&gt;実際に動かしてみる&lt;/h4&gt;
&lt;p&gt;次のファイルを用意します
&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I am bash'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に実行権限を与えます。(必要に応じsudoつける)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このファイルを実行方法の指定なしで実行します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;hogeがあるディレクトリまで移動&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./hoge
I am bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;問題なくechoが出力されました。&lt;/p&gt;

&lt;p&gt;では次にシェバングを&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/ruby&lt;/span&gt;&lt;/code&gt;に変えます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./hoge
./hoge:2:in &lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;: undefined method &lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;main:Object &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NoMethodError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rubyとして実行され、echoというメソッドがないことで失敗しました。&lt;/p&gt;

&lt;p&gt;反対にシェバングを&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;にしてコードをrubyに変更します。&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I am ruby'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これを実行します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./hoge
./hoge: line 3: p: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;bashとして実行され、pというコマンドがないことで失敗しました。&lt;/p&gt;

&lt;p&gt;このようにシェバングはOSに実行方法を伝える役割です。&lt;/p&gt;

&lt;h3 id=&quot;exit-1-の意味&quot;&gt;exit 1 の意味&lt;/h3&gt;
&lt;p&gt;コマンドは実行の成功・失敗を表す終了ステータスという数値があり、その数値は特殊変数&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;に格納される。&lt;br /&gt;
終了ステータスの数値は一般的に 成功&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 失敗&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;以外で表されている。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'complex command'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
complex &lt;span class=&quot;nb&quot;&gt;command
&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;変数&quot;&gt;変数&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;変数の宣言&lt;/li&gt;
  &lt;li&gt;変数の参照&lt;/li&gt;
  &lt;li&gt;変数のエクスポート&lt;/li&gt;
  &lt;li&gt;特殊変数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;変数の宣言&quot;&gt;変数の宣言&lt;/h3&gt;
&lt;p&gt;変数宣言は次のように書きます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
=の前後にスペースを空けるとエラーになります。&lt;/p&gt;

&lt;h3 id=&quot;変数の参照&quot;&gt;変数の参照&lt;/h3&gt;
&lt;p&gt;変数にアクセスして中の値を使うには変数名の前に$をつけて&lt;code class=&quot;highlighter-rouge&quot;&gt;$変数名&lt;/code&gt;と書いて使います。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;でより厳密な参照&quot;&gt;${}でより厳密な参照&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$var&lt;/code&gt;でも変数への参照はできるが、本来の正しい参照は&lt;code class=&quot;highlighter-rouge&quot;&gt;${var}&lt;/code&gt;が正しい。&lt;br /&gt;
この方法じゃないと変数名によっては間違った解釈で異なる変数参照をしようとする。
また後述する文字列演算子を使うときに必要となる。&lt;/p&gt;

&lt;h3 id=&quot;文字列演算子&quot;&gt;文字列演算子&lt;/h3&gt;
&lt;p&gt;変数の参照時にちょっとしたマクロ的な使い方ができます。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;演算子&lt;/td&gt;
      &lt;td&gt;内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var:-value}&lt;/td&gt;
      &lt;td&gt;varがありNULLではないなら、varを返し、それ以外は valueを返す&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var:=value}&lt;/td&gt;
      &lt;td&gt;varがありNULLではないなら、varを返し、それ以外は varにvalueを入れて返す. 例外あり&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var:?msg}&lt;/td&gt;
      &lt;td&gt;varがありNULLではないなら、varを返し、それ以外は msgを出力し処理を中止する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var:+value}&lt;/td&gt;
      &lt;td&gt;varがありNULLではないなら、varを返し、それ以外は NULLを返す&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var#pattern}&lt;/td&gt;
      &lt;td&gt;varを先頭検索して pattern が一致したら、最短一致した部分を削除する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var##pattern}&lt;/td&gt;
      &lt;td&gt;varを先頭検索して pattern が一致したら、最長一致した部分を削除する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var%pattern}&lt;/td&gt;
      &lt;td&gt;varを末尾検索して pattern が一致したら、最短一致した部分を削除する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${var%%pattern}&lt;/td&gt;
      &lt;td&gt;varを末尾検索して pattern が一致したら、最長一致した部分を削除する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;${#var}&lt;/td&gt;
      &lt;td&gt;varの長さを返す&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;変数のエクスポート&quot;&gt;変数のエクスポート&lt;/h3&gt;
&lt;p&gt;変数を定義したシェルから起動したシェルや実行したコマンドから変数を参照できるようになります。
これを環境変数と呼びます。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cdn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;特殊変数&quot;&gt;特殊変数&lt;/h3&gt;

&lt;p&gt;シェルスクリプトには予約された変数が存在しており、それらは決められた機能を持っています。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;変数名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;実行してるスクリプト名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$$&lt;/td&gt;
      &lt;td&gt;実行してるスクリプトのプロセスID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$#&lt;/td&gt;
      &lt;td&gt;スクリプト実行時に渡された引数の数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$1 ~ $9&lt;/td&gt;
      &lt;td&gt;引数それぞれの変数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$*&lt;/td&gt;
      &lt;td&gt;渡された引数全部を1つの変数として扱う&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$@&lt;/td&gt;
      &lt;td&gt;渡された引数を個別に扱う&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$?&lt;/td&gt;
      &lt;td&gt;最後に実行したコマンドの実行結果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$!&lt;/td&gt;
      &lt;td&gt;最後に実行したバックグラウンドのプロセスID&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;引数&quot;&gt;引数&lt;/h4&gt;
&lt;p&gt;コマンドラインに渡された値が格納された変数です。&lt;/p&gt;

&lt;p&gt;例えば&lt;strong&gt;test.sh&lt;/strong&gt;の中身が下記コードだとして、
&lt;strong&gt;test.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;次のようなコマンドを実行すると、&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sh test.sh hoge fuga nuga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;とターミナルに出力されます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;直前のコマンドの終了ステータスを保持&quot;&gt;直前のコマンドの終了ステータスを保持&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;条件分岐&quot;&gt;条件分岐&lt;/h2&gt;

&lt;p&gt;コマンドの結果によって次の処理を変えたい場合は、if文やswitch/case文を使います。&lt;/p&gt;

&lt;h3 id=&quot;ifelse文&quot;&gt;if/else文&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;条件式 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;条件式 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;閉じスコープが &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; の反対になってるのが特徴です。&lt;br /&gt;
また &lt;code class=&quot;highlighter-rouge&quot;&gt;; then&lt;/code&gt; の&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;はSwiftと同じ役割です。開始ブレースが頭についたほうが読みやすいようにシェルスクリプトでも&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;をつかって表現しています。&lt;/p&gt;

&lt;p&gt;これは&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;使わずに書くと&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;条件式
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;条件式
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some process&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;となり、さっきまであったレイアウトの法則性がなくなり、視線の運び方に乱れがおきて負荷がかかります。
つまりスラスラと読みにくいです。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if 1 &amp;gt; 0 {
  print(&quot;True&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を書く場合は&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;True
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と書きます。&lt;/p&gt;

&lt;h4 id=&quot;ifの評価式にtestやを使う理由&quot;&gt;ifの評価式にtestや[]を使う理由&lt;/h4&gt;
&lt;p&gt;if文はlsやgrepなど&lt;strong&gt;コマンドの終了ステータス&lt;/strong&gt;を評価しています。
そして、終了ステータスは&lt;strong&gt;0なら真&lt;/strong&gt;となりそれ以外なら偽となります。
そのため &lt;code class=&quot;highlighter-rouge&quot;&gt;if $age &amp;gt; 5 ; then&lt;/code&gt; みたいには書けません。&lt;/p&gt;

&lt;p&gt;上記みたいな式を書きたい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;コマンドを使います。
&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;コマンドは受け取った引数を評価し、真なら0、偽なら1の終了ステータスを返してくれます。
これをifの評価式に挟むことで、我々が本来そうていしているif文が使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test 数値1 -eq 数値2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみにこれのシュガーシンタックスが[]となります。
上のコードは次のように書けます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし残念ながら、&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;コマンドは &lt;strong&gt;==,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=&lt;/strong&gt; は使えない。代わりに文字列で指定するしかない。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;引数&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
      &lt;th&gt;いわゆる&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-lt&lt;/td&gt;
      &lt;td&gt;Less than&lt;/td&gt;
      &lt;td&gt;&amp;lt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-gt&lt;/td&gt;
      &lt;td&gt;Greater than&lt;/td&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-le&lt;/td&gt;
      &lt;td&gt;Less than or equal&lt;/td&gt;
      &lt;td&gt;&amp;lt;=&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-ge&lt;/td&gt;
      &lt;td&gt;Greater than or equal&lt;/td&gt;
      &lt;td&gt;&amp;gt;=&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-eq&lt;/td&gt;
      &lt;td&gt;Equal&lt;/td&gt;
      &lt;td&gt;==&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-ne&lt;/td&gt;
      &lt;td&gt;Not equal&lt;/td&gt;
      &lt;td&gt;!=&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ちなみに and と or は
and は&lt;code class=&quot;highlighter-rouge&quot;&gt;expression1 -a expression2&lt;/code&gt;
or は&lt;code class=&quot;highlighter-rouge&quot;&gt;expression1 -o expression2&lt;/code&gt;
となる。&lt;/p&gt;

&lt;p&gt;否定は ! となる
&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ! $hoge ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一般的に&lt;code class=&quot;highlighter-rouge&quot;&gt;if test hoge&lt;/code&gt;と書かずに&lt;code class=&quot;highlighter-rouge&quot;&gt;if [[hoge]]&lt;/code&gt;のように書かれる。 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[]]&lt;/code&gt;はtestの略式コマンドとなる&lt;/p&gt;

&lt;p&gt;また文字列の比較であれば、 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; が使える&lt;/p&gt;

&lt;h4 id=&quot;testコマンドでファイルやディレクトリの存在有無が分かる&quot;&gt;testコマンドでファイルやディレクトリの存在有無が分かる&lt;/h4&gt;

&lt;p&gt;ディレクトリは &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; オプションを指定することで、その次に続くパスにディレクトリがあるか確認できる&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/your/directory/path'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ある&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ない&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ファイルは &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; オプションを指定することで、確認できる。&lt;/p&gt;

&lt;p&gt;またファイルが読取可能, 書込可能, 実行可能の確認もできて、それぞれ
&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;となる。&lt;/p&gt;

&lt;p&gt;またファイルが空サイズかどうかの確認は &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;で確認できる。&lt;/p&gt;

&lt;h4 id=&quot;testコマンドで2つのファイルの新旧を比較できる&quot;&gt;testコマンドで2つのファイルの新旧を比較できる&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ $file1 -nt $file2 ]&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;$file1&lt;/code&gt; が新しいと真となる
&lt;code class=&quot;highlighter-rouge&quot;&gt;[ $file1 -ot $file2 ]&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;$file1&lt;/code&gt; が古いと真となる&lt;/p&gt;

&lt;p&gt;それぞれ
&lt;code class=&quot;highlighter-rouge&quot;&gt;-nt&lt;/code&gt; → newer than
&lt;code class=&quot;highlighter-rouge&quot;&gt;-ot&lt;/code&gt; → older than
となる。&lt;/p&gt;

&lt;h4 id=&quot;testコマンドで文字列の長さチェックができる&quot;&gt;testコマンドで文字列の長さチェックができる&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -z $hoge]&lt;/code&gt; は文字列の長さが0なら真
&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -n $hoge]&lt;/code&gt; は文字列の長さが1以上なら真&lt;/p&gt;

&lt;h4 id=&quot;bashzshなどはよりを使おう&quot;&gt;bash,zshなどは&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;[[]]&lt;/code&gt;を使おう&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;の説明をしましたが、&lt;code class=&quot;highlighter-rouge&quot;&gt;[[]]&lt;/code&gt;が使える場合はそちらを使ったほうがいいです。
&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;は変数展開でワード分割やパス名展開されて想定外の判定結果となるためです。&lt;/p&gt;

&lt;p&gt;通常であれば↓のような結果ですが、&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hogehoge'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; hogehoge &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このような場合だとエラーになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hoge hoge'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; hogehoge &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
too many arguments
2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;詳しくはこちらの記事が参考になります。
&lt;a href=&quot;https://fumiyas.github.io/2013/12/15/test.sh-advent-calendar.html&quot;&gt;test と [ と [[ コマンドの違い - 拡張 POSIX シェルスクリプト Advent Calendar 2013 - ダメ出し Blog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;switchcase文&quot;&gt;switch/case文&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; 値 &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;ケース1 &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 処理 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  ケース2 &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 処理 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;;;&lt;/code&gt; セミコロン二つはコマンドの終わりを知らせます。&lt;/p&gt;

&lt;h4 id=&quot;評価値が文字列の場合は正規表現が使える&quot;&gt;評価値が文字列の場合は正規表現が使える&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;正規表現マッチング&quot;&gt;正規表現マッチング&lt;/h3&gt;

&lt;p&gt;変数varに挨拶が含まれてるか調べる&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello, world'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ ^.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;hello.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'挨拶'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=~&lt;/code&gt;を使うことで正規表現判定となります。&lt;/p&gt;

&lt;h2 id=&quot;ループ&quot;&gt;ループ&lt;/h2&gt;

&lt;h3 id=&quot;for文&quot;&gt;for文&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;one two three&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;while文&quot;&gt;while文&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;評価式&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;var&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; ~/Downloads/hoge.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;関数&quot;&gt;関数&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;my_func&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;hello_world
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;引数あり関数&quot;&gt;引数あり関数&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hello&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
hello &lt;span class=&quot;s2&quot;&gt;&quot;hoge&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;特殊引数&quot;&gt;特殊引数&lt;/h2&gt;
&lt;h3 id=&quot;ダブルダッシュ&quot;&gt;ダブル・ダッシュ&lt;/h3&gt;
&lt;p&gt;ハイフン二つ(–)のことをダブル・ダッシュ(Double Dash)と呼ばれており、これはコマンドフラグの終わりを示す記号となる。&lt;br /&gt;
オプションのスキャン処理を明示的に終了させるときに使う。&lt;/p&gt;

&lt;h2 id=&quot;展開&quot;&gt;展開&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(コマンド)&lt;/code&gt; でコマンド結果を出力します。&lt;br /&gt;
同様の機能にバッククォートで囲む &lt;code class=&quot;highlighter-rouge&quot;&gt;コマンド&lt;/code&gt; もあります。&lt;br /&gt;
ちなみにバッククォートは入れ子にできません。&lt;/p&gt;

&lt;h2 id=&quot;正常終了と異常終了&quot;&gt;正常終了と異常終了&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit 終了ステータス&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;正常： &lt;code class=&quot;highlighter-rouge&quot;&gt;exit 0&lt;/code&gt;
以上： &lt;code class=&quot;highlighter-rouge&quot;&gt;exit 1&lt;/code&gt;など0以外&lt;/p&gt;

&lt;h2 id=&quot;echo-で色&quot;&gt;echo で色&lt;/h2&gt;
&lt;p&gt;16進数&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[1;31m This is red text &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;応用&quot;&gt;応用&lt;/h2&gt;

&lt;h3 id=&quot;bash限定-local-の意味&quot;&gt;bash限定: local の意味&lt;/h3&gt;
&lt;p&gt;シェルスクリプトの変数はデフォルトはグローバル変数です。&lt;br /&gt;
グローバル変数は、関数内で変数が使われていても、外でその変数にアクセスできるなど不具合の巣窟です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hoge&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
hoge
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &quot;test&quot; と出力される&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;関数で使った変数は関数から出たら消えてほしい場合には local を使います。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hoge&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
hoge
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 空出力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;forなど内部で変数が使われるような場合は、事前に使う変数をlocal変数宣言しておきます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;var
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;test1 test2 test3&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 空出力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;一度に全部を覚える必要はないですが、シェルやシェルスクリプトを使いこなすことで、iOS開発効率やAPIを効率良く検証したりいいことばかりです。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="shellscript" /><category term="ios" /><summary type="html">bashやzsh,ターミナルは弄っていますか？黒い画面は古臭いと思ってませんか？</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-05-shellscript-basic-for-mobile-enginner.png" /></entry><entry><title type="html">Gitで先にPRやリモートブランチを用意する方法</title><link href="https://blog.mothule.com/tools/git/tools-git-empty-commit" rel="alternate" type="text/html" title="Gitで先にPRやリモートブランチを用意する方法" /><published>2020-02-03T00:00:00+09:00</published><updated>2020-02-03T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/git/tools-git-empty-commit</id><content type="html" xml:base="https://blog.mothule.com/tools/git/tools-git-empty-commit">&lt;p&gt;Gitで事前にPRやリモートブランチを用意する方法についてメモしました。&lt;/p&gt;

&lt;p&gt;ニーズは少ないと感じる人もいるかもしれませんが、少し規模が大きかったり、チームメンバーが多かったりすると使う機会は増えてきます。&lt;/p&gt;

&lt;h2 id=&quot;どんなときに役立つか&quot;&gt;どんなときに役立つか&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;ブランチや&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;ブランチをリリースのため凍結中は、それらにマージできませんよね。
その状態だと次バージョン対応で、Aさん対応済みAブランチ待ちのBさん対応中Bブランチがあったら作業を進められません。Bさんは作業を進められません。
その場合は事前に集約ブランチを用意しておき、ここを作業ブランチとして扱えば、AブランチとBブランチをマージできるので、Bさんは作業を進められます。&lt;/p&gt;

&lt;p&gt;このとき、集約ブランチは空コミットでリモートブランチを用意しなければなりません。&lt;br /&gt;
GitHub上であれば作成できますが、集約ブランチのPRも用意となるとコミット差がないためPRは作成できませんね。&lt;/p&gt;

&lt;p&gt;そんなときに役に立つのが空コミットです。&lt;/p&gt;

&lt;p&gt;ローカルでブランチを作成、空コミット、プッシュとすればリモートブランチが作成されますし、
PRも作成することができます。&lt;/p&gt;

&lt;h2 id=&quot;やり方&quot;&gt;やり方&lt;/h2&gt;

&lt;p&gt;コミットコマンドに &lt;code class=&quot;highlighter-rouge&quot;&gt;--allo-empty&lt;/code&gt; オプションをつけるだけです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;--allow-empty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;コメント&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="git" /><category term="github" /><summary type="html">Gitで事前にPRやリモートブランチを用意する方法についてメモしました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-03-tools-git-empty-commit.png" /></entry><entry><title type="html">記事タイトルの入ったTwitterサマリーカード用画像を生成できるスクリプトを作った</title><link href="https://blog.mothule.com/ruby/ruby-create-kiji" rel="alternate" type="text/html" title="記事タイトルの入ったTwitterサマリーカード用画像を生成できるスクリプトを作った" /><published>2020-02-02T00:00:00+09:00</published><updated>2020-02-02T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/ruby-create-kiji</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-create-kiji">&lt;p&gt;こないだ&lt;a href=&quot;https://twitter.com/mothule/status/1215116021805117440&quot;&gt;Twitter&lt;/a&gt;でもつぶやいたのですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-02-ruby-create-kiji/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-02-ruby-create-kiji/1.png&quot; width=&quot;75%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近Qiitaやはてブロの記事をTwitterで見かけると、次のような記事タイトルが画像に組み込まれたTwitterサマリーカードを見かけます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-02-ruby-create-kiji/0.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-02-ruby-create-kiji/0.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これこのブログでも使えたら便利だなーと思って、今回作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mothule/kiji&quot;&gt;mothule/kiji - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter(鳥)の記事(雉)用画像を生成ってことで、ネーミングは適当です。&lt;br /&gt;
ロゴ画像はそれこそ適当の塊です…&lt;/p&gt;

&lt;h2 id=&quot;ざっくりフロー考える&quot;&gt;ざっくりフロー考える&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;テンプレエンジンにかませるhtmlの骨組みを用意&lt;/li&gt;
  &lt;li&gt;骨組みに介入したい要素をセットしhtml生成&lt;/li&gt;
  &lt;li&gt;生成したhtmlを描画エンジンのヘッドレスで描画&lt;/li&gt;
  &lt;li&gt;それをキャプチャして外部ファイル化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という流れで当初考えてました。
言語はRubyを使うことは決めてました。&lt;/p&gt;

&lt;p&gt;1~2はRubyのERBを使えば簡単です。&lt;br /&gt;
3については何を使うのか少し調べる必要があるなと思い調べていたら。&lt;br /&gt;
&lt;a href=&quot;https://wkhtmltopdf.org/&quot;&gt;wkhtmltoimage&lt;/a&gt;というツールがあることが分かりました。&lt;br /&gt;
これをrubyで使えるgemとして&lt;a href=&quot;https://github.com/csquared/IMGKit&quot;&gt;IMGKit&lt;/a&gt;があります。&lt;/p&gt;

&lt;h2 id=&quot;も少し具体的なフローを考える&quot;&gt;も少し具体的なフローを考える&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;erbなhtml/cssで骨組み&lt;/li&gt;
  &lt;li&gt;html から image の変換は wkhtmltoimage をRubyで使えるIMGKit gemを使う&lt;/li&gt;
  &lt;li&gt;RubyからERBを介して記事タイトルを流し込んでhtml生成&lt;/li&gt;
  &lt;li&gt;IMGKit gemに流し込む&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という感じになります。&lt;/p&gt;

&lt;h2 id=&quot;躓いたところ&quot;&gt;躓いたところ&lt;/h2&gt;

&lt;p&gt;IMGKit gem など先人のお陰もあり、躓きは少なかったです。&lt;br /&gt;
ただ1つだけ大きく躓いた部分があり、ツールの実装の8割はこの部分で費やしてます。&lt;/p&gt;

&lt;h3 id=&quot;描画エンジンの仕様に依存する&quot;&gt;描画エンジンの仕様に依存する&lt;/h3&gt;
&lt;p&gt;wkhtmltoimage はhtml描画エンジンhtmlの描画結果をキャプチャしてます。&lt;br /&gt;
自分が当初考えてたざっくりフローと同じですね。&lt;/p&gt;

&lt;p&gt;で、そのエンジンにはQtWebKitが使われています。
そのためレンダリング結果はQtWebKitの描画仕様に準拠します。&lt;/p&gt;

&lt;p&gt;ChromeやSafariでは想定通りの挙動でも、QtWebKitでは表示されないなどありました。
なので実装や使ってるgem自体の躓きというよりは、QtWebKitの仕様との戦いでした。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今後はブログで画像指定しない場合は、このスクリプトを使っていこうかと思います。&lt;/p&gt;

&lt;p&gt;gem化などは考えていません。しかし、使っていくうちに改良するとは思うので、&lt;br /&gt;
その蓄積で充実してきたらgem化するかもしれません。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="kiji" /><summary type="html">こないだTwitterでもつぶやいたのですが、</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-02-ruby-create-kiji/2.png" /></entry><entry><title type="html">Google Analyticsで自分のサイトを分析して分かったこと</title><link href="https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site" rel="alternate" type="text/html" title="Google Analyticsで自分のサイトを分析して分かったこと" /><published>2020-02-01T00:00:00+09:00</published><updated>2020-02-01T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site</id><content type="html" xml:base="https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site">&lt;p&gt;Google Analytics(以下GA)を使ってサイト分析は一般的なサイト運営です。&lt;/p&gt;

&lt;p&gt;普段アクセス数やアクセス数の多いページ一覧しか見てなかったのですが、&lt;br /&gt;
今回ちょっと分析結果から仮説を立てるまでをまとめてみました。&lt;/p&gt;

&lt;p&gt;GAを使った分析がいまいち分からない人向け。&lt;/p&gt;

&lt;h2 id=&quot;まずはグラフを見る&quot;&gt;まずはグラフを見る&lt;/h2&gt;

&lt;h3 id=&quot;dauのチャート&quot;&gt;DAUのチャート&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/dau.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/dau.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;変化を見る&quot;&gt;変化を見る&lt;/h4&gt;
&lt;p&gt;チャートでは変化を見ましょう。
大きく変化してる部分や、全体としてのなだらかの変化率を見るの2つの観点で見てみましょう。&lt;/p&gt;

&lt;p&gt;ちなみにこの図だと、
ガクンと落ちてる部分は全て &lt;strong&gt;「土日」&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;技術ブログなので、土日はみんな技術系の調べ物はせず、リフレッシュしてるのでしょうか。&lt;/p&gt;

&lt;h3 id=&quot;トラフィック&quot;&gt;トラフィック&lt;/h3&gt;

&lt;p&gt;どうやってこのサイトに到達したのかが分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/trafic.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/trafic.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;流入元を調べる&quot;&gt;流入元を調べる&lt;/h4&gt;
&lt;p&gt;どこからやってきたのかここで調べましょう。
SNSであればTwitterやFacebook、他サイトとしてQiitaなどの流入もあります。&lt;/p&gt;

&lt;p&gt;このサイトは、ほぼ全部オーガニックつまりGoogle検索で辿り着いてます。&lt;/p&gt;

&lt;h3 id=&quot;時間帯別ユーザーアクセス&quot;&gt;時間帯別ユーザーアクセス&lt;/h3&gt;

&lt;p&gt;ユーザーがこのサイトにアクセスしてくる時間帯が分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/users-each-times.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/users-each-times.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;変化を見る-1&quot;&gt;変化を見る&lt;/h4&gt;
&lt;p&gt;集合といった塊や変化してる部分を見ましょう。&lt;/p&gt;

&lt;p&gt;ちなみにこの図だと、
平日9時から20時に主なアクセス時間帯のようです。&lt;/p&gt;

&lt;p&gt;つまり社会人であれば業務中ですね。&lt;br /&gt;
前述したDAUも考慮すると &lt;strong&gt;業務中でしか使われていないサイト&lt;/strong&gt; のようです。&lt;/p&gt;

&lt;h3 id=&quot;アクセスランキングと直帰率と離脱率&quot;&gt;アクセスランキングと直帰率と離脱率&lt;/h3&gt;

&lt;p&gt;2ヶ月間のアクセスランキングとそれらの直帰率と離脱率です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/access-page-rank-bounce-rate.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/access-page-rank-bounce-rate.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;記事の属性や数字を見る&quot;&gt;記事の属性や数字を見る&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;初心者向け記事が目立ちます。&lt;/li&gt;
  &lt;li&gt;直帰率が非常に高いです。&lt;/li&gt;
  &lt;li&gt;離脱率も一部非常に高いです。&lt;/li&gt;
  &lt;li&gt;ページ滞在時間が長いので欲しい情報に到達してると思って良さそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ここにはない情報がある&quot;&gt;ここにはない情報がある&lt;/h4&gt;

&lt;p&gt;それは記事の構成と記事比率です。
「初心者向け」と「iOS」の記事が多く、それら記事内で構造化されていれば、SEO評価が上がります。&lt;/p&gt;

&lt;p&gt;例えばCarthageに関する記事は1つしかないので、直帰率や離脱率が高いのでしょう。&lt;br /&gt;
違う目線で見れば、これ1つでユーザーにとって有能な記事とも見れます。&lt;/p&gt;

&lt;h4 id=&quot;用語の意味&quot;&gt;用語の意味&lt;/h4&gt;

&lt;p&gt;直帰率とは1セッションにおいてそのページ以外にアクセスせず離脱すること。&lt;br /&gt;
離脱率とはそのページを最後にセッションを終了すること。&lt;br /&gt;
セッション終了とは簡単な話ブラウザを閉じること。&lt;/p&gt;

&lt;p&gt;厳密には最後のアクセスから30分以上経過などあります。これはGAの定義の話なので他分析ツールでは異なってきます。&lt;br /&gt;
GAについては&lt;a href=&quot;https://support.google.com/analytics/answer/2731565?hl=ja&quot;&gt;アナリティクスでのウェブ セッションの算出方法&lt;/a&gt;をどうぞ。&lt;/p&gt;

&lt;h2 id=&quot;仮説を立てる&quot;&gt;仮説を立てる&lt;/h2&gt;

&lt;p&gt;掲載したチャートや表、感想から考えて、
「ユーザーは業務中の初学者か？」と仮説が立ちます。&lt;br /&gt;
おおむね「業務中で分からないことをググって解決して、分かったら閉じる。」がユーザーシナリオが想像できます。&lt;br /&gt;
直帰率が高いのがそれを後押ししてます。
また次のリテンションも後押ししてます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/retension.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/retension.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;仮説から課題を立てる&quot;&gt;仮説から課題を立てる&lt;/h2&gt;

&lt;p&gt;仮説が立ったら今度は課題です。仮説を事実だと捉えて考えてみます.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;このサイトは回遊率が低いです。 もっといろんな記事を見て直帰率とセッション時間をあげたいですね。&lt;/li&gt;
  &lt;li&gt;意図通りか別として、ユーザーの技術力が低いです。初学者以外にもアクセスされて欲しいですね。&lt;/li&gt;
  &lt;li&gt;業務中でしか使われていません。もっとプライベートな時間帯にもアクセスが欲しいですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;課題に対する分析や対策を考える&quot;&gt;課題に対する分析や対策を考える&lt;/h2&gt;

&lt;p&gt;課題が見えたら今度はそれらのいろんな角度から見たり、見えてきた原因の解決策を考えてみます。&lt;/p&gt;

&lt;h3 id=&quot;直帰率が高いのはそれ以外に欲しい情報がない&quot;&gt;直帰率が高いのはそれ以外に欲しい情報がない&lt;/h3&gt;
&lt;p&gt;ユーザーシナリオから鑑みて、直帰率が高すぎるのは、欲しい情報が手に入ったことで、ユーザーニーズが終了してるのも事実です。&lt;br /&gt;
しかしユーザーは無意識でも「刺さる情報を提供できていない」とも言えます。&lt;/p&gt;

&lt;h3 id=&quot;刺さる情報とはユーザー属性から出す&quot;&gt;刺さる情報とはユーザー属性から出す&lt;/h3&gt;
&lt;p&gt;ユーザーが初学者であれば、初学者に刺さるような情報があればいいわけです。&lt;br /&gt;
またiOS記事であれば、他の刺さるようなiOS記事があるといいかもしれません。
プライベートな時間帯を狙うなら、技術NEWS系の記事もあるとアンテナはってる人たちに見てもらえる可能性があります。&lt;/p&gt;

&lt;h3 id=&quot;初学者以外のユーザー属性に刺さる記事がない&quot;&gt;初学者以外のユーザー属性に刺さる記事がない&lt;/h3&gt;
&lt;p&gt;事実として初学者以外に向けた記事数は少ないですし、それらを構造化もあまり出来ていません。&lt;br /&gt;
初学者以外を狙うとなると、大掛かりな行動となりそうです。&lt;/p&gt;

&lt;h2 id=&quot;アクションを立てる&quot;&gt;アクションを立てる&lt;/h2&gt;

&lt;p&gt;対策から具体的な行動に移せる粒度に落とし込みます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ページ内の関連記事の精度を上げる&lt;/li&gt;
  &lt;li&gt;技術NEWSの考察した記事を蓄積する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;アクションを判断する&quot;&gt;アクションを判断する&lt;/h2&gt;

&lt;p&gt;関連記事の精度を上げることで、閲覧中記事と同じ属性を持つ記事をユーザーに提供すれば、&lt;br /&gt;
ユーザーは同様に興味を持つかも知れないですね。&lt;/p&gt;

&lt;p&gt;技術NEWSの考察は、サイト方針とは異なる情報となるため、今回は却下となります。&lt;/p&gt;

&lt;h2 id=&quot;分析してみて&quot;&gt;分析してみて&lt;/h2&gt;
&lt;p&gt;優先順位の判断材料となります。&lt;/p&gt;

&lt;p&gt;やることはたくさんある中で少ない時間の中で、何を選択し集中することでコスパよく効果を出さないといけません。
そんな状況下では、優先順位付けに悩みます。&lt;/p&gt;

&lt;p&gt;これを繰り返すことでOODAをループさせます。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="google-analytics" /><summary type="html">Google Analytics(以下GA)を使ってサイト分析は一般的なサイト運営です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-01-tools-google-analytics-my-site/0.png" /></entry><entry><title type="html">Rails以外でBundlerを使う方法</title><link href="https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails" rel="alternate" type="text/html" title="Rails以外でBundlerを使う方法" /><published>2020-02-01T00:00:00+09:00</published><updated>2020-02-01T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails</id><content type="html" xml:base="https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails">&lt;p&gt;仕事柄バックエンドはRailsでフロントエンドのエコシステムではRubyベースのツールもあり、
なるべく自前スクリプトでもRubyで書くようにしてます。&lt;/p&gt;

&lt;p&gt;だけど毎度Railsを使わずBundlerを使う場合に一部躓くのでメモとしてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;段取り&quot;&gt;段取り&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;スクリプトで使うバージョン指定&lt;/li&gt;
  &lt;li&gt;(Option)bundlerインストール&lt;/li&gt;
  &lt;li&gt;Gemfile用意&lt;/li&gt;
  &lt;li&gt;bundle install&lt;/li&gt;
  &lt;li&gt;スクリプトでbundle内gemをrequire&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rails外で使う上で特別必要な処理って最後の項目だけなので、
そこだけ知りたい人はざざっと一番下へどうぞ。&lt;/p&gt;

&lt;h2 id=&quot;スクリプトで使うバージョン指定&quot;&gt;スクリプトで使うバージョン指定&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby version]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optionbundlerインストール&quot;&gt;(Option)bundlerインストール&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;バージョン指定する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;-v &quot;[bundler version]&quot;&lt;/code&gt;を入れます。&lt;br /&gt;
最新でいいなら指定不要です。&lt;/p&gt;

&lt;h2 id=&quot;gemfile用意&quot;&gt;Gemfile用意&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gemfileが作成されるので、中に必要なgemを追加します。&lt;/p&gt;

&lt;h2 id=&quot;bundle-install&quot;&gt;bundle install&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gemfileで指定されたgemsをインストールします。&lt;/p&gt;

&lt;h2 id=&quot;スクリプト内でbundle内gemをrequire&quot;&gt;スクリプト内でbundle内gemをrequire&lt;/h2&gt;

&lt;p&gt;エントリーファイルが &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rb&lt;/code&gt; であれば, &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rb&lt;/code&gt; の頭に&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と書きます。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="bundler" /><summary type="html">仕事柄バックエンドはRailsでフロントエンドのエコシステムではRubyベースのツールもあり、 なるべく自前スクリプトでもRubyで書くようにしてます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-01-ruby-use-bundler-outside-of-rails.png" /></entry><entry><title type="html">Gemで指定バージョンをインストール</title><link href="https://blog.mothule.com/ruby/gem/ruby-gem-specify-version" rel="alternate" type="text/html" title="Gemで指定バージョンをインストール" /><published>2020-01-29T00:00:00+09:00</published><updated>2020-01-29T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/gem/ruby-gem-specify-version</id><content type="html" xml:base="https://blog.mothule.com/ruby/gem/ruby-gem-specify-version">&lt;p&gt;Rubyのバージョンが上がるたび、そのバージョンのgemsをインストールします。
BundlerだとGemfile.lockの指定されたバージョンでインストールします。&lt;/p&gt;

&lt;p&gt;たまにしか使わない、でも絶対知っていないといけないGemで指定バージョンをインストールについてメモしておきます。&lt;/p&gt;

&lt;h2 id=&quot;構文&quot;&gt;構文&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;gem name] &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bundlerの場合&quot;&gt;Bundlerの場合&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.2&lt;/code&gt;をインストールする場合&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="gem" /><summary type="html">Rubyのバージョンが上がるたび、そのバージョンのgemsをインストールします。 BundlerだとGemfile.lockの指定されたバージョンでインストールします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-29-ruby-gem-specify-version.png" /></entry><entry><title type="html">リモートワーク4年目間近で落ちた穴</title><link href="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work" rel="alternate" type="text/html" title="リモートワーク4年目間近で落ちた穴" /><published>2020-01-11T00:00:00+09:00</published><updated>2020-01-11T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work">&lt;p&gt;フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。&lt;/p&gt;

&lt;p&gt;しかし今回自分が遭遇した問題は、今後のリモートワークにおいてどの会社でも共通して発生する問題だなと思いました。
この問題の原因や何故起きてしまったのか？どうやったら回避や解決ができるのか？についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;テキストコミュニケーションは信頼関係でカバーしてる&quot;&gt;テキストコミュニケーションは信頼関係でカバーしてる&lt;/h2&gt;
&lt;p&gt;フルリモートワークでは、互いの顔は見えずメインコミュニケーション手段としてslackなどのテキスト会話が主な手段です。
zoomやslack callなどビデオチャットも使いますが、常に繋がっているという環境ではありません。
主に会議体ではビデオチャット、それ以外ではテキストチャットに二分します。&lt;/p&gt;

&lt;p&gt;そうなると、非言語コミュニケーションもできない、インタラクティブ性の低いテキストコミュニケーションでは、
入力/出力は全て文字の一択となり、次のような問題が起きます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前提知識の違いからくる齟齬&lt;/li&gt;
  &lt;li&gt;文字の読み間違えからくる齟齬&lt;/li&gt;
  &lt;li&gt;知識差からくる長文または短文&lt;/li&gt;
  &lt;li&gt;全員知識ないことで起きる混乱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは全て議論への根気負けが原因です。途中で理解する姿勢がなくなったらその時点で議論は成り立ちません。
話す側は相手の気持ちや知識差を意識して、
聞く側は相手が何を言おうとしてるのか意識して
両者が相手を尊重、理解する姿勢が整うことは必須条件です。&lt;/p&gt;

&lt;p&gt;しかし今回起きた問題は、これらが限界を超えた結果、その際にどうすることもできないことに気づきました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きたのか&quot;&gt;何が起きたのか？&lt;/h2&gt;

&lt;p&gt;会社要因でメンタルがきついときに解決する術がないと、どうすることもできず詰んでしまいます。
プライベートに重きを置く人で仕事に深入りしないタイプであれば、あまり問題視することではありません。
しかし、会社やサービスを良くしようと頑張るタイプであれば、避けることできない葛藤を解決することになります。
サービスを良くしようという意思が強ければ強いほど、逃げたくても逃げようがありません。&lt;/p&gt;

&lt;h2 id=&quot;何が原因か&quot;&gt;何が原因か？&lt;/h2&gt;

&lt;p&gt;これはメンタルがきつくなったこと自体の原因ではなく、なぜそれが落とし穴だと思ったかなについて書いてます。&lt;/p&gt;

&lt;p&gt;リモーワークではちょっとした雑談も全部誰もが見れる状況となります、そのため大振りふった雑談やちょっとした愚痴などは書くことで、それを良しとしない人が見るとそれは会社にとって迷惑行為となりかねません。&lt;/p&gt;

&lt;p&gt;しかし人は仕事会話だけで連携が成り立つほど単純ではありません。
ちょっとした人間性や趣味や価値観といった背景を知ることでその人に話しかけやすくなったり、無理なお願いをしやすくなったり、反対に無理なお願いをしないように気をつけたりして、お互いに支え合った行動ができるようになります。&lt;/p&gt;

&lt;p&gt;雑談はやりすぎは害ですが、ほどよく使うことでストレス発散や互いの信頼関係に強い効果を発揮します。
人によっては本当に仕事会話だけで成り立つ人もいますが、全員が全員そうでもありません。&lt;/p&gt;

&lt;p&gt;人それぞれ適切な雑談量は存在します。&lt;/p&gt;

&lt;p&gt;その雑談をする、相談する、愚痴相手になってもらうといった寄り添う行為がリモートワークでは存在しにくいです。
なぜならまずメンタルが落ちてるのに気づかないからです。
オフィスでは反応が変だったり、頭抱えてる状態が続いてたりと、非言語のアウトプットが無自覚ににじみ出てることで、他の人が気づいて同僚が気を使って話しかけたり、上司が相談に乗ることもあると思います。&lt;/p&gt;

&lt;p&gt;しかしテキストコミュニケーションでは、前述したように手段はテキストだけのため、自分でそれを出す必要があります。
また加えて上司が見える場所でそれをする、もしくは上司に直接相談するなど、明確な行動として動き出す必要があります。
LINEの既読のように上司が見たと分かるのであればまだ分かりやすいですが、slackではその様な機能はありません。&lt;/p&gt;

&lt;p&gt;つまり、通常時は問題ないが、不安定時に支え合う仕組みやきっかけが存在しません。
今回私は、その穴にハマってしまい苦労しました。&lt;/p&gt;

&lt;h2 id=&quot;どうやれば解決できるか&quot;&gt;どうやれば解決できるか？&lt;/h2&gt;

&lt;p&gt;部下の働ける環境や生産性を維持、向上するのは上司の役目の一つです。
上司からのレポートライン同様、上司への報告など上司が気づく仕組みづくりが必要です。&lt;/p&gt;

&lt;p&gt;また本当の雑談の場というのは必要です。それが定例となると無駄な会議体となりなくなることは明白です。
なので通常のslack上で互いに話しやすい支えやすい信頼関係は複数人必要です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-11-pitfall-of-remote-work.jpg" /></entry><entry><title type="html">GitHubのConfirm your account recovery settingsについて</title><link href="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings" rel="alternate" type="text/html" title="GitHubのConfirm your account recovery settingsについて" /><published>2020-01-05T00:00:00+09:00</published><updated>2020-01-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings</id><content type="html" xml:base="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings">&lt;p&gt;近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。&lt;br /&gt;
特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。&lt;br /&gt;
実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。&lt;/p&gt;

&lt;p&gt;加えて近年のサービスではアクセストークンを第三者へ渡すことで外部からサービスアクセスができる連携機能も重要なエコシステムとなっています。&lt;br /&gt;
しかしリスクとしては個人とサービスだけでなくその第三者がセキュリティ意識が低いことで漏洩リスクが高まります。&lt;/p&gt;

&lt;p&gt;今回はGitHubでよく出てくる「Confirm your account recovery settings」画面について1つずつ確認したのでそれを説明します。&lt;/p&gt;

&lt;h2 id=&quot;confirm-your-account-recovery-settings-画面とは&quot;&gt;Confirm your account recovery settings 画面とは？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面のことです。GitHubにアクセスしたとき一定の期間毎に表示されるようで、&lt;br /&gt;
見かける方はセキュリティ対策が不十分である可能性があります。&lt;/p&gt;

&lt;h2 id=&quot;two-factor-methods-とは&quot;&gt;Two-factor methods とは？&lt;/h2&gt;

&lt;p&gt;Two-factorとは2要素認証のことで通称2FA(Two-factor Authentication)と呼ばれています。&lt;br /&gt;
自身の知っている知識情報だけでなく、自身の所有物を使ったり、自分自身の身体的特徴などを2つの認証要素で認証することを言います。&lt;/p&gt;

&lt;p&gt;GitHubではAuthenticator app(認証アプリ)、Security keys(物理キー)、SMS number(スマホのSMSメール)の3種類の手段が用意されています。
注意点としては2FA後にブラウザを許可し2FAをスキップする設定もありますので、許可すると所有認証となる物だけでなくでなくPCをロストするとリスクが拡大します。&lt;/p&gt;

&lt;h3 id=&quot;authenticator-app&quot;&gt;Authenticator app&lt;/h3&gt;

&lt;p&gt;スマホやPCアプリによる認証コードを出してくれるアプリです。&lt;br /&gt;
メール認証後にこのアプリを使って表示されている認証コードを使って認証します。
認証コードは一定時間毎に入れ替わります。&lt;/p&gt;

&lt;p&gt;これにより悪意ある第三者が自分のメール認証のメアドとパスワードを入手しても、私が所有しているスマホを入手しない限りログインできません。&lt;/p&gt;

&lt;h4 id=&quot;対応アプリは色々ある&quot;&gt;対応アプリは色々ある&lt;/h4&gt;

&lt;p&gt;私はAuthyというアプリを使ってます。
MacではAuthy DesktopというPCアプリもあり数年使っていますが今の所そこまで不便に感じずに使ってます。&lt;/p&gt;

&lt;p&gt;たまにアプリを立ち上げるとAuthy自体に設定したパスワードを求められるので、少しだけ2段階認証となっております。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/jp/app/authy/id494168017&quot;&gt;Authy - App Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.authy.authy&amp;amp;hl=ja&quot;&gt;Authy - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-keys&quot;&gt;Security keys&lt;/h3&gt;

&lt;p&gt;ハードウェアのセキュリティキーのことで、実在する物理のキーになります。
有名な物だとYubiKeyなどでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=21079b265ff170d8eb1d0caabfcdd878&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00LX8KZZ8&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B00LX8KZZ8&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;YubiKey&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=mothule05-22&amp;amp;linkId=b95d217be6ebdea044d92e29a3d8d2ba&amp;amp;language=ja_JP&quot;&gt;Amazonで開く&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これも前述したAuthenticator app同様に所有認証となり、悪意ある第三者がメール認証のメアドとパスワードを得ても、このセキュリティキーで認証しなければログインできません。&lt;/p&gt;

&lt;h3 id=&quot;sms-number&quot;&gt;SMS number&lt;/h3&gt;

&lt;p&gt;SMS番号とは電話番号へのSMSメッセージを使って認証コードを送ってくれる方法で、得た認証コードを入力することで認証します。&lt;br /&gt;
これも他同様に電話番号が紐付いた端末を保持しているということで所有認証の部類に入ります。&lt;/p&gt;

&lt;h2 id=&quot;recovery-options-とは&quot;&gt;Recovery options とは？&lt;/h2&gt;

&lt;p&gt;Recovery options とは万が一上記の認証手段を失ってしまった場合に、回復する手段のことをいいます。&lt;/p&gt;

&lt;p&gt;GitHubではRecovery codes(乱数群)、Fallback SMS number(別スマホのSMSメール)、Recovery tokens（回復用乱数羅列）の3種類が用意されています。&lt;/p&gt;

&lt;p&gt;セキュリティと直結はしにくいですが、2FAでセキュリティを上げることで認証手段が複数個になるわけですから、同様にその認証手段をロストするリスクも向上します。&lt;/p&gt;

&lt;p&gt;セキュリティを堅牢にしても自分がアクセスできなくなっては意味がありません。&lt;/p&gt;

&lt;h3 id=&quot;recovery-codes&quot;&gt;Recovery codes&lt;/h3&gt;

&lt;p&gt;Recovery codes とは回復用に予め受け取っておいたコード一覧のことです。&lt;br /&gt;
ログイン済みでRecovery codesを取得し、保存しておくことで、何らかの理由でGitHubにアクセスできなくなったときにこのコードのいずれか１つを使ってアクセスします。&lt;br /&gt;
このコードを紙に印刷して完全にデジタルから隔離しておいたり、スマホなど別端末で管理になると思います。&lt;br /&gt;
それぞれ一長一短ありますので、自分で万が一に備えておきましょう。&lt;/p&gt;

&lt;h3 id=&quot;fallback-sms-number&quot;&gt;Fallback SMS number&lt;/h3&gt;

&lt;p&gt;2FAで設定したSMS番号とは別のSMS番号に認証コードを送信できるようになります。&lt;br /&gt;
スマホのロストはもっとも確率が高いので、2FAでAuthenticator appsやSMS numberを使っていて、Recovery codesをスマホに保存している場合は、ここを設定しておいたほうが安心です。&lt;/p&gt;

&lt;h3 id=&quot;recovery-tokens&quot;&gt;Recovery tokens&lt;/h3&gt;

&lt;p&gt;Facebookアカウントを使用した回復手段です。&lt;br /&gt;
Facebookアカウントと連携しておくことで万が一アクセス手段をロストしてもFacebookアカウントにログインできれば回復できます。&lt;/p&gt;

&lt;h2 id=&quot;2faは絶対やろう&quot;&gt;2FAは絶対やろう&lt;/h2&gt;

&lt;p&gt;2FAは絶対にやりましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;様々なサービスを使っている&lt;/li&gt;
  &lt;li&gt;他サービスと同じパスワードを使いまわしている&lt;/li&gt;
  &lt;li&gt;フリーWiFiや自分の所有物でない端末でログインする機会がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いずれ1つでも当てはまる人は、既に射程距離に入っています。&lt;/p&gt;

&lt;h3 id=&quot;大手サービスだから大丈夫&quot;&gt;「大手サービスだから大丈夫」&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;所属経験上、大手だからといって安心ではない&lt;/li&gt;
  &lt;li&gt;セキュリティ考慮が予算から外れやすい現実&lt;/li&gt;
  &lt;li&gt;大手ほどエンジニアは外注でセキュリティなど完全に予算外&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;漏洩のニュースが流れていなくても情報は外部に漏れている&quot;&gt;漏洩のニュースが流れていなくても情報は外部に漏れている&lt;/h3&gt;

&lt;p&gt;私自身の経験ですが、過去に使っていたパスワードで、そのパスワードを使ってた対象サービスの漏洩ニュースがなかったにも関わらず、&lt;br /&gt;
メール認証で使ってたメールアドレスに対して、「お前のパスワードこれだろ？悪用されたくなかったらビットコインで金よこせ」といわゆる人質メールが来ました。&lt;br /&gt;
しかも提示されていたパスワードは実際に昔使ってたものでした。&lt;/p&gt;

&lt;p&gt;偶然にも私はパスワードは違う形に変えていたことで、有名どころのサービスやクレカを登録してるサービスは異なるパスワードでしたが、もしこれが同じパスワードでしたら&lt;br /&gt;
完全個人情報やクレジットカード情報など、生活におけるほぼ全部の情報が漏洩しているところでした。&lt;/p&gt;

&lt;p&gt;つまり GitHubがどんなに堅牢でも、パスワードが同じだと、他サービスがやられたら堂々と不正ログインされます。&lt;/p&gt;

&lt;p&gt;自分の人生を他人に信託できるのならどうぞご勝手に。&lt;br /&gt;
私はこれ以降全ての登録サービスを一元管理し、パスワードは長文乱数化、2FAあるなら対応し、不要なサービスはパスワードは複雑化し退会しています。&lt;/p&gt;

&lt;h2 id=&quot;人はミスをする生き物&quot;&gt;人はミスをする生き物&lt;/h2&gt;

&lt;p&gt;2FAをしているから万全というわけではありません。会社に迷惑はかからないのでその点は安心なのですが、&lt;br /&gt;
自分の過去の資産にアクセスできないのはそれはそれで手痛いです。&lt;br /&gt;
2FAに必要な認証要素を失ったら自分すらもアクセスできなくなります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authenticator app&lt;/li&gt;
  &lt;li&gt;Security keys&lt;/li&gt;
  &lt;li&gt;SMS number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これら3つ対応していても、PC担いで通勤中に交通事故に遭ってPCもスマホも物理キーも壊れたら終わりです。&lt;br /&gt;
命助かっても助かった気がしません。&lt;/p&gt;

&lt;p&gt;自宅が火事になればもろとも吹き飛びます。&lt;/p&gt;

&lt;p&gt;泥棒に盗まれても同じです。&lt;/p&gt;

&lt;p&gt;日常に潜む確率の低いリスクにわざわざ巻き込まれやすくする理由はないので、Recovery optionsは確実に残しておきましょう。&lt;/p&gt;

&lt;p&gt;これは普段の利便性が下がるものでもなく緊急時に使うものなので、やっておいて何一つ損はないです。&lt;/p&gt;

&lt;h2 id=&quot;本業に集中するための保険だと思うこと&quot;&gt;本業に集中するための保険だと思うこと&lt;/h2&gt;
&lt;p&gt;セキュリティは利便性の反比例になるため、堅牢にするほどGitHubの利便性は下がるのは避けられません。&lt;/p&gt;

&lt;p&gt;しかし、その利便性を重視しすぎることによって、漏洩やアカウント乗っ取りリスクは影を潜めていても確実にそこにいます。&lt;/p&gt;

&lt;p&gt;そのリスクを自分のミスで受けると個人であれば不正利用による信用失墜や巨額の請求が来たり、会社であれば所属会社からの雇用契約書の契約違反による甲側の一方的な解雇と場合によっては損害賠償請求がありえます。&lt;/p&gt;

&lt;p&gt;フリーランスや副業の方による業務委託契約であれば、契約書の契約違反となり損害賠償の話になります。&lt;/p&gt;

&lt;p&gt;自分が守るべき責務を守らないことで得られるものに対して、確率的に低くとも受けるリスクと比べると&lt;strong&gt;「そこまでして欲しい利便性か？」&lt;/strong&gt; と一度己に説いてみるのも重要です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="github" /><summary type="html">近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。 特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。 実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/0.png" /></entry><entry><title type="html">secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する</title><link href="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard" rel="alternate" type="text/html" title="secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する" /><published>2019-12-16T00:00:00+09:00</published><updated>2019-12-16T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard</id><content type="html" xml:base="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard">&lt;p&gt;1つのPCで複数のプロジェクトをいじることはよくあるありますよね。&lt;br /&gt;
業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。&lt;/p&gt;

&lt;p&gt;今回はXcodeのSimulatorがそれで、その影響で「何もコード弄ってないのに失敗する」って現象が起きたのでそれの対処方について簡単にまとめました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きているのか&quot;&gt;何が起きているのか？&lt;/h2&gt;

&lt;p&gt;ローカル上にてXcodeのSimulator上でXCUITestを実行したところ、パスワード入力(secureTextFields)のタイピング(typeText)が反応せず失敗する。&lt;/p&gt;

&lt;h2 id=&quot;エラーメッセージ&quot;&gt;エラーメッセージ&lt;/h2&gt;

&lt;p&gt;抜粋ですが、残り部分はプロジェクト固有情報でノイズとなるため除去して最小限にしてあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to synthesize event: Neither element nor any descendant has keyboard focus. Event dispatch snapshot: SecureTextField, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内', value: 半角英数8文字以上20文字以内
Element debug description:
Attributes: SecureTextField, { {151.0, 284.0}, {254.0, 40.0} }, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;メッセージを読み解く&quot;&gt;メッセージを読み解く&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Neither element nor any descendant has keyboard focus.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Google翻訳にて「&lt;code class=&quot;highlighter-rouge&quot;&gt;要素も子孫もキーボードフォーカスを持ちません。&lt;/code&gt;」と言われてるこれがエラーメッセージです。&lt;/p&gt;

&lt;p&gt;コードでは下記のように一度タップしてフォーカスしたのち、キータイプを行っていますがあることが原因でフォーカスされていないようです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;フォーカスされていないとは、つまりキーボードが出ていないことを意味します。&lt;br /&gt;
本来ならフォーカスされればそれに対する入力としてキーボードが出現します。&lt;/p&gt;

&lt;p&gt;何らかの原因でキーボードがでなくなっているようです。&lt;/p&gt;

&lt;p&gt;また普段は成功しているし、CIでも問題なく動いています。しかしローカルでは失敗してしまいます。&lt;br /&gt;
つまり自分のPCに原因があることが推測できます。&lt;/p&gt;

&lt;h2 id=&quot;原因はconnect-hardware-keyboard&quot;&gt;原因はConnect Hardware Keyboard&lt;/h2&gt;

&lt;p&gt;シミュレーターではある設定が有効だと、secureTextFields.typeTextが失敗する不具合があります。&lt;br /&gt;
ここで不具合と言い切っているのは、通常のtextField.typeTextでは失敗しないためです。&lt;/p&gt;

&lt;p&gt;キーボードが出てこなくなる設定、それは &lt;strong&gt;Connect Hardware Keyboard&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これが有効だとキーボードウィンドウが表示されず、ハードキーボード（つまりmacなどのキー)を押すとシミュレーターのフォーカス中のテキストフィールドに入力されます。&lt;/p&gt;

&lt;p&gt;どうやらこれがsecureTextFieldsだとフォーカスしていないと判断され失敗していたようでした。&lt;/p&gt;

&lt;h2 id=&quot;connect-hardware-keyboardがoffでも失敗する場合&quot;&gt;Connect Hardware KeyboardがOFFでも失敗する場合&lt;/h2&gt;

&lt;p&gt;シミュレーターのConnect Hardware KeyboardはOFFになっているが失敗するケースがあります。&lt;br /&gt;
その場合は一度Connect Hardware KeyboardをONにしてからすぐにOFFにしてもう一度テストを試してみてください。&lt;/p&gt;

&lt;p&gt;ショートカットは shift+cmd+k なので２回押せばOFF→ON→OFFとすぐできます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="test" /><category term="xcuitest" /><summary type="html">1つのPCで複数のプロジェクトをいじることはよくあるありますよね。 業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/0.png" /></entry></feed>