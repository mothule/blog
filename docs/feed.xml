<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-08-07T03:55:48+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">Swiftの高階関数で遅延評価(lazy)を使い処理を効率化する</title><link href="https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection" rel="alternate" type="text/html" title="Swiftの高階関数で遅延評価(lazy)を使い処理を効率化する" /><published>2020-08-07T00:00:00+09:00</published><updated>2020-08-07T03:55:23+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-lazy-sequence-and-collection">&lt;p&gt;例えばlazyを使うと10万件のフルアクセス処理が1件で済みます。&lt;/p&gt;

&lt;h2 id=&quot;swiftの高階関数はその場でクロージャを評価する&quot;&gt;Swiftの高階関数はその場でクロージャを評価する&lt;/h2&gt;
&lt;p&gt;SwiftのCollectionなどで使える高階関数(filter, map, reduceなど)は、&lt;br /&gt;
関数が呼ばれたら、その場でクロージャが評価されます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Will call count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例えば上記コードを実行すると、コンソールには下記が出力されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toString(from:)
Will call count
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ケースによっては無駄な処理が生まれる&quot;&gt;ケースによっては無駄な処理が生まれる&lt;/h2&gt;

&lt;p&gt;例えば10万件に対しあるfilter処理した結果に対し&lt;strong&gt;isEmpty&lt;/strong&gt;を呼びたいケースはコードだとこうなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを高階関数を使わず書くとこうなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ①&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;isEmptyは1回でも条件満たせばいいので、それ以降のループ処理を走らせる必要がありません。&lt;br /&gt;
①の部分でisEmpty = falseの後にbreakでループを抜けるべきです。&lt;/p&gt;

&lt;h3 id=&quot;高負荷だと無駄が顕著に現れる&quot;&gt;高負荷だと無駄が顕著に現れる&lt;/h3&gt;

&lt;p&gt;例えば高階関数のクロージャが少し重かったとします。(0.001秒かかる)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合、最終的な結果を得るには、少なくとも100秒(0.001秒 × 10万件)かかります。&lt;/p&gt;

&lt;h2 id=&quot;lazy遅延評価を使う&quot;&gt;lazy(遅延評価)を使う&lt;/h2&gt;
&lt;p&gt;SwiftのSequenceやCollectionにはlazy機能があります。&lt;br /&gt;
これは実際の値が必要になるまで高階関数内クロージャを実行しません。&lt;br /&gt;
実際の値とは&lt;code class=&quot;highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt;などです。&lt;/p&gt;

&lt;h3 id=&quot;遅延を確認する&quot;&gt;遅延を確認する&lt;/h3&gt;

&lt;p&gt;lazyを使うには、高階関数を呼ぶ前に&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;メソッドを呼びます。&lt;br /&gt;
冒頭に説明したコードを使ってlazy化します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Will call count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行するとコンソールには下記が出力されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Will call count
toString(from:)
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;高階関数内で呼ばれている&lt;code class=&quot;highlighter-rouge&quot;&gt;toString(from:)&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;Will call count&lt;/code&gt;より後に来ています。&lt;/p&gt;

&lt;h3 id=&quot;効率化を確認する&quot;&gt;効率化を確認する&lt;/h3&gt;

&lt;p&gt;Swiftのlazyにはもう一つ特徴があります。&lt;br /&gt;
それは実際の値を必要としてるメソッドによって、高階関数のクロージャを中断することです。&lt;br /&gt;
例えば先程使った100秒かかるコードをlazy化してみます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行するとコンソールは下記を出力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;in filter
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;in filter&lt;/code&gt;が1回しか呼ばれていないです。
これは1回目のループで&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;になったことで&lt;code class=&quot;highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;の判断ができるようになったので処理を中断してます。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;isEmpty&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;にすると、lazyしてないコード同様に全てのループを実行します。&lt;br /&gt;
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;の結果を判断するには全部の処理を通さないと結果が分からないためです。&lt;/p&gt;

&lt;p&gt;つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;を使うことで途中で結果が得られたら中断し得られない場合は継続します。&lt;/p&gt;

&lt;h2 id=&quot;全部lazyというわけではない&quot;&gt;全部lazyというわけではない&lt;/h2&gt;
&lt;p&gt;とりあえず全部lazyにしとけば良いというものではありません。&lt;br /&gt;
lazyにすることで通常と比べ遅延用の仕組みが必要となるため内部処理が複雑となるため速度やメモリ負荷がその分かかります。&lt;/p&gt;

&lt;p&gt;またlazyは評価を遅らせます。遅延評価のデメリットが発生することを知る必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LazyCollectionやLazySequenceには用意されてない高階関数がある&lt;/li&gt;
  &lt;li&gt;呼出元と処理実行タイミングが異なるため、どこで実際の処理が走るのか読みにくくなる&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">例えばlazyを使うと10万件のフルアクセス処理が1件で済みます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-07-ios-swift-lazy-sequence-and-collection/0.png" /></entry><entry><title type="html">iOSアプリ開発のエコシステムを考えてみた</title><link href="https://blog.mothule.com/ios/swift/ios-swift-ecosystem-design" rel="alternate" type="text/html" title="iOSアプリ開発のエコシステムを考えてみた" /><published>2020-08-02T00:00:00+09:00</published><updated>2020-08-06T03:45:17+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-ecosystem-design</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-ecosystem-design">&lt;p&gt;iOSアプリ開発で開発の周辺環境いわゆるエコシステムについて、現状どうなってるか整理も踏まえて考えて見ました。&lt;/p&gt;

&lt;h2 id=&quot;この記事では説明しない部分&quot;&gt;この記事では説明しない部分&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;アーキテクチャパターンやログ機能などアプリの骨組みデザイン&lt;/li&gt;
  &lt;li&gt;ニッチ過ぎるサービスやツール&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;エコシステムをなすツールやサービス一覧&quot;&gt;エコシステムをなすツールやサービス一覧&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-08-02-ios-swift-ecosystem-design/ecosystem-design.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-08-02-ios-swift-ecosystem-design/ecosystem-design.png&quot; width=&quot;100%&quot; alt=&quot;ios-ecosystem-design&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上図は今回構築に使ったツールとその関係を階層構造で表した図です。&lt;/p&gt;

&lt;h3 id=&quot;framework管理&quot;&gt;Framework管理&lt;/h3&gt;

&lt;p&gt;frameworkの作成や管理をするツール群です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;&lt;a href=&quot;/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler&quot;&gt;CocoaPodsをrbenv+bundlerで管理する&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Carthage&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;&lt;a href=&quot;/ios/carthage/ios-carthage&quot;&gt;Carthageの使い方を体系的に理解する&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;説明は省きます。詳細は各リンク先を見てください。&lt;/p&gt;

&lt;h3 id=&quot;タスク管理&quot;&gt;タスク管理&lt;/h3&gt;

&lt;p&gt;ビルド、テスト、アーカイブなど開発における処理の作成・管理として&lt;strong&gt;Fastlane&lt;/strong&gt;を使います。&lt;/p&gt;

&lt;p&gt;Fastlaneでタスク管理することで、細かな手続きを一塊にして呼び出しを簡略化します。&lt;br /&gt;
またコマンドラインで呼び出せることでCIに乗せれたりもできます。&lt;br /&gt;
そして、CIサービスの中でFastlaneのタスクを呼ぶことでCIの種類に依存せず処理を管理できます。&lt;/p&gt;

&lt;h3 id=&quot;プロジェクト管理&quot;&gt;プロジェクト管理&lt;/h3&gt;

&lt;p&gt;Xcodeプロジェクトの管理として&lt;strong&gt;XcodeGen&lt;/strong&gt;を使います。&lt;br /&gt;
XcodeGenのメリットや使い方に関しては「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;
」で説明してます。&lt;/p&gt;

&lt;h3 id=&quot;静的解析ツール&quot;&gt;静的解析ツール&lt;/h3&gt;
&lt;p&gt;機械的にコード品質チェックを行うツールとして&lt;strong&gt;SwiftLint&lt;/strong&gt;を使います。&lt;/p&gt;

&lt;h3 id=&quot;管理ツール管理&quot;&gt;管理ツール管理&lt;/h3&gt;
&lt;p&gt;FastlaneやCocoaPodsなどを管理ツールのバージョンを管理するツール群です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;rbenv&lt;/strong&gt;&lt;br /&gt;
Rubyのバージョン管理ツール。&lt;br /&gt;
FastlaneやCocoaPods, bundlerなどRuby製ツールの言語バージョンを制御する。&lt;br /&gt;
これがないとグルーバルのRubyバージョンを使うことになり、もし別都合でバージョンアップして、そのバージョンが下位互換だった場合に動かなくなる。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bundler&lt;/strong&gt;&lt;br /&gt;
gemの一元管理gem。&lt;br /&gt;
FastlaneやCocoaPodsなどのRuby製ツールのツールバージョンを制御する。&lt;br /&gt;
これがないとグローバルのFastlaneやCocoaPodsを使うことになり、他プロジェクト都合のバージョンアップに影響受ける。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;パッケージ管理&quot;&gt;パッケージ管理&lt;/h3&gt;
&lt;p&gt;SwiftLintやCarthageなどのバージョンを管理するツール類です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Homebrew&lt;/strong&gt;&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/mac/homebrew/mac-homebrew-basic&quot;&gt;MacのHomebrewとは？仕組み・使い方と用語整理&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mint&lt;/strong&gt;
Mintを使うことでプロジェクト間のツールバージョンを疎結合にできます。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/ios/mint/ios-mint-basic-usage&quot;&gt;iOS開発環境には重要エコシステムとなるMintの理解と利用&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mintバージョンで問題が起きる場合&quot;&gt;Mintバージョンで問題が起きる場合&lt;/h4&gt;
&lt;p&gt;今回MintはHomebrewからインストールする構成です。&lt;br /&gt;
もし、プロジェクト毎にMintのバージョンを持つ必要がある場合は、インストールを&lt;a href=&quot;https://github.com/yonaskolb/Mint#install&quot;&gt;自身でインストールする方法&lt;/a&gt;にすることで、Mintのバージョンを制御することが可能になります。&lt;/p&gt;

&lt;p&gt;またSwiftバージョンにズレが起きてる場合は,&lt;a href=&quot;https://github.com/kylef/swiftenv&quot;&gt;SwiftEnv&lt;/a&gt;を使って&lt;code class=&quot;highlighter-rouge&quot;&gt;.swift-version&lt;/code&gt;ファイルでSwiftバージョンを固定することもできます。&lt;/p&gt;

&lt;h3 id=&quot;テスト環境&quot;&gt;テスト環境&lt;/h3&gt;
&lt;p&gt;テストプロジェクトで使うテストフレームワーク・ツール群です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quick&lt;/strong&gt;
BDDフレームワークです。通常のXCTestを使うよりテストケース管理がしやすくなります。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nimble&lt;/strong&gt;
Matcherです。XCTAssertを直接使うよりコードが読みやすく書きやすくなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ciサービス&quot;&gt;CIサービス&lt;/h3&gt;
&lt;p&gt;モバイルに特化した&lt;strong&gt;Bitrise&lt;/strong&gt;を使います。&lt;br /&gt;
ここに関してはCircleCIなど他領域(backend, frontend)などの費用関係もあるのである程度ゆらぎはあると思います。&lt;/p&gt;

&lt;h2 id=&quot;組み合わせてみる&quot;&gt;組み合わせてみる&lt;/h2&gt;
&lt;p&gt;実際に組み合わせたiOSプロジェクト雛形を&lt;a href=&quot;https://github.com/mothule/ios_project_template&quot;&gt;GitHub&lt;/a&gt;に用意しました。&lt;br /&gt;
Homebrewなど一部はGitHubにアップしないので反映されないものもあります。&lt;/p&gt;

&lt;h3 id=&quot;ビルド構成が複雑なら設定を外部ファイル化する&quot;&gt;ビルド構成が複雑なら設定を外部ファイル化する&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;project.yml&lt;/code&gt;の中身が複雑になるのは主にSettings周りなので、そうなってきた場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;configFiles&lt;/code&gt;を使って&lt;br /&gt;
外部ファイルに抽出する必要が出てくると思います。&lt;br /&gt;
ここらへんは&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-settings&quot;&gt;XcodeGenのSettings周りを整理する&lt;/a&gt;&lt;/span&gt;
にやり方を書いてあります。&lt;/p&gt;

&lt;h3 id=&quot;レイヤードアーキテクチャデザインによってembedded-frameworkを増やす&quot;&gt;レイヤードアーキテクチャデザインによってEmbedded frameworkを増やす&lt;/h3&gt;
&lt;p&gt;レイヤードアーキテクチャはサンプルなので2層に留めてます。&lt;br /&gt;
実際のアプリ開発時ではアーキテクチャデザインに合わせます。&lt;/p&gt;

&lt;h2 id=&quot;マーケティング領域&quot;&gt;マーケティング領域&lt;/h2&gt;

&lt;p&gt;アプリ開発のエコシステムの遠い位置にはマーケティング領域が出てくると思います。&lt;br /&gt;
これらはビジネスサイドの領域ではありますが、データ集計フローは開発サイドの役割になります。&lt;br /&gt;
ただ、今回は本筋から離れてしまうので説明しません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firebase Analytics&lt;/li&gt;
  &lt;li&gt;BigQuery&lt;/li&gt;
  &lt;li&gt;Redash&lt;/li&gt;
  &lt;li&gt;Slack&lt;/li&gt;
  &lt;li&gt;Google Data Studio&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="program-design" /><category term="cocoapods" /><category term="carthage" /><category term="xcodegen" /><category term="mint" /><category term="quick" /><category term="nimble" /><category term="rbenv" /><category term="bundler" /><category term="homebrew" /><category term="swiftlint" /><category term="bitrise" /><category term="fastlane" /><summary type="html">iOSアプリ開発で開発の周辺環境いわゆるエコシステムについて、現状どうなってるか整理も踏まえて考えて見ました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-08-02-ios-swift-ecosystem-design/0.png" /></entry><entry><title type="html">iOS開発環境には重要エコシステムとなるMintの理解と利用</title><link href="https://blog.mothule.com/ios/mint/ios-mint-basic-usage" rel="alternate" type="text/html" title="iOS開発環境には重要エコシステムとなるMintの理解と利用" /><published>2020-07-31T00:00:00+09:00</published><updated>2020-07-31T17:41:29+09:00</updated><id>https://blog.mothule.com/ios/mint/ios-mint-basic-usage</id><content type="html" xml:base="https://blog.mothule.com/ios/mint/ios-mint-basic-usage">&lt;p&gt;HomebrewでSwiftLintのバージョンを上げたら、別プロジェクトにも影響与えてコントロール失う経験ありますよね。Mintはそれを解決します。&lt;/p&gt;

&lt;h2 id=&quot;mintとは&quot;&gt;Mintとは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yonaskolb/Mint&quot;&gt;Mint&lt;/a&gt;は、&lt;strong&gt;Swift製コマンドラインツールのパッケージマネージャーです。&lt;/strong&gt;
ツールのインストールと実行ができます。&lt;/p&gt;

&lt;p&gt;同じパッケージマネージャーにHomebrewがあり、そちらのほうが遥かにメジャーです。&lt;br /&gt;
Swift製ツールもHomebrewからインストールできますし、&lt;br /&gt;
パッケージマネージャーとして使いやすく安定しています。&lt;/p&gt;

&lt;p&gt;では「何故Mintがいいのか？Homebrewじゃ駄目なのか？」について説明します。&lt;/p&gt;

&lt;h2 id=&quot;ios開発におけるhomebrewが抱える課題&quot;&gt;iOS開発におけるHomebrewが抱える課題&lt;/h2&gt;
&lt;p&gt;通常はMac1台に複数のiOSアプリやSwiftアプリを開発するはずです。&lt;br /&gt;
各プロジェクトでは開発環境に差異あれど、同じツールを使うことは当然ありえます。&lt;br /&gt;
同様にそれぞれ使ってるバージョンが異なることも起きます。&lt;/p&gt;

&lt;p&gt;しかし、&lt;strong&gt;Homebrewは異なるバージョンのツールをバージョン別管理ができません。&lt;/strong&gt;&lt;br /&gt;
そのためツールをバージョンアップすると、各プロジェクトに影響を与え動作しなくなるリスクがあります。&lt;/p&gt;

&lt;h2 id=&quot;mintが解決する課題&quot;&gt;Mintが解決する課題&lt;/h2&gt;
&lt;p&gt;Mintは、バージョン別管理を可能とし、管轄外のバージョン変更課題を解決します。&lt;/p&gt;

&lt;p&gt;Mintでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;Mintfile&lt;/code&gt;によりプロジェクト毎にバージョンを管理できます。&lt;br /&gt;
これにより&lt;strong&gt;PC内の複数プロジェクト間のSwiftツールの疎結合を実現します。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;mintのパッケージ管理方法について&quot;&gt;Mintのパッケージ管理方法について&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;バージョン別でパッケージを管理します&lt;/li&gt;
  &lt;li&gt;バージョン指定でパッケージを実行できます&lt;/li&gt;
  &lt;li&gt;パッケージはシンボリックリンクでパスを通してどこからでも実行できます&lt;/li&gt;
  &lt;li&gt;パッケージとバージョンの一覧をMintfileというプレーンテキストで管理できます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mintのインストール方法&quot;&gt;Mintのインストール方法&lt;/h2&gt;

&lt;p&gt;Homebrewでインストールできます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install mint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;他にも&lt;a href=&quot;https://github.com/yonaskolb/Mint#make&quot;&gt;Make&lt;/a&gt;, &lt;a href=&quot;https://github.com/yonaskolb/Mint#using-mint-itself&quot;&gt;Mintコード&lt;/a&gt;, &lt;a href=&quot;https://github.com/yonaskolb/Mint#swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt;からもインストールできます。&lt;/p&gt;

&lt;h2 id=&quot;mintでパッケージをインストールする方法&quot;&gt;Mintでパッケージをインストールする方法&lt;/h2&gt;

&lt;p&gt;Mintでパッケージをインストールするには&lt;code class=&quot;highlighter-rouge&quot;&gt;mint install&lt;/code&gt;コマンドを使います。&lt;br /&gt;
例えば&lt;a href=&quot;https://github.com/yonaskolb/XcodeGen&quot;&gt;XcodeGen&lt;/a&gt;の最新版をインストールするなら下記になります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint install yonaskolb/XcodeGen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;バージョン指定でインストール&quot;&gt;バージョン指定でインストール&lt;/h3&gt;
&lt;p&gt;バージョンを指定してインストールするならパッケージ情報の末尾に&lt;code class=&quot;highlighter-rouge&quot;&gt;@x.x.x&lt;/code&gt;形式でバージョン情報を渡します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint install yonaskolb/XcodeGen@1.2.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;パスを通さずインストール&quot;&gt;パスを通さずインストール&lt;/h3&gt;
&lt;p&gt;デフォルトではインストールすると&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;にシンボリックリンクを作成します。&lt;br /&gt;
これによりどこからでもアクセスできるようになります。&lt;br /&gt;
もしインストールするパッケージをリンクしたくない場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-link&lt;/code&gt;をつけます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint install yonaskolb/XcodeGen@1.2.4 &lt;span class=&quot;nt&quot;&gt;--no-link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;再インストール&quot;&gt;再インストール&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt;オプションをつけることで再インストールできます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint install yonaskolb/XcodeGen@1.2.4 &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mintでパッケージを実行する方法&quot;&gt;Mintでパッケージを実行する方法&lt;/h2&gt;
&lt;p&gt;Mintでインストールしたパッケージを実行するには、&lt;code class=&quot;highlighter-rouge&quot;&gt;mint run&lt;/code&gt;コマンドを使います。&lt;br /&gt;
例えば最新版の&lt;code class=&quot;highlighter-rouge&quot;&gt;XcodeGen&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;generate&lt;/code&gt;を実行したい場合は下記になります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint run XcodeGen generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに小文字でも動きます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint run xcodegen generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;バージョン指定で実行&quot;&gt;バージョン指定で実行&lt;/h3&gt;
&lt;p&gt;Mintにインストールしてるパッケージが複数バージョンある中で、&lt;br /&gt;
リンクしてない古いバージョンを実行する場合は、&lt;br /&gt;
バージョン情報をつけることで指定実行できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint run xcodegen@1.2.4 generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mintfileでパッケージ管理する方法&quot;&gt;Mintfileでパッケージ管理する方法&lt;/h2&gt;
&lt;p&gt;Mintでは指定のパッケージとバージョンを列挙して一度にインストールしたりアップデートできます。&lt;br /&gt;
例えばiOSアプリ開発のGit管理下にMintfileを置くことで、そのレポジトリで使うツールやバージョンを制御することができます。&lt;/p&gt;

&lt;p&gt;このMintfileを利用することでプロジェクト間のバージョン差異における干渉を解決します。&lt;/p&gt;

&lt;h3 id=&quot;mintfileの書き方&quot;&gt;Mintfileの書き方&lt;/h3&gt;
&lt;p&gt;至って簡単です。コマンドラインでインストールや実行するときに指定してる方法と同じです。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mintfile&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yonaskolb/XcodeGen@2.16.0
realm/SwiftLint@0.39.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mintfile内のパッケージを使う&quot;&gt;Mintfile内のパッケージを使う&lt;/h2&gt;
&lt;p&gt;そのまま&lt;code class=&quot;highlighter-rouge&quot;&gt;mint run xcodegen&lt;/code&gt;と実行すれば、インストールされてなければインストールして実行してくれます。
まとめて指定バージョンを予め全部インストールしておきたい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;mint bootstrap&lt;/code&gt;コマンドを実行します。
&lt;code class=&quot;highlighter-rouge&quot;&gt;mint bootstrap&lt;/code&gt;ではデフォルトはリンク処理を行いません。&lt;br /&gt;
もしリンク処理したい場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;mint bootstrap --link&lt;/code&gt;で実行してください。&lt;/p&gt;

&lt;h3 id=&quot;注意-mintfileの有効範囲について&quot;&gt;注意: Mintfileの有効範囲について&lt;/h3&gt;
&lt;p&gt;rbenvや.gitignoreなどと異なり、カレントディレクトリ上にMintfileが見つからない場合はバージョン解決はMintfileで行いません。
例えば次のツリー構造のとき、Bディレクトリで&lt;code class=&quot;highlighter-rouge&quot;&gt;mint run xcodege&lt;/code&gt;を実行すると&lt;code class=&quot;highlighter-rouge&quot;&gt;Mintfile&lt;/code&gt;内のバージョンではなくMintがインストールしてる最新で実行します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aディレクトリ
    &lt;ul&gt;
      &lt;li&gt;Mintfile&lt;/li&gt;
      &lt;li&gt;Bディレクトリ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mintfileのないディレクトリ上でmintコマンドを実行する場合は注意してください。&lt;/p&gt;

&lt;h2 id=&quot;その他オプション&quot;&gt;その他オプション&lt;/h2&gt;

&lt;h3 id=&quot;mintからの出力を止める&quot;&gt;mintからの出力を止める&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--silent&lt;/code&gt;オプションを使います。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;–silentなし&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint run xcodegen version
🌱 Finding latest version of XcodeGen
🌱 Running xcodegen 2.16.0...
Version: 2.16.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;–silentあり&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint run &lt;span class=&quot;nt&quot;&gt;--silent&lt;/span&gt; xcodegen version
Version: 2.16.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mintのキャッシュパスとリンク先を変える&quot;&gt;mintのキャッシュパスとリンク先を変える&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MINT_PATH&lt;/code&gt;を変更することでインストールしたパッケージの保存場所を変更できます。&lt;br /&gt;
デフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;/user/local/lib/mint&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MINT_LINK_PATH&lt;/code&gt;を変更するとシンボリックリンクの作成場所を変更できます。&lt;br /&gt;
デフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;です。&lt;/p&gt;

&lt;h2 id=&quot;実際にxcodeプロジェクトに組み込む&quot;&gt;実際にXcodeプロジェクトに組み込む&lt;/h2&gt;

&lt;p&gt;SwiftLintを実際に組み込んでみます。&lt;br /&gt;
小さいですが一応&lt;a href=&quot;https://github.com/mothule/research_mint&quot;&gt;GitHub&lt;/a&gt;にも上げてあります。&lt;br /&gt;
git cloneして&lt;code class=&quot;highlighter-rouge&quot;&gt;mint bootstrap&lt;/code&gt;を試してみるのもいいかもしれないです。&lt;/p&gt;

&lt;p&gt;HomebrewではBuild Scriptでは&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;which swiftlint &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;swiftlint
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ですが、&lt;/p&gt;

&lt;p&gt;Mint経由でインストールした場合は、&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./Mintfile &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;mint run swiftlint
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;と、実行条件とシェルコマンドを変える必要があります。&lt;/p&gt;

&lt;h3 id=&quot;実行条件はmintfileを見たほうがいい&quot;&gt;実行条件はMintfileを見たほうがいい&lt;/h3&gt;
&lt;p&gt;ネットで見かけた記事では↓のようにmintコマンドの有無でシェルコマンドを実行していましたが、&lt;br /&gt;
MintはMintfileがなくても、&lt;code class=&quot;highlighter-rouge&quot;&gt;mint run swiftlint&lt;/code&gt;と実行すれば勝手に最新版を取ってきて実行するので、&lt;br /&gt;
mintコマンドの有無ではなく、Mintfileの有無のほうが「知らぬ間に最新版で実行してた」を防げると思います。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;which mint &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;mint run swiftlint
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ios" /><category term="mint" /><category term="swift" /><summary type="html">HomebrewでSwiftLintのバージョンを上げたら、別プロジェクトにも影響与えてコントロール失う経験ありますよね。Mintはそれを解決します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-31-ios-mint-basic-usage/0.png" /></entry><entry><title type="html">xcconfigで使うパラメータ名の見つけ方</title><link href="https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-search-build-config" rel="alternate" type="text/html" title="xcconfigで使うパラメータ名の見つけ方" /><published>2020-07-30T00:00:00+09:00</published><updated>2020-07-30T19:49:43+09:00</updated><id>https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-search-build-config</id><content type="html" xml:base="https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-search-build-config">&lt;p&gt;xcconfigは便利ですが、中身のパラメータ名が何書けばいいか特定できないと使い物になりません。&lt;br /&gt;
この記事はXcodeのBuild Settingsで書いてるビルドパラメータがxcconfigではどう書くのかを説明します。&lt;/p&gt;

&lt;p&gt;xcconfigについて分からない方は「&lt;span&gt;&lt;a href=&quot;/ios/xcode/ios-xcode-xcconfig-how-to-use&quot;&gt;Xcodeのxcconfigの理解と使い方&lt;/a&gt;&lt;/span&gt;
」に詳細を説明してます。&lt;/p&gt;

&lt;h2 id=&quot;xcconfigへの変換はxcodeがサポートしてる&quot;&gt;xcconfigへの変換はXcodeがサポートしてる&lt;/h2&gt;
&lt;p&gt;xcconfigの書き方が分かって実際に使おうにも、ビルドパラメータ名が分からないと設定しようがありません。&lt;br /&gt;
XcodeのBuild Settingsでカスタマイズされた項目をxcconfigだとどうやって書けばいいか分からないと思います。&lt;br /&gt;
実は&lt;strong&gt;XcodeのBuild Settingsからxcconfigへのフォーマット変換はXcodeがサポートしてます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;確認する方法は2つあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XcodeのBuild Settingsの表示方法をパラメータ名に変更する&lt;/li&gt;
  &lt;li&gt;XcodeのBuild Settingsの各パラメータをxcconfig形式でコピーする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xcodeのbuild-settingsの表示方法をパラメータ名に変更&quot;&gt;XcodeのBuild Settingsの表示方法をパラメータ名に変更&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt;を開いた後に&lt;code class=&quot;highlighter-rouge&quot;&gt;Editor &amp;gt; Show Setting Names&lt;/code&gt;を選ぶと、表示されてるパラメータ名が表示用からコマンド用に変わります。&lt;/p&gt;

&lt;video playsinline=&quot;&quot; muted=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; width=&quot;100%&quot; height=&quot;400px&quot;&gt;
    &lt;source type=&quot;video/mp4&quot; src=&quot;/assets/videos/2020-07-30-ios-xcode-xcconfig-how-to-search-build-config/0.mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;例えば、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Architectures &amp;gt; Build Active Architecture Only&lt;/code&gt;であれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;ONLY_ACTIVE_ARCH&lt;/code&gt;になります。&lt;br /&gt;
これをxcconfigで使うなら&lt;code class=&quot;highlighter-rouge&quot;&gt;ONLY_ACTIVE_ARCH = YES&lt;/code&gt;となります。&lt;/p&gt;

&lt;h2 id=&quot;xcodeのbuild-settingsの各パラメータをxcconfig形式でコピー&quot;&gt;XcodeのBuild Settingsの各パラメータをxcconfig形式でコピー&lt;/h2&gt;

&lt;p&gt;パラメータ名を確認するだけなら&lt;code class=&quot;highlighter-rouge&quot;&gt;Show Setting Names&lt;/code&gt;で確認できますが、Xcodeはそれよりも強力な変換機能を備えています。&lt;br /&gt;
実は&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt;はコピー＆ペーストをサポートしており、対象ビルドパラメータをコピーしてテキストにペーストすると、xcconfig形式で貼り付けします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-search-build-config/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-search-build-config/1.png&quot; width=&quot;100%&quot; alt=&quot;XcodeBuildSettings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Active Architecture Only&lt;/code&gt;の項目を選択し、コピー(⌘+C)してテキストエディタでペースト(⌘+V)すると、下記のように貼り付けされます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//:configuration = Debug
ONLY_ACTIVE_ARCH = YES

//:configuration = Release

//:completeSettings = some
ONLY_ACTIVE_ARCH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//:configuration = Debug&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;とはBuild Configuration毎に分けられてます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt;に何も表示されていないのは、カスタマイズ値ではなくデフォルト値なので空になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;some&lt;/code&gt;はコピーしたビルドパラメータの明確ビルドパラメータ名が列挙されます。ここはxcconfigでは不要なので削除します。&lt;/p&gt;

&lt;p&gt;もう一つ例として&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Options &amp;gt; Debug Information Format&lt;/code&gt;を見るとこうなります。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//:configuration = Debug
DEBUG_INFORMATION_FORMAT = dwarf

//:configuration = Release
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym

//:completeSettings = some
DEBUG_INFORMATION_FORMAT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを使えばXcodeからxcconfigを作りたい場合に&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt;の項目全部を選択してコピーすれば、簡単に現在のビルド構成を表現したxcconfigが作成できます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="xcode" /><category term="xcconfig" /><summary type="html">xcconfigは便利ですが、中身のパラメータ名が何書けばいいか特定できないと使い物になりません。 この記事はXcodeのBuild Settingsで書いてるビルドパラメータがxcconfigではどう書くのかを説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-search-build-config/0.png" /></entry><entry><title type="html">Xcodeのxcconfigの理解と使い方</title><link href="https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-use" rel="alternate" type="text/html" title="Xcodeのxcconfigの理解と使い方" /><published>2020-07-30T00:00:00+09:00</published><updated>2020-07-30T19:41:30+09:00</updated><id>https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-use</id><content type="html" xml:base="https://blog.mothule.com/ios/xcode/ios-xcode-xcconfig-how-to-use">&lt;h2 id=&quot;xcconfigとは&quot;&gt;xcconfigとは？&lt;/h2&gt;
&lt;p&gt;Xcodeのビルド構成ファイルです。略称からして&lt;strong&gt;XC&lt;/strong&gt;ode&lt;strong&gt;CONFIG&lt;/strong&gt;urationといったところだと思います。&lt;/p&gt;

&lt;p&gt;Xcodeではビルドパラメータ等を「プロジェクト」や「ターゲット」単位で設定ができます。&lt;br /&gt;
これらは通常XcodeのBuild Settingsから閲覧・編集することができますが、以下の不便があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;やり直し(アンドゥ)が効かない&lt;/li&gt;
  &lt;li&gt;クリック操作が多く編集効率が悪い&lt;/li&gt;
  &lt;li&gt;カスタマイズしたプロパティが把握しにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xcconfigはこれら&lt;strong&gt;設定情報をテキスト形式の外部ファイルとして扱えるようにしたファイル&lt;/strong&gt;です。&lt;br /&gt;
xcconfigを使うことでプロジェクトやターゲットのビルドパラメータを定義・上書きできます。&lt;/p&gt;

&lt;h3 id=&quot;xcconfigの利点&quot;&gt;xcconfigの利点&lt;/h3&gt;

&lt;p&gt;xcconfigによる利点は元の編集状況が抱える課題を解決する利点を持ちます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テキストとして扱える&lt;/li&gt;
  &lt;li&gt;カスタマイズした設定だけが並ぶ&lt;/li&gt;
  &lt;li&gt;Gitとの相性が良い(コンフリクト解消難易度が低い)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xcconfigの書き方&quot;&gt;xcconfigの書き方&lt;/h2&gt;

&lt;p&gt;下記の項目について説明します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ファイル作成&lt;/li&gt;
  &lt;li&gt;ビルドパラメータの設定&lt;/li&gt;
  &lt;li&gt;パラメータの型&lt;/li&gt;
  &lt;li&gt;変数展開&lt;/li&gt;
  &lt;li&gt;ビルドパラメータにプラットフォーム条件の追加&lt;/li&gt;
  &lt;li&gt;他ビルド構成ファイルの読み込み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;構成設定ファイルのフォーマット説明はAppleの&lt;a href=&quot;https://help.apple.com/xcode/mac/11.4/#/dev745c5c974&quot;&gt;Configuration Settings File (xcconfig) format&lt;/a&gt;を参考してます。&lt;/p&gt;

&lt;h3 id=&quot;ファイル作成&quot;&gt;ファイル作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/1.png&quot; width=&quot;50%&quot; alt=&quot;xcconfig&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;テキスト形式の外部ファイルなので拡張子さえあっていれば追加方法は何でもいいです。&lt;br /&gt;
もしXcode上から追加する場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration Settings File&lt;/code&gt;を選んでください。↓&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/2.png&quot; width=&quot;75%&quot; alt=&quot;NewFileOnXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ビルドパラメータの設定&quot;&gt;ビルドパラメータの設定&lt;/h3&gt;

&lt;p&gt;設定フォーマットは&lt;code class=&quot;highlighter-rouge&quot;&gt;ParameterName = ParameterValue&lt;/code&gt;となります。&lt;br /&gt;
1ビルドパラメータ1行で表現します。&lt;br /&gt;
例えば下記はアプリアイコンで使うAppIcon名を設定する例です。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// アプリアイコンとして使うAppIconの名前&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppIcon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また利点にも記載しましたが、全てのビルドパラメータを記載する必要はありません。&lt;br /&gt;
カスタマイズしたパラメータだけを列挙します。&lt;br /&gt;
未記載のビルドパラメータはXcode側が持つデフォルト値が使われます。&lt;/p&gt;

&lt;h4 id=&quot;上書き&quot;&gt;上書き&lt;/h4&gt;
&lt;p&gt;ビルドパラメータは上書きが可能です。
後から書いた同一パラメータが使われます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppIcon&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppIcon2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ← これが使われる&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この上書きルールは同一ファイルだけでなくファイルを横断して適用されます。&lt;br /&gt;
つまりプロジェクトで&lt;code class=&quot;highlighter-rouge&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon&lt;/code&gt;と設定しても&lt;br /&gt;
ターゲットで&lt;code class=&quot;highlighter-rouge&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon2&lt;/code&gt;と設定してれば、&lt;br /&gt;
そのターゲットでは&lt;code class=&quot;highlighter-rouge&quot;&gt;AppIcon2&lt;/code&gt;になります。&lt;/p&gt;

&lt;h3 id=&quot;パラメータの型&quot;&gt;パラメータの型&lt;/h3&gt;

&lt;p&gt;パラメータの値には多様な型をサポートしています。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;型&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;YES or NO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;string&lt;/td&gt;
      &lt;td&gt;テキスト&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enumeration(string)&lt;/td&gt;
      &lt;td&gt;定義済みテキスト&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;string list&lt;/td&gt;
      &lt;td&gt;空白区切りのテキスト一覧。もしテキスト内に空白があるなら引用符(“)で囲みます。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;path&lt;/td&gt;
      &lt;td&gt;ファイルまたはディレクトリのパス(形式はPOSIXに準拠)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;path list&lt;/td&gt;
      &lt;td&gt;string listのpath版&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;変数展開&quot;&gt;変数展開&lt;/h3&gt;

&lt;p&gt;パラメータ値では変数展開ができます。形式は&lt;code class=&quot;highlighter-rouge&quot;&gt;$(variable_name)&lt;/code&gt;になります。
例えば下記は、既存パラメータを上書きせず追加する例です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OTHER_SWIFT_FLAGS = $(inherited) -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記のように他のビルドパラメータも参照可能です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OBJROOT = $(SYMROOT)

DSTROOT = /tmp/$(PROJECT_NAME).dst

CONFIGURATION_BUILD_DIR = $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ビルドパラメータにプラットフォーム条件の追加&quot;&gt;ビルドパラメータにプラットフォーム条件の追加&lt;/h3&gt;

&lt;p&gt;ビルドパラメータには簡易ですが、条件をつけれます。&lt;br /&gt;
条件はSDKとArchitectureの2種類です。&lt;/p&gt;

&lt;p&gt;SDKとはmacOSやiOSなどで、Architectureはx86_64やarm64などです。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;条件名&lt;/th&gt;
      &lt;th&gt;値(例)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sdk&lt;/td&gt;
      &lt;td&gt;macos10.12, iphoneos10.2, iphoneos*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;arch&lt;/td&gt;
      &lt;td&gt;x86_64, arm64&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;設定フォーマットは&lt;code class=&quot;highlighter-rouge&quot;&gt;ParameterName[Conditional=ConditionalValue] = ParameterValue&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;例えば下記はiOSの場合のみ&lt;code class=&quot;highlighter-rouge&quot;&gt;OTHER_SWIFT_FLAGS&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;を追加する例です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OTHER_SWIFT_FLAGS[sdk=iphoneos*] = $(inherited) -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;組み合わせ可能&quot;&gt;組み合わせ可能&lt;/h4&gt;
&lt;p&gt;条件sdkとarchは組み合わせ可能です。&lt;/p&gt;

&lt;p&gt;下記はx86_64系iOSの場合のみ&lt;code class=&quot;highlighter-rouge&quot;&gt;OTHER_SWIFT_FLAGS&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;を追加する例です。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OTHER_SWIFT_FLAGS[sdk=iphoneos*][arch=x86_64] = $(inherited) -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;他ビルド構成ファイルの読み込み&quot;&gt;他ビルド構成ファイルの読み込み&lt;/h3&gt;
&lt;p&gt;xcconfigは他のxcconfigを読み込み展開できます。
他xcconfigを読み込むには&lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;other file path&quot;&lt;/code&gt;を使います。&lt;br /&gt;
パスは「ファイル名」「相対パス」「絶対パス」を利用できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ファイル名: 同一ディレクトリ上から一致するファイルを探します。&lt;/li&gt;
  &lt;li&gt;相対パス: 同一ディレクトリ上を基点として一致するファイルを探します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他xcconfigへのパス解決は、ビルド設定を処理する前に実施されます。&lt;/p&gt;

&lt;h4 id=&quot;指定ファイル見つからない場合&quot;&gt;指定ファイル見つからない場合&lt;/h4&gt;
&lt;p&gt;ビルド時に指定のファイルが見つからない場合は、ビルド警告が表示されます。&lt;br /&gt;
もしこの警告を抑制したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;#include? &quot;other file path&quot;&lt;/code&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;をつけます。&lt;/p&gt;

&lt;h3 id=&quot;ビルドパラメータ名が分からない場合&quot;&gt;ビルドパラメータ名が分からない場合&lt;/h3&gt;

&lt;p&gt;もしビルドパラメータ名が分からない場合は「&lt;span&gt;&lt;a href=&quot;/ios/xcode/ios-xcode-xcconfig-how-to-search-build-config&quot;&gt;xcconfigで使うパラメータ名の見つけ方&lt;/a&gt;&lt;/span&gt;
」に探し方をまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;xcconfigの実践活用&quot;&gt;xcconfigの実践活用&lt;/h2&gt;

&lt;p&gt;実際のアプリ開発ではどういった運用にすればよいか考えてみます。&lt;/p&gt;

&lt;p&gt;ターゲットの数ですが、最近の動向から考えて次の観点で考えてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4層構造&lt;/li&gt;
  &lt;li&gt;AppExtension N個&lt;/li&gt;
  &lt;li&gt;各ターゲットにUT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを元にプロジェクトとターゲットの構図で表すと次のツリー構造です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project
    &lt;ul&gt;
      &lt;li&gt;App&lt;/li&gt;
      &lt;li&gt;AppTests&lt;/li&gt;
      &lt;li&gt;AppUITests&lt;/li&gt;
      &lt;li&gt;AppCore&lt;/li&gt;
      &lt;li&gt;AppCoreTests&lt;/li&gt;
      &lt;li&gt;Infrastructure&lt;/li&gt;
      &lt;li&gt;InfrastructureTests&lt;/li&gt;
      &lt;li&gt;Library&lt;/li&gt;
      &lt;li&gt;LibraryTests&lt;/li&gt;
      &lt;li&gt;AppExtensionA&lt;/li&gt;
      &lt;li&gt;AppExtensionB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;11個のターゲットに分かれました。
分類としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;レイヤー別&lt;/li&gt;
  &lt;li&gt;テスト or プロダクト&lt;/li&gt;
  &lt;li&gt;AppExtension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3カテゴリに分けられるかと思います。&lt;/p&gt;

&lt;p&gt;これを11個それぞれにビルドパラメータを設定するのは多量の重複が発生するので、&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;を利用したxcconfigの階層化が必要かと思います。
階層の分け方としては先程分けた分類に加えてBuild Configurationを考慮した形が良さそうです。&lt;/p&gt;

&lt;p&gt;つまり整理すると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロジェクトのビルド構成を用意&lt;/li&gt;
  &lt;li&gt;テスト共通ビルド構成を用意&lt;/li&gt;
  &lt;li&gt;プロダクト共通ビルド構成を用意&lt;/li&gt;
  &lt;li&gt;ターゲット毎にビルド構成を用意&lt;/li&gt;
  &lt;li&gt;Build Configuration共通ビルド構成を用意&lt;/li&gt;
  &lt;li&gt;Build Configuration毎にビルド構成を用意&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になります。&lt;/p&gt;

&lt;p&gt;Xcode上で見るとこうなります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/3.png&quot; width=&quot;50%&quot; alt=&quot;LayeredTargets&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを今回はxcconfigを次のように分けました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/4.png&quot; width=&quot;100%&quot; alt=&quot;xcconfigMapping&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;xcconfigファイル自体はターゲットフォルダと1:1ではないので、別フォルダとして集約しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/5.png&quot; width=&quot;50%&quot; alt=&quot;xcconfigFiles&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これら親子関係をツリー表現すると次のようになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project.base.xcconfig
    &lt;ul&gt;
      &lt;li&gt;Project.debug.xcconfig
        &lt;ul&gt;
          &lt;li&gt;App.base.xcconfig
            &lt;ul&gt;
              &lt;li&gt;App.debug.xcconfig&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;UnitTest.xcconfig&lt;/li&gt;
          &lt;li&gt;UITest.xcconfig&lt;/li&gt;
          &lt;li&gt;Extension.base.xcconfig&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;releaseはdebugと同じなので省略してあります。&lt;/p&gt;

&lt;h3 id=&quot;今回この構成にした理由&quot;&gt;今回この構成にした理由&lt;/h3&gt;

&lt;p&gt;テスト系xcconfigはReleaseで実施するケースは考えにくいためBuild Configurationによる分割はしていません。&lt;br /&gt;
AppExtension系xconfigは今の所この2つのターゲットではDebugでもReleaseでも差異はなかったのですが、開発を進めるにあたって分岐しやすいと予想し、
そのときの半分準備としてbaseを使うようにしています。今後DebugとReleaseで分岐が生まれたら、他同様になります。&lt;/p&gt;

&lt;p&gt;当然ですが、この構成が絶対正解ではありません。プロダクトの特性や状況に応じその時点でのベストは異なります。&lt;br /&gt;
エンジニアはこれを考えるのが重要な仕事です。&lt;/p&gt;

&lt;h3 id=&quot;xcconfigの中身&quot;&gt;xcconfigの中身&lt;/h3&gt;

&lt;p&gt;中身は予定通り&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt;プレフィックスを使って共通xcconfigを読み込んでから、それぞれ特別値を個別設定してあります。&lt;/p&gt;

&lt;p&gt;例えば下記は&lt;code class=&quot;highlighter-rouge&quot;&gt;Project.debug.xcconfig&lt;/code&gt;の全容です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;Project.base.xcconfig&quot;

//:configuration = Debug
ONLY_ACTIVE_ARCH = YES
DEBUG_INFORMATION_FORMAT = dwarf
ENABLE_TESTABILITY = YES
GCC_DYNAMIC_NO_PIC = NO
GCC_OPTIMIZATION_LEVEL = 0
GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1 $(inherited)
SWIFT_OPTIMIZATION_LEVEL = -Onone
SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG
MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xcconfigは少なく抑えたほうが良い&quot;&gt;xcconfigは少なく抑えたほうが良い&lt;/h3&gt;

&lt;p&gt;なるべくxcconfigのファイル数は少なくなるような構成にしてたほうがいいです。&lt;br /&gt;
なぜならxcconfigの分岐ポイントが「Build Configuration」「Platform」「Testing」と分岐要素が多いことでファイル数が増えやすいためです。&lt;br /&gt;
例えば、今回はBuild Configurationはデフォルト値となるDebugとReleaseの2つでした。&lt;br /&gt;
しかしこれがDebug,Staging,AppStore,CIと4つに増えた場合にその分増えてしまいます。&lt;/p&gt;

&lt;p&gt;もしBuild Configurationも増えるようであれば、組み合わせ爆発を起こさないためにも工夫が必要です。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="xcode" /><category term="xcconfig" /><summary type="html">xcconfigとは？ Xcodeのビルド構成ファイルです。略称からしてXCodeCONFIGurationといったところだと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-30-ios-xcode-xcconfig-how-to-use/0.png" /></entry><entry><title type="html">たまに必要なGitの操作tips</title><link href="https://blog.mothule.com/tools/git/tools-git-tips" rel="alternate" type="text/html" title="たまに必要なGitの操作tips" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T23:34:17+09:00</updated><id>https://blog.mothule.com/tools/git/tools-git-tips</id><content type="html" xml:base="https://blog.mothule.com/tools/git/tools-git-tips">&lt;p&gt;普段使いでは使うことはない操作だけどたまに必要になる操作集を集めてます。
順次増やしていきます。&lt;/p&gt;

&lt;h2 id=&quot;リモートのみファイル削除&quot;&gt;リモートのみファイル削除&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rm &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ファイル名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;フォルダ削除&quot;&gt;フォルダ削除&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rm &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ディレクトリ名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;最新のみcloneシャロークローン&quot;&gt;最新のみclone(シャロークローン)&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Git URL]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;指定ワードを含むコミットを検索&quot;&gt;指定ワードを含むコミットを検索&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;検索ワード] &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--patch&lt;/code&gt;をつけない場合はログ一覧が並びます。&lt;/p&gt;

&lt;h2 id=&quot;コミットした人で検索&quot;&gt;コミットした人で検索&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;コミットした人の名前]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="tools" /><category term="git" /><summary type="html">普段使いでは使うことはない操作だけどたまに必要になる操作集を集めてます。 順次増やしていきます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-tools-git-tips/0.png" /></entry><entry><title type="html">XcodeGenでEmbedded Frameworkを設定する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework" rel="alternate" type="text/html" title="XcodeGenでEmbedded Frameworkを設定する" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T23:34:17+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework">&lt;p&gt;XcodeGenを使ってEmbedded frameworkを設定する方法について説明します。&lt;/p&gt;

&lt;p&gt;XcodeGenの基本的な使い方を理解していたら非常に簡単です。&lt;br /&gt;
基本的な使い方が知りたい場合は下記記事をご覧ください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic-usage&quot;&gt;XcodeGenで最低限のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-carthage-cocoapods&quot;&gt;XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;embedded-frameworkとは&quot;&gt;Embedded Frameworkとは？&lt;/h2&gt;

&lt;p&gt;Embedded Frameworkについて詳細を知りたい場合は、「&lt;span&gt;&lt;a href=&quot;/ios/ios-embedded-framework&quot;&gt;Embedded frameworkの理解と作成方法&lt;/a&gt;&lt;/span&gt;
」をご覧ください。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenでembedded-frameworkを作成する&quot;&gt;XcodeGenでEmbedded Frameworkを作成する&lt;/h2&gt;

&lt;p&gt;まずは単純なiOSアプリターゲットを持つXcodeプロジェクトを用意します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EmbeddedFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここからframeworkターゲットを追加し、アプリターゲットにリンクするまでが大まかな流れです。&lt;br /&gt;
これをXcodeGenで表現すると、下記のようになります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EmbeddedFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Logic&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;framework&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Logic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies.target&lt;/code&gt;で対象ターゲットを選ぶだけです。これだけでframeworkがリンクされます。&lt;/p&gt;

&lt;h3 id=&quot;事前にフォルダ用意は必要&quot;&gt;事前にフォルダ用意は必要&lt;/h3&gt;
&lt;p&gt;他ターゲットと変わらず、ターゲット追加時にはデフォルトでフォルダやファイルを作成してくれるので、
まずはXcode上でターゲットを追加してフォルダ作成後にプロジェクト仕様を追記する流れをおすすめします。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="xcodegen" /><summary type="html">XcodeGenを使ってEmbedded frameworkを設定する方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-ios-xcodegen-embedded-framework/0.png" /></entry><entry><title type="html">Embedded frameworkの理解と作成方法</title><link href="https://blog.mothule.com/ios/ios-embedded-framework" rel="alternate" type="text/html" title="Embedded frameworkの理解と作成方法" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T21:40:05+09:00</updated><id>https://blog.mothule.com/ios/ios-embedded-framework</id><content type="html" xml:base="https://blog.mothule.com/ios/ios-embedded-framework">&lt;p&gt;開発中のビルド時間の短縮やレイヤードアーキテクチャをより疎結合にする設計や、Extensionや他Platformなどでコード共有したい場合は、Embedded frameworkで解決できます。&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkとは&quot;&gt;Embedded Frameworkとは？&lt;/h2&gt;
&lt;p&gt;事前に組み込まれたフレームワークです。static libraryみたいな扱いです。&lt;/p&gt;

&lt;h3 id=&quot;例を使って説明&quot;&gt;例を使って説明&lt;/h3&gt;
&lt;p&gt;例えばiOSアプリターゲットにA,B,Cというソースコードが含まれてたとします。&lt;br /&gt;
このうちCファイルを別のframeworkターゲットとして抜き出して、&lt;br /&gt;
それを元のiOSアプリターゲットのフレームワークとして組み込む方法です。&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkのメリット&quot;&gt;Embedded Frameworkのメリット&lt;/h2&gt;

&lt;p&gt;一見助長に感じる制御フローですが、次のケースでその恩恵を得られます。&lt;/p&gt;

&lt;h3 id=&quot;ケース1-他プラットフォームのコード共有&quot;&gt;ケース1: 他プラットフォームのコード共有&lt;/h3&gt;
&lt;p&gt;最近のアプリケーションではiPhone(iOS)に留まらず、watchOSやtvOSなど複数端末で一つのサービスを横断して使うことでサービス体験を向上させてます。&lt;br /&gt;
またAPIのバージョンアップによりアプリ外のサービスにも機能拡張できるApp Extensionによりアプリ外にもサービスロジックが必要になるなど、&lt;strong&gt;現状のアプリは、複数プラットフォーム展開によるコード流用のニーズが高いです。&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;watchOS&lt;/th&gt;
      &lt;th&gt;AppExtension&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/1.png&quot; width=&quot;100%&quot; alt=&quot;watchOSTempl&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/2.png&quot; width=&quot;100%&quot; alt=&quot;AppExtension&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Embedded frameworkは、iOSアプリターゲットからコードを抽出し別ターゲットで管理することでiOSアプリターゲット以外でもframeworkとして使うことができることで、コード共有を実現しています。&lt;/p&gt;

&lt;h3 id=&quot;ケース2-ビルド時間の短縮&quot;&gt;ケース2: ビルド時間の短縮&lt;/h3&gt;
&lt;p&gt;Xcodeで使われているビルダーではインクリメンタルビルドをサポートしており、開発中では主にこのビルド方式が多く使われます。
このインクリメンタルビルドは変更があった箇所と変更に影響ある箇所だけをビルドすることでビルド時間短縮します。&lt;/p&gt;

&lt;p&gt;これをコードをframeworkで分離することでコード改修した箇所でframework先まではビルドされることはないので、より少ない時間でビルドが終わります。&lt;/p&gt;

&lt;p&gt;同じ理論でビルド時間短縮してるのがCocoaPodsからのCarthageになります。&lt;/p&gt;

&lt;h3 id=&quot;ケース3-レイヤードアーキテクチャの疎結合を強化&quot;&gt;ケース3: レイヤードアーキテクチャの疎結合を強化&lt;/h3&gt;
&lt;p&gt;Embedded frameworkといってもframeworkと同じ扱いになり、framework内の機能を使うには&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;しないとコンパイルエラーとなります。&lt;br /&gt;
つまり言語レベルでレイヤー間のアクセス違反を検知してくれるようになります。&lt;br /&gt;
（検知といっても検知した後はエンジニアが気づく必要があるので完璧とはいえないですが）&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkを作る&quot;&gt;Embedded Frameworkを作る&lt;/h2&gt;

&lt;p&gt;仕組みがシンプルですが、実装方法もシンプルです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Frameworkターゲット追加&lt;/li&gt;
  &lt;li&gt;作成されたフォルダ内にコード実装&lt;/li&gt;
  &lt;li&gt;アプリターゲット &amp;gt; Generalからフレームワークを追加&lt;/li&gt;
  &lt;li&gt;アプリ側コードからimportして呼び出し&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;では実際にLogicというEmbedded frameworkを用意し、中にはCalculatorという構造体を用意してみます。&lt;/p&gt;

&lt;h3 id=&quot;frameworkターゲット追加&quot;&gt;Frameworkターゲット追加&lt;/h3&gt;

&lt;p&gt;プロジェクトのGeneralからターゲット追加します。↓&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/3.png&quot; width=&quot;100%&quot; alt=&quot;XcodeTargetGeneral&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frameworkを選択します。↓&lt;br /&gt;
注意点としてXcodeは定期的にUIを変更するため、時期によってはこの画面や名称とは違うケースがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/4.png&quot; width=&quot;100%&quot; alt=&quot;XcodeAddTarget&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;作成されたフォルダ内にコード実装&quot;&gt;作成されたフォルダ内にコード実装&lt;/h3&gt;

&lt;p&gt;Frameworkターゲットを追加するとターゲットと一緒にフォルダも作成されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/5.png&quot; width=&quot;50%&quot; alt=&quot;XcodeAddedFrameworkTarget&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コードは何でもいいですが、今回は下記コードをFrameworkの管理するフォルダに追加します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;アクセススコープに注意&quot;&gt;アクセススコープに注意&lt;/h4&gt;
&lt;p&gt;framework全般の常識として外部から使われることを想定しているクラスやメソッドのスコープをpublicにして呼び出し元から見えるようにします。&lt;br /&gt;
スコープ未指定だとframework外だと見えないので注意です。&lt;/p&gt;

&lt;h3 id=&quot;アプリターゲット--generalからフレームワークを追加&quot;&gt;アプリターゲット &amp;gt; Generalからフレームワークを追加&lt;/h3&gt;
&lt;p&gt;作成したframeworkをiOSアプリターゲットから使えるようにするために関連付けする必要があります。&lt;br /&gt;
アプリターゲットのGeneralからframework追加を行います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/6.png&quot; width=&quot;100%&quot; alt=&quot;XcodeAddFramework&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;＋&lt;/code&gt;を選ぶことで選択ダイアログが出てきますが、内部ターゲットになるのですぐ見つけれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/7.png&quot; width=&quot;80%&quot; alt=&quot;XcodeAddFrameworkDialog&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;アプリ側コードからimportして呼び出し&quot;&gt;アプリ側コードからimportして呼び出し&lt;/h3&gt;

&lt;p&gt;あとは使いたい場所でimportして呼び出すだけです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回のコードは&lt;a href=&quot;https://github.com/mothule/research_embedded_framework&quot;&gt;GitHub&lt;/a&gt;にあげてあります。実際にXcode立ち上げて確認したい方はどうぞ。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><summary type="html">開発中のビルド時間の短縮やレイヤードアーキテクチャをより疎結合にする設計や、Extensionや他Platformなどでコード共有したい場合は、Embedded frameworkで解決できます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-ios-embedded-framework/0.png" /></entry><entry><title type="html">XcodeGenのSettings周りを整理する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-settings" rel="alternate" type="text/html" title="XcodeGenのSettings周りを整理する" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-31T00:45:04+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-settings</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-settings">&lt;p&gt;XcodeGenは便利ですが、プロジェクト仕様ファイル(project.yml)のSettingsに関して自分の中で不透明なので整理しました。&lt;/p&gt;

&lt;h2 id=&quot;settingsとは&quot;&gt;Settingsとは？&lt;/h2&gt;
&lt;p&gt;XcodeGenのプロジェクト仕様ファイル内で使えるビルド設定を定義するプロパティと総称。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;はプロジェクトとターゲットの2箇所で使える&lt;/li&gt;
  &lt;li&gt;ビルド設定の値の解決はレベル順となっている&lt;/li&gt;
  &lt;li&gt;Build Configuration(DebugやReleaseなど)別でビルドパラメータを設定できる&lt;/li&gt;
  &lt;li&gt;Build Configurationにも適用される&lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;プロパティがある&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;でビルド設定を共通化できる&lt;/li&gt;
  &lt;li&gt;Xcode同様に自動で適用されるプリセットビルド設定がある&lt;/li&gt;
  &lt;li&gt;ビルド設定群を別ファイル(xcconfig)として抜き出せる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ビルド設定はプロジェクトとターゲットで出来る&quot;&gt;ビルド設定はプロジェクトとターゲットで出来る&lt;/h2&gt;

&lt;p&gt;例えば次のプロジェクト仕様はプロジェクトとMyAppターゲットそれぞれでビルド設定をセットしています。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;project_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;target_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ビルド設定の値の解決方法&quot;&gt;ビルド設定の値の解決方法&lt;/h2&gt;
&lt;p&gt;ビルド設定の値はレベル順に見ていってる。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Target&lt;/li&gt;
  &lt;li&gt;Target xcconfig file&lt;/li&gt;
  &lt;li&gt;Project&lt;/li&gt;
  &lt;li&gt;Project xcconfig file&lt;/li&gt;
  &lt;li&gt;SDK defaults&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Targetの設定が一番強く、下に行くほど範囲は広いが上書きされる。&lt;/p&gt;

&lt;p&gt;検証するために次のプロジェクト仕様で確認する。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;project_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Settings&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実際にXcodeで確認するとこうなる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-xcodegen-settings/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-xcodegen-settings/1.png&quot; width=&quot;100%&quot; alt=&quot;XcodeBuildSettings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想定通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt;ターゲットでは値は&lt;code class=&quot;highlighter-rouge&quot;&gt;target_value&lt;/code&gt;で解決されてる。&lt;br /&gt;
この挙動に関しては理解は容易と言える。&lt;/p&gt;

&lt;h2 id=&quot;build-configuration別でビルドパラメータを設定できる&quot;&gt;Build Configuration別でビルドパラメータを設定できる&lt;/h2&gt;

&lt;p&gt;DebugやReleaseなどBuild Configuration別でビルド設定を変えることができます。&lt;br /&gt;
例えば下記はDebug時は&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt;が定義され、Release時は&lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt;が定義されます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-configurationにも適用されるbaseプロパティがある&quot;&gt;Build Configurationにも適用される&lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;プロパティがある&lt;/h2&gt;
&lt;p&gt;Build Configurationに依存せず設定したビルドパラメータを入れたい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;を使います。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;release&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HogeHoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合はどのBuild Configurationであっても&lt;code class=&quot;highlighter-rouge&quot;&gt;DEVELOPMENT_TEAM&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;HogeHoge&lt;/code&gt;となります。&lt;/p&gt;

&lt;h2 id=&quot;settinggroupsでビルド設定を共通化できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;でビルド設定を共通化できる&lt;/h2&gt;

&lt;p&gt;例えばターゲットが5個あって、そのうち3つには同じビルド設定群がある場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;を使うことで設定箇所を1箇所にまとめることができます。&lt;/p&gt;

&lt;p&gt;下記は&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;を使わなかったケースです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HogeHoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HogeHoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HogeHoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;DebugApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEBUG_MODE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YES&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;StgApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEBUG_MODE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これだと1箇所ずつ更新する必要があり、更新し忘れなどが発生します。&lt;br /&gt;
下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;settingGroups&lt;/code&gt;を使うことで情報を1箇所に集約することができます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;settingGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ← 任意のグループ名&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HogeHoge&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;DebugApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEBUG_MODE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;YES&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;StgApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DEBUG_MODE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcode同様に自動で適用されるプリセットビルド設定がある&quot;&gt;Xcode同様に自動で適用されるプリセットビルド設定がある&lt;/h2&gt;
&lt;p&gt;Xcodeがプロジェクトやターゲット追加時に自動で設定が設定されるのと同様に、XcodeGenにもプロジェクトとターゲットにデフォルト設定を設定する。&lt;br /&gt;
プロジェクトにはDebugとReleaseの設定が、ターゲットにはプラットフォームとプロダクトタイプに応じた設定が適用される。&lt;/p&gt;

&lt;p&gt;これらのプリセットを変更・無効するには&lt;code class=&quot;highlighter-rouge&quot;&gt;options.settingPresets&lt;/code&gt;プロパティを使います。&lt;br /&gt;
デフォルトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;となっておりプロジェクトとターゲット両方に対して適用されています。&lt;br /&gt;
もしターゲットだけ、プロジェクトだけとしたい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;options.settingPresets: project&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;targets&lt;/code&gt;とすることで部分適用されます。&lt;br /&gt;
もし両方とも自動適用を無効にする場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;になります。&lt;/p&gt;

&lt;h2 id=&quot;ビルド設定群を別ファイルxcconfigとして抜き出せる&quot;&gt;ビルド設定群を別ファイル(xcconfig)として抜き出せる&lt;/h2&gt;
&lt;p&gt;ビルド設定のボリュームが大きくなると、プロジェクト仕様全体として見通しの悪いファイルとなってしまいます。&lt;br /&gt;
その場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;configFiles&lt;/code&gt;を使って&lt;code class=&quot;highlighter-rouge&quot;&gt;xcconfig&lt;/code&gt;ファイルをインポートしてビルド構成を別ファイルに抽出できます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;configFiles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;debug.xcconfig&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;release.xcconfig&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;configFiles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MyApp/debug.xcconfig&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MyApp/release.xcconfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configFiles&lt;/code&gt;でもプロジェクト単位とターゲット単位で設定できます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;xcconfig&lt;/code&gt;について分からない方は「&lt;span&gt;&lt;a href=&quot;/ios/xcode/ios-xcode-xcconfig-how-to-use&quot;&gt;Xcodeのxcconfigの理解と使い方&lt;/a&gt;&lt;/span&gt;
」にまとめた記事をお読みください。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;
&lt;p&gt;この記事を書くにあたって、xcconfigの仕様を調べましたが、settings周りの仕様はxcconfigの仕様を把握すると理解が一気に深まりました。&lt;br /&gt;
xcconfigについては「&lt;span&gt;&lt;a href=&quot;/ios/xcode/ios-xcode-xcconfig-how-to-use&quot;&gt;Xcodeのxcconfigの理解と使い方&lt;/a&gt;&lt;/span&gt;
」にまとめてあります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="xcodegen" /><category term="xcode" /><category term="xcconfig" /><summary type="html">XcodeGenは便利ですが、プロジェクト仕様ファイル(project.yml)のSettingsに関して自分の中で不透明なので整理しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-ios-xcodegen-settings/0.png" /></entry><entry><title type="html">XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods" rel="alternate" type="text/html" title="XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-29T22:26:25+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods">&lt;p&gt;Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。&lt;br /&gt;
この記事ではXcodeGenを使ってCarthageやCocoaPodsによるライブラリ管理されたXcodeプロジェクトを生成する方法を説明します。&lt;/p&gt;

&lt;p&gt;もしXcodeGenの特徴やメリットを把握していない場合は、「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;br /&gt;
また基本的な使い方について理解したい場合は「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic-usage&quot;&gt;XcodeGenで最低限のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;br /&gt;
もしCarthageについて分からない部分があれば、「&lt;span&gt;&lt;a href=&quot;/ios/carthage/ios-carthage&quot;&gt;Carthageの使い方を体系的に理解する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenで通常のiosプロジェクトを用意する&quot;&gt;XcodeGenで通常のiOSプロジェクトを用意する&lt;/h2&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSWithCarthageProj&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSWithUTProjTests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle.unit-test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProjTests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sourcesの&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithCarthageProj&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithCarthageProjTests&lt;/code&gt;はターゲット追加時にXcodeによって自動生成されるファイル群です。&lt;br /&gt;
このyamlを&lt;code class=&quot;highlighter-rouge&quot;&gt;project.yml&lt;/code&gt;として保存して&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;コマンドを実行するとUnitTest付きのiOSアプリのXcodeプロジェクトが生成されます。&lt;/p&gt;

&lt;h2 id=&quot;プロジェクトにcarthage管理のライブラリを追加する&quot;&gt;プロジェクトにCarthage管理のライブラリを追加する&lt;/h2&gt;

&lt;p&gt;例えばCarthageで&lt;code class=&quot;highlighter-rouge&quot;&gt;Alamofire&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;AlamofireImage&lt;/code&gt;をビルドして、それらをプロダクトターゲットに追加する場合は次のように書きます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;iOSWithCarthageProj&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ~ 略 ~&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Alamofire&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AlamofireImage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらを追記して実行すると、フレームワークのリンクとビルドフェイズにcarthage copy-frameworksのスクリプトフェイズを自動生成してくれます。&lt;br /&gt;
これは便利ですね。Carthageの面倒な点をキレイにカバーできています。&lt;/p&gt;

&lt;h3 id=&quot;注意事項&quot;&gt;注意事項&lt;/h3&gt;
&lt;p&gt;XcodeGenはあくまでもXcodeプロジェクトをプロジェクト仕様に基づいて生成するだけです。&lt;br /&gt;
そのためCarthageによるフレームワークビルド自体は、事前に行っておく必要があります。&lt;br /&gt;
Carthageでフレームワークビルドをせず先に&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行すると次のように形はあるけど存在しないリンク情報がセットされてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/1.png&quot; width=&quot;50%&quot; alt=&quot;MissedFrameworks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CartfileやフレームワークビルドはXcodeGenの責任範囲外なので自分で用意します。&lt;/p&gt;

&lt;h3 id=&quot;carthageの実行パスを変更する&quot;&gt;Carthageの実行パスを変更する&lt;/h3&gt;

&lt;p&gt;Carthageにパスが通っていれば特に問題は起きません。
しかし、MintでCarthageを管理している場合、実行パスを指定する必要があります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;carthageExecutablePath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mint run Carthage/Carthage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;carthageのビルド結果のパスを変更する&quot;&gt;Carthageのビルド結果のパスを変更する&lt;/h3&gt;

&lt;p&gt;デフォルトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage/Build&lt;/code&gt;です。
もしこれを別のパスに変更したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;options.carthageBuildPath&lt;/code&gt;で指定します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;carthageBuildPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../../Carthage/Build&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;プロジェクトにcocoapods管理のライブラリを追加する&quot;&gt;プロジェクトにCocoaPods管理のライブラリを追加する&lt;/h2&gt;

&lt;p&gt;XcodeGenで管理されたXcodeプロジェクトにCocoaPods管理のライブラリを追加する場合について説明します。&lt;/p&gt;

&lt;p&gt;実は非常に単純です。&lt;/p&gt;

&lt;p&gt;というのもXcodeGenはワークスペースではなくプロジェクトを生成しているだけなので、
プロジェクト仕様ファイルでPodfileなどを参照する必要ありません。
XcodeGenでプロジェクト生成後に、&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を実行するだけです。&lt;/p&gt;

&lt;p&gt;そして実はプロジェクト仕様ファイルには、生成コマンド実行後フックが用意されているのでプロジェクト仕様ファイル内で&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を呼び出すことを設定できます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;postGenCommand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pod install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このオプションを追加することで&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行するとそのまま&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;も実行されます。&lt;/p&gt;

&lt;h3 id=&quot;疑問点&quot;&gt;疑問点&lt;/h3&gt;
&lt;p&gt;公式では&lt;code class=&quot;highlighter-rouge&quot;&gt;--use-cache&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;postGenCommand&lt;/code&gt;オプションを組み合わせを推奨しています。
しかし、&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;を変更して&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行してもスキップされてしまいます。
Podfileだけの更新であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を実行すれば良いという話ではありますが…&lt;/p&gt;

&lt;h2 id=&quot;findcarthageframeworksというオプション&quot;&gt;findCarthageFrameworksというオプション&lt;/h2&gt;

&lt;p&gt;Carthageのオプションに&lt;code class=&quot;highlighter-rouge&quot;&gt;findCarthageFrameworks&lt;/code&gt;というものがあります。
これは例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMapKit&lt;/code&gt;を使う場合通常であれば依存してるフレームワーク全部を記載します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveCocoa&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveMapKit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし&lt;code class=&quot;highlighter-rouge&quot;&gt;findCarthageFrameworks&lt;/code&gt;オプションを使うことで&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveCocoa&lt;/code&gt;の時点で&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMapKit&lt;/code&gt;も一緒に依存解決してくれるオプションです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;findCarthageFrameworks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveCocoa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ReactiveMapKitも見つける&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OtherCarthageDependency&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;findFrameworks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 個別にグローバルオプションを無効化することもできる&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcodegenでbuild-configurationの設定をする&quot;&gt;XcodeGenでBuild Configurationの設定をする&lt;/h2&gt;
&lt;p&gt;XcodeGenを使って、Carthage＋CocoaPods＋UnitTestのXcodeプロジェクトを生成することができました。
次はDebugやReleaseなどBuild Configurationの設定を「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-build-configuration-scheme&quot;&gt;XcodeGenでBuild ConfigurationとSchemeの設定をする&lt;/a&gt;&lt;/span&gt;
」で説明します。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="xcodegen" /><category term="carthage" /><category term="cocoapods" /><summary type="html">Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。 この記事ではXcodeGenを使ってCarthageやCocoaPodsによるライブラリ管理されたXcodeプロジェクトを生成する方法を説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/0.png" /></entry></feed>