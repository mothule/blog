<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-07-29T23:34:23+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">たまに必要なGitの操作tips</title><link href="https://blog.mothule.com/tools/git/tools-git-tips" rel="alternate" type="text/html" title="たまに必要なGitの操作tips" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T23:34:17+09:00</updated><id>https://blog.mothule.com/tools/git/tools-git-tips</id><content type="html" xml:base="https://blog.mothule.com/tools/git/tools-git-tips">&lt;p&gt;普段使いでは使うことはない操作だけどたまに必要になる操作集を集めてます。
順次増やしていきます。&lt;/p&gt;

&lt;h2 id=&quot;リモートのみファイル削除&quot;&gt;リモートのみファイル削除&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rm &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ファイル名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;フォルダ削除&quot;&gt;フォルダ削除&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rm &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ディレクトリ名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;最新のみcloneシャロークローン&quot;&gt;最新のみclone(シャロークローン)&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Git URL]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;指定ワードを含むコミットを検索&quot;&gt;指定ワードを含むコミットを検索&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;検索ワード] &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--patch&lt;/code&gt;をつけない場合はログ一覧が並びます。&lt;/p&gt;

&lt;h2 id=&quot;コミットした人で検索&quot;&gt;コミットした人で検索&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;コミットした人の名前]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="tools" /><category term="git" /><summary type="html">普段使いでは使うことはない操作だけどたまに必要になる操作集を集めてます。 順次増やしていきます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-tools-git-tips/0.png" /></entry><entry><title type="html">Embedded frameworkの理解と作成方法</title><link href="https://blog.mothule.com/ios/ios-embedded-framework" rel="alternate" type="text/html" title="Embedded frameworkの理解と作成方法" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T21:40:05+09:00</updated><id>https://blog.mothule.com/ios/ios-embedded-framework</id><content type="html" xml:base="https://blog.mothule.com/ios/ios-embedded-framework">&lt;p&gt;開発中のビルド時間の短縮やレイヤードアーキテクチャをより疎結合にする設計や、Extensionや他Platformなどでコード共有したい場合は、Embedded frameworkで解決できます。&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkとは&quot;&gt;Embedded Frameworkとは？&lt;/h2&gt;
&lt;p&gt;事前に組み込まれたフレームワークです。static libraryみたいな扱いです。&lt;/p&gt;

&lt;h3 id=&quot;例を使って説明&quot;&gt;例を使って説明&lt;/h3&gt;
&lt;p&gt;例えばiOSアプリターゲットにA,B,Cというソースコードが含まれてたとします。&lt;br /&gt;
このうちCファイルを別のframeworkターゲットとして抜き出して、&lt;br /&gt;
それを元のiOSアプリターゲットのフレームワークとして組み込む方法です。&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkのメリット&quot;&gt;Embedded Frameworkのメリット&lt;/h2&gt;

&lt;p&gt;一見助長に感じる制御フローですが、次のケースでその恩恵を得られます。&lt;/p&gt;

&lt;h3 id=&quot;ケース1-他プラットフォームのコード共有&quot;&gt;ケース1: 他プラットフォームのコード共有&lt;/h3&gt;
&lt;p&gt;最近のアプリケーションではiPhone(iOS)に留まらず、watchOSやtvOSなど複数端末で一つのサービスを横断して使うことでサービス体験を向上させてます。&lt;br /&gt;
またAPIのバージョンアップによりアプリ外のサービスにも機能拡張できるApp Extensionによりアプリ外にもサービスロジックが必要になるなど、&lt;strong&gt;現状のアプリは、複数プラットフォーム展開によるコード流用のニーズが高いです。&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;watchOS&lt;/th&gt;
      &lt;th&gt;AppExtension&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/1.png&quot; width=&quot;100%&quot; alt=&quot;watchOSTempl&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/2.png&quot; width=&quot;100%&quot; alt=&quot;AppExtension&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Embedded frameworkは、iOSアプリターゲットからコードを抽出し別ターゲットで管理することでiOSアプリターゲット以外でもframeworkとして使うことができることで、コード共有を実現しています。&lt;/p&gt;

&lt;h3 id=&quot;ケース2-ビルド時間の短縮&quot;&gt;ケース2: ビルド時間の短縮&lt;/h3&gt;
&lt;p&gt;Xcodeで使われているビルダーではインクリメンタルビルドをサポートしており、開発中では主にこのビルド方式が多く使われます。
このインクリメンタルビルドは変更があった箇所と変更に影響ある箇所だけをビルドすることでビルド時間短縮します。&lt;/p&gt;

&lt;p&gt;これをコードをframeworkで分離することでコード改修した箇所でframework先まではビルドされることはないので、より少ない時間でビルドが終わります。&lt;/p&gt;

&lt;p&gt;同じ理論でビルド時間短縮してるのがCocoaPodsからのCarthageになります。&lt;/p&gt;

&lt;h3 id=&quot;ケース3-レイヤードアーキテクチャの疎結合を強化&quot;&gt;ケース3: レイヤードアーキテクチャの疎結合を強化&lt;/h3&gt;
&lt;p&gt;Embedded frameworkといってもframeworkと同じ扱いになり、framework内の機能を使うには&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;しないとコンパイルエラーとなります。&lt;br /&gt;
つまり言語レベルでレイヤー間のアクセス違反を検知してくれるようになります。&lt;br /&gt;
（検知といっても検知した後はエンジニアが気づく必要があるので完璧とはいえないですが）&lt;/p&gt;

&lt;h2 id=&quot;embedded-frameworkを作る&quot;&gt;Embedded Frameworkを作る&lt;/h2&gt;

&lt;p&gt;仕組みがシンプルですが、実装方法もシンプルです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Frameworkターゲット追加&lt;/li&gt;
  &lt;li&gt;作成されたフォルダ内にコード実装&lt;/li&gt;
  &lt;li&gt;アプリターゲット &amp;gt; Generalからフレームワークを追加&lt;/li&gt;
  &lt;li&gt;アプリ側コードからimportして呼び出し&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;では実際にLogicというEmbedded frameworkを用意し、中にはCalculatorという構造体を用意してみます。&lt;/p&gt;

&lt;h3 id=&quot;frameworkターゲット追加&quot;&gt;Frameworkターゲット追加&lt;/h3&gt;

&lt;p&gt;プロジェクトのGeneralからターゲット追加します。↓&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/3.png&quot; width=&quot;100%&quot; alt=&quot;XcodeTargetGeneral&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frameworkを選択します。↓&lt;br /&gt;
注意点としてXcodeは定期的にUIを変更するため、時期によってはこの画面や名称とは違うケースがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/4.png&quot; width=&quot;100%&quot; alt=&quot;XcodeAddTarget&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;作成されたフォルダ内にコード実装&quot;&gt;作成されたフォルダ内にコード実装&lt;/h3&gt;

&lt;p&gt;Frameworkターゲットを追加するとターゲットと一緒にフォルダも作成されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/5.png&quot; width=&quot;50%&quot; alt=&quot;XcodeAddedFrameworkTarget&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コードは何でもいいですが、今回は下記コードをFrameworkの管理するフォルダに追加します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;アクセススコープに注意&quot;&gt;アクセススコープに注意&lt;/h4&gt;
&lt;p&gt;framework全般の常識として外部から使われることを想定しているクラスやメソッドのスコープをpublicにして呼び出し元から見えるようにします。&lt;br /&gt;
スコープ未指定だとframework外だと見えないので注意です。&lt;/p&gt;

&lt;h3 id=&quot;アプリターゲット--generalからフレームワークを追加&quot;&gt;アプリターゲット &amp;gt; Generalからフレームワークを追加&lt;/h3&gt;
&lt;p&gt;作成したframeworkをiOSアプリターゲットから使えるようにするために関連付けする必要があります。&lt;br /&gt;
アプリターゲットのGeneralからframework追加を行います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/6.png&quot; width=&quot;100%&quot; alt=&quot;XcodeAddFramework&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;＋&lt;/code&gt;を選ぶことで選択ダイアログが出てきますが、内部ターゲットになるのですぐ見つけれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-29-ios-embedded-framework/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-29-ios-embedded-framework/7.png&quot; width=&quot;80%&quot; alt=&quot;XcodeAddFrameworkDialog&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;アプリ側コードからimportして呼び出し&quot;&gt;アプリ側コードからimportして呼び出し&lt;/h3&gt;

&lt;p&gt;あとは使いたい場所でimportして呼び出すだけです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回のコードは&lt;a href=&quot;https://github.com/mothule/research_embedded_framework&quot;&gt;GitHub&lt;/a&gt;にあげてあります。実際にXcode立ち上げて確認したい方はどうぞ。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><summary type="html">開発中のビルド時間の短縮やレイヤードアーキテクチャをより疎結合にする設計や、Extensionや他Platformなどでコード共有したい場合は、Embedded frameworkで解決できます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-ios-embedded-framework/0.png" /></entry><entry><title type="html">XcodeGenでEmbedded Frameworkを設定する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework" rel="alternate" type="text/html" title="XcodeGenでEmbedded Frameworkを設定する" /><published>2020-07-29T00:00:00+09:00</published><updated>2020-07-29T23:34:17+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-embedded-framework">&lt;p&gt;XcodeGenを使ってEmbedded frameworkを設定する方法について説明します。&lt;/p&gt;

&lt;p&gt;XcodeGenの基本的な使い方を理解していたら非常に簡単です。&lt;br /&gt;
基本的な使い方が知りたい場合は下記記事をご覧ください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic-usage&quot;&gt;XcodeGenで最低限のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-carthage-cocoapods&quot;&gt;XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;embedded-frameworkとは&quot;&gt;Embedded Frameworkとは？&lt;/h2&gt;

&lt;p&gt;Embedded Frameworkについて詳細を知りたい場合は、「&lt;span&gt;&lt;a href=&quot;/ios/ios-embedded-framework&quot;&gt;Embedded frameworkの理解と作成方法&lt;/a&gt;&lt;/span&gt;
」をご覧ください。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenでembedded-frameworkを作成する&quot;&gt;XcodeGenでEmbedded Frameworkを作成する&lt;/h2&gt;

&lt;p&gt;まずは単純なiOSアプリターゲットを持つXcodeプロジェクトを用意します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EmbeddedFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここからframeworkターゲットを追加し、アプリターゲットにリンクするまでが大まかな流れです。&lt;br /&gt;
これをXcodeGenで表現すると、下記のようになります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;EmbeddedFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EmbeddedFramework&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Logic&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;framework&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Logic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies.target&lt;/code&gt;で対象ターゲットを選ぶだけです。これだけでframeworkがリンクされます。&lt;/p&gt;

&lt;h3 id=&quot;事前にフォルダ用意は必要&quot;&gt;事前にフォルダ用意は必要&lt;/h3&gt;
&lt;p&gt;他ターゲットと変わらず、ターゲット追加時にはデフォルトでフォルダやファイルを作成してくれるので、
まずはXcode上でターゲットを追加してフォルダ作成後にプロジェクト仕様を追記する流れをおすすめします。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="xcodegen" /><summary type="html">XcodeGenを使ってEmbedded frameworkを設定する方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-29-ios-xcodegen-embedded-framework/0.png" /></entry><entry><title type="html">XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods" rel="alternate" type="text/html" title="XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-29T22:26:25+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-carthage-cocoapods">&lt;p&gt;Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。&lt;br /&gt;
この記事ではXcodeGenを使ってCarthageやCocoaPodsによるライブラリ管理されたXcodeプロジェクトを生成する方法を説明します。&lt;/p&gt;

&lt;p&gt;もしXcodeGenの特徴やメリットを把握していない場合は、「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;br /&gt;
また基本的な使い方について理解したい場合は「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic-usage&quot;&gt;XcodeGenで最低限のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;br /&gt;
もしCarthageについて分からない部分があれば、「&lt;span&gt;&lt;a href=&quot;/ios/carthage/ios-carthage&quot;&gt;Carthageの使い方を体系的に理解する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenで通常のiosプロジェクトを用意する&quot;&gt;XcodeGenで通常のiOSプロジェクトを用意する&lt;/h2&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSWithCarthageProj&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSWithUTProjTests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle.unit-test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProjTests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithCarthageProj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sourcesの&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithCarthageProj&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithCarthageProjTests&lt;/code&gt;はターゲット追加時にXcodeによって自動生成されるファイル群です。&lt;br /&gt;
このyamlを&lt;code class=&quot;highlighter-rouge&quot;&gt;project.yml&lt;/code&gt;として保存して&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;コマンドを実行するとUnitTest付きのiOSアプリのXcodeプロジェクトが生成されます。&lt;/p&gt;

&lt;h2 id=&quot;プロジェクトにcarthage管理のライブラリを追加する&quot;&gt;プロジェクトにCarthage管理のライブラリを追加する&lt;/h2&gt;

&lt;p&gt;例えばCarthageで&lt;code class=&quot;highlighter-rouge&quot;&gt;Alamofire&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;AlamofireImage&lt;/code&gt;をビルドして、それらをプロダクトターゲットに追加する場合は次のように書きます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;iOSWithCarthageProj&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ~ 略 ~&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Alamofire&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AlamofireImage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらを追記して実行すると、フレームワークのリンクとビルドフェイズにcarthage copy-frameworksのスクリプトフェイズを自動生成してくれます。&lt;br /&gt;
これは便利ですね。Carthageの面倒な点をキレイにカバーできています。&lt;/p&gt;

&lt;h3 id=&quot;注意事項&quot;&gt;注意事項&lt;/h3&gt;
&lt;p&gt;XcodeGenはあくまでもXcodeプロジェクトをプロジェクト仕様に基づいて生成するだけです。&lt;br /&gt;
そのためCarthageによるフレームワークビルド自体は、事前に行っておく必要があります。&lt;br /&gt;
Carthageでフレームワークビルドをせず先に&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行すると次のように形はあるけど存在しないリンク情報がセットされてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/1.png&quot; width=&quot;50%&quot; alt=&quot;MissedFrameworks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CartfileやフレームワークビルドはXcodeGenの責任範囲外なので自分で用意します。&lt;/p&gt;

&lt;h3 id=&quot;carthageの実行パスを変更する&quot;&gt;Carthageの実行パスを変更する&lt;/h3&gt;

&lt;p&gt;Carthageにパスが通っていれば特に問題は起きません。
しかし、MintでCarthageを管理している場合、実行パスを指定する必要があります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;carthageExecutablePath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mint run Carthage/Carthage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;carthageのビルド結果のパスを変更する&quot;&gt;Carthageのビルド結果のパスを変更する&lt;/h3&gt;

&lt;p&gt;デフォルトでは&lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage/Build&lt;/code&gt;です。
もしこれを別のパスに変更したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;options.carthageBuildPath&lt;/code&gt;で指定します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;carthageBuildPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../../Carthage/Build&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;プロジェクトにcocoapods管理のライブラリを追加する&quot;&gt;プロジェクトにCocoaPods管理のライブラリを追加する&lt;/h2&gt;

&lt;p&gt;XcodeGenで管理されたXcodeプロジェクトにCocoaPods管理のライブラリを追加する場合について説明します。&lt;/p&gt;

&lt;p&gt;実は非常に単純です。&lt;/p&gt;

&lt;p&gt;というのもXcodeGenはワークスペースではなくプロジェクトを生成しているだけなので、
プロジェクト仕様ファイルでPodfileなどを参照する必要ありません。
XcodeGenでプロジェクト生成後に、&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を実行するだけです。&lt;/p&gt;

&lt;p&gt;そして実はプロジェクト仕様ファイルには、生成コマンド実行後フックが用意されているのでプロジェクト仕様ファイル内で&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を呼び出すことを設定できます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;postGenCommand&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pod install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このオプションを追加することで&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行するとそのまま&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;も実行されます。&lt;/p&gt;

&lt;h3 id=&quot;疑問点&quot;&gt;疑問点&lt;/h3&gt;
&lt;p&gt;公式では&lt;code class=&quot;highlighter-rouge&quot;&gt;--use-cache&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;postGenCommand&lt;/code&gt;オプションを組み合わせを推奨しています。
しかし、&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;を変更して&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行してもスキップされてしまいます。
Podfileだけの更新であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;を実行すれば良いという話ではありますが…&lt;/p&gt;

&lt;h2 id=&quot;findcarthageframeworksというオプション&quot;&gt;findCarthageFrameworksというオプション&lt;/h2&gt;

&lt;p&gt;Carthageのオプションに&lt;code class=&quot;highlighter-rouge&quot;&gt;findCarthageFrameworks&lt;/code&gt;というものがあります。
これは例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMapKit&lt;/code&gt;を使う場合通常であれば依存してるフレームワーク全部を記載します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveCocoa&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveMapKit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし&lt;code class=&quot;highlighter-rouge&quot;&gt;findCarthageFrameworks&lt;/code&gt;オプションを使うことで&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveCocoa&lt;/code&gt;の時点で&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMapKit&lt;/code&gt;も一緒に依存解決してくれるオプションです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;findCarthageFrameworks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReactiveCocoa&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ReactiveMapKitも見つける&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OtherCarthageDependency&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;findFrameworks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 個別にグローバルオプションを無効化することもできる&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcodegenでbuild-configurationの設定をする&quot;&gt;XcodeGenでBuild Configurationの設定をする&lt;/h2&gt;
&lt;p&gt;XcodeGenを使って、Carthage＋CocoaPods＋UnitTestのXcodeプロジェクトを生成することができました。
次はDebugやReleaseなどBuild Configurationの設定を「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-build-configuration-scheme&quot;&gt;XcodeGenでBuild ConfigurationとSchemeの設定をする&lt;/a&gt;&lt;/span&gt;
」で説明します。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="xcodegen" /><category term="carthage" /><category term="cocoapods" /><summary type="html">Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。 この記事ではXcodeGenを使ってCarthageやCocoaPodsによるライブラリ管理されたXcodeプロジェクトを生成する方法を説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-28-ios-xcodegen-carthage-cocoapods/0.png" /></entry><entry><title type="html">XcodeGenを基本から理解する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic" rel="alternate" type="text/html" title="XcodeGenを基本から理解する" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-29T22:26:25+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic">&lt;p&gt;Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。&lt;br /&gt;
でもXcodeGenでXcodeプロジェクトを生成することで、このストレスから解消できます。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenとは&quot;&gt;XcodeGenとは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yonaskolb/XcodeGen&quot;&gt;XcodeGen&lt;/a&gt;とは、フォルダ構造と&lt;code class=&quot;highlighter-rouge&quot;&gt;プロジェクト仕様ファイル&lt;/code&gt;からXcodeプロジェクトを構築するコマンドラインツールです。なおSwiftで作られてます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yonaskolb/XcodeGen/raw/master/Assets/Logo_animated.gif&quot; width=&quot;100px&quot; alt=&quot;XcodeGen Logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;プロジェクト仕様ファイル&quot;&gt;プロジェクト仕様ファイル&lt;/h2&gt;
&lt;p&gt;YAMLまたはJSONで記述されており、次の項目を定義できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ターゲット&lt;/li&gt;
  &lt;li&gt;構成&lt;/li&gt;
  &lt;li&gt;スキーム&lt;/li&gt;
  &lt;li&gt;カスタムビルド設定&lt;/li&gt;
  &lt;li&gt;その他オプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フォルダ構造がそのままXcodeプロジェクトのディレクトリ構造に反映される仕組みとなってます。&lt;br /&gt;
またデフォルト値が用意されているので必要な部分だけをカスタマイズするだけで構築できます。&lt;/p&gt;

&lt;h3 id=&quot;プロジェクト仕様ファイルの中身&quot;&gt;プロジェクト仕様ファイルの中身&lt;/h3&gt;

&lt;p&gt;例えば下記は、YAML形式のプロジェクト仕様ファイルです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MyProject&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.myapp&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Yams&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/jpsim/Yams&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deploymentTarget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.0&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;CUSTOM_BUILD_SETTING&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my_debug_value&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;CUSTOM_BUILD_SETTING&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my_release_value&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MyFramework&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;carthage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Alamofire&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Vendor/MyFramework.framework&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Contacts.framework&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libc++.tbd&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Yams&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;MyFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;framework&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MyFramework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;XcodeGenはこのファイルを元にXcodeプロジェクトを生成します。&lt;br /&gt;
つまりこのファイルをGit管理するだけでXcodeプロジェクトをGit管理から外すことができます。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenのメリットはコンフリクト解決のしやすさ&quot;&gt;XcodeGenのメリットはコンフリクト解決のしやすさ&lt;/h2&gt;

&lt;p&gt;フォルダ構造とプロジェクト仕様ファイルに基づいてXcodeプロジェクトを生成するため、&lt;br /&gt;
ファイル管理等はXcodeプロジェクト(.xcodeproj)ではなくなりことで、&lt;br /&gt;
.xcodeprojをgit管理する必要がなくなり、マージ時の衝突がなくなります。&lt;/p&gt;

&lt;p&gt;またxcoderpoj(xml)よりも読みやすいプロジェクト設定で管理することができるようになります。&lt;br /&gt;
なのでもしコンフリクトが発生しても通常のJSONやyml同様に衝突解決が容易になります。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenの特徴は衝突解決だけじゃない&quot;&gt;XcodeGenの特徴は衝突解決だけじゃない&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ビルド設定をグループという単位で管理するため、複数のターゲット間でビルド設定を共有できます。&lt;/li&gt;
  &lt;li&gt;スキームの増減管理も簡単に行えます。&lt;/li&gt;
  &lt;li&gt;CIなどからXcodeプロジェクトを構築できます。&lt;/li&gt;
  &lt;li&gt;プロジェクト仕様を複数ファイルに分散させて共有や上書きなどができます。&lt;/li&gt;
  &lt;li&gt;Carthage経由のフレームワークを統合できます。&lt;/li&gt;
  &lt;li&gt;依存関係をGraphvizを使って図をエクスポートできます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xcodegenのインストール方法&quot;&gt;XcodeGenのインストール方法&lt;/h2&gt;

&lt;h3 id=&quot;必須条件&quot;&gt;必須条件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Xcode11&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mint&quot;&gt;Mint&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mint install yonaskolb/xcodegen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;homebrew&quot;&gt;Homebrew&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install xcodegen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;利用方法&quot;&gt;利用方法&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcodegen generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行すると、カレントディレクトリ上でプロジェクト仕様ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;project.yml&lt;/code&gt;)を検索し、仕様に沿ったXcodeプロジェクトが作成されます。&lt;/p&gt;

&lt;h3 id=&quot;一部オプションの説明&quot;&gt;一部オプションの説明&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--spec&lt;/code&gt;: 検索するファイルパスを指定します。ファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;.yml&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt;になります。デフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;project.yml&lt;/code&gt;です。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--project&lt;/code&gt;: 生成先のパス。デフォルトはプロジェクト仕様ファイルと同じディレクトリ。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--quiet&lt;/code&gt;: 通知と成功時の通知を表示しなくなります。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--use-cache&lt;/code&gt;: このオプションをつけて実行するとXcodeプロジェクト生成時にキャッシュファイルも生成し、次回以降不要であれば生成をスキップします。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--cache-path&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;--use-cache&lt;/code&gt;で作成されるキャッシュファイルのパス指定。デフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xcodegen/cache/{PROJECT_SPEC_PATH_HASH}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他オプションやコマンドに関しては&lt;code class=&quot;highlighter-rouge&quot;&gt;$ xcodegen help&lt;/code&gt;で確認できます。&lt;/p&gt;

&lt;h2 id=&quot;初期プロジェクトをxcodegenで生成してみる&quot;&gt;初期プロジェクトをXcodeGenで生成してみる&lt;/h2&gt;

&lt;p&gt;XcodeGenの概要からインストールまでを説明しました。&lt;br /&gt;
実際にXcodeプロジェクト生成は、「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic-usage&quot;&gt;XcodeGenで最低限のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;
」で説明してます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="xcodegen" /><summary type="html">Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。 でもXcodeGenでXcodeプロジェクトを生成することで、このストレスから解消できます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-28-ios-xcodegen-basic/0.png" /></entry><entry><title type="html">XcodeGenで最低限のXcodeプロジェクトを生成する</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic-usage" rel="alternate" type="text/html" title="XcodeGenで最低限のXcodeプロジェクトを生成する" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-29T22:26:25+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic-usage</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-basic-usage">&lt;p&gt;Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。&lt;br /&gt;
この記事ではXcodeGenを実際に使って最小プロジェクトを作って使い方を説明します。&lt;/p&gt;

&lt;p&gt;もしXcodeGenの特徴やメリットを把握していない場合は、「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-basic&quot;&gt;XcodeGenを基本から理解する&lt;/a&gt;&lt;/span&gt;
」に詳細をまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;最小仕様でxcodeプロジェクトを生成する&quot;&gt;最小仕様でXcodeプロジェクトを生成する&lt;/h2&gt;

&lt;p&gt;XcodeGenの特徴の一つとしてデフォルト値が用意されているので指定がない場合はデフォルト値を使ってXcodeプロジェクトを生成するようです。&lt;/p&gt;

&lt;h3 id=&quot;空フォルダ上で実行&quot;&gt;空フォルダ上で実行&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcodegen generate
No project spec found at /your/workspace/project.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;プロジェクト仕様ファイルがないと怒られます。ファイルは必要なようです。&lt;/p&gt;

&lt;h3 id=&quot;空のプロジェクト仕様ファイルで実行&quot;&gt;空のプロジェクト仕様ファイルで実行&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcodegen generate
Parsing project spec failed: Decoding failed at &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: Nothing found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;のデコードに失敗しました。どうやら&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;を探しているようです。&lt;/p&gt;

&lt;h3 id=&quot;nameを入れたプロジェクト仕様ファイルで実行&quot;&gt;nameを入れたプロジェクト仕様ファイルで実行&lt;/h3&gt;

&lt;p&gt;次のようにproject.ymlにnameを追加して実行してみます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;project.yml
name: MinimumProject

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcodegen generate
⚙️  Generating plists...
⚙️  Generating project...
⚙️  Writing project...
Created project at /your/workspace/MinimumProject.xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;どうやら作成に成功したようです。下記スクショのようにファイルもフォルダ設計もターゲットも何もない状態です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/1.png&quot; width=&quot;100%&quot; alt=&quot;MinimumProjectXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なお今回のファイルは&lt;a href=&quot;https://github.com/mothule/research_xcodegen/tree/master/minimum_proj&quot;&gt;GitHub&lt;/a&gt;に上げてますので全体像が分からない場合はこちらを見てください。&lt;/p&gt;

&lt;h2 id=&quot;iosプロジェクトを生成する&quot;&gt;iOSプロジェクトを生成する&lt;/h2&gt;
&lt;p&gt;ではiOSをプラットフォームとした空プロジェクトを目指して見ます。&lt;/p&gt;

&lt;p&gt;その前に簡単にXcodeがデフォルトで用意してるテンプレートで目指すゴールを用意します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/2.png&quot; width=&quot;100%&quot; alt=&quot;iOSMinimumProjectXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ざっと見て追加する点は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ターゲット
    &lt;ul&gt;
      &lt;li&gt;表示名&lt;/li&gt;
      &lt;li&gt;バンドルID&lt;/li&gt;
      &lt;li&gt;バージョン&lt;/li&gt;
      &lt;li&gt;ビルド番号&lt;/li&gt;
      &lt;li&gt;端末制限(iOSとiPad)&lt;/li&gt;
      &lt;li&gt;初期表示storyboard&lt;/li&gt;
      &lt;li&gt;画面横向きサポート&lt;/li&gt;
      &lt;li&gt;ステータスバー&lt;/li&gt;
      &lt;li&gt;アイコンと起動画面&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;フォルダとファイルがある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりが必要そうです。&lt;/p&gt;

&lt;h3 id=&quot;ターゲットを追加する&quot;&gt;ターゲットを追加する&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSMinimumProject&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;targets&lt;/code&gt;の子にはプロジェクト名が入ります。&lt;br /&gt;
今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSMinimumProject&lt;/code&gt;というターゲット名にしてます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;には&lt;a href=&quot;https://github.com/yonaskolb/XcodeGen/blob/master/Docs/ProjectSpec.md#product-type&quot;&gt;Product Type&lt;/a&gt;の何れかをセットします。
今回は単純なアプリケーションなので&lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;platform&lt;/code&gt;には&lt;a href=&quot;https://github.com/yonaskolb/XcodeGen/blob/master/Docs/ProjectSpec.md#platform&quot;&gt;Platform&lt;/a&gt;の何れかをセットします。
今回はiOSなので&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行した結果が下図になります。
&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/3.png&quot; width=&quot;100%&quot; alt=&quot;iOSMinimumProjectXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロジェクトは追加されています。
しかしIdentityやDevice Orientationなど中身がスカスカです。今度はこれを埋めていきます。&lt;/p&gt;

&lt;h4 id=&quot;マルチプラットフォームはで囲む&quot;&gt;マルチプラットフォームは[]で囲む&lt;/h4&gt;
&lt;p&gt;もし複数プラットフォーム対応の場合は
&lt;code class=&quot;highlighter-rouge&quot;&gt;platform: [iOS, tvOS]&lt;/code&gt;のように&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;で囲みます。&lt;/p&gt;

&lt;h3 id=&quot;infoplistが必要&quot;&gt;Info.plistが必要&lt;/h3&gt;
&lt;p&gt;IdentityやDevice Orientationなどは元データはXcodeプロジェクトに登録されているのではなく、Info.plistに登録されてます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/4.png&quot; width=&quot;100%&quot; alt=&quot;Info.plist&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なので次はInfo.plistやソースファイルなどが入ったフォルダを用意します。&lt;br /&gt;
フォルダ名は任意ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSMinimumProject&lt;/code&gt;という名前にしときます。&lt;br /&gt;
そしてtargetのルートディレクトリとして&lt;code class=&quot;highlighter-rouge&quot;&gt;sources&lt;/code&gt;プロパティでパスを渡します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSMinimumProject&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行すると無事不足してた部分が追加されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/5.png&quot; width=&quot;100%&quot; alt=&quot;iOSMinimumProjectXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;初期ファイル群は自分で用意が必要&quot;&gt;初期ファイル群は自分で用意が必要&lt;/h4&gt;
&lt;p&gt;AppDelegate.swiftやInfo.plistなどは自身が追加したファイル同様外部ファイルなため、自分で用意する必要があります。&lt;br /&gt;
しかしXcodeGenには特別初期ファイル群を用意する機能は備わっていないようなので、&lt;br /&gt;
Xcodeを立ち上げて適当にプロジェクトを生成した後に、一緒に作成される初期ファイル群を使う手間があります。&lt;/p&gt;

&lt;p&gt;このことからターゲット追加における最適フローは、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一度Xcodeプロジェクトでターゲット作成する&lt;/li&gt;
  &lt;li&gt;作成されたフォルダとファイル類をプロジェクト仕様に使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という流れが手軽です。&lt;/p&gt;

&lt;p&gt;もし違和感覚える方は、&lt;strong&gt;「大事なのはXcodeプロジェクト管理を脱却することであり、Xcodeからの脱却ではない」&lt;/strong&gt; ことを改めて思い出すと腹落ちするのではないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;バンドルidを設定する&quot;&gt;バンドルIDを設定する&lt;/h3&gt;

&lt;p&gt;キャプチャ見ると分かりますが、Bundle Identifierが空のままです。&lt;br /&gt;
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;bundleIdPrefix&lt;/code&gt;プロパティをセットすることでいい感じにセットしてくれます。&lt;br /&gt;
このプロパティは&lt;code class=&quot;highlighter-rouge&quot;&gt;targets&lt;/code&gt;ではなくルートに&lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt;を用意してその中でセットとなります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundleIdPrefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mothule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;xcodegen generate&lt;/code&gt;を実行すると無事bundle Identifierがセットされます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/6.png&quot; width=&quot;100%&quot; alt=&quot;iOSMinimumProjectXcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらも&lt;a href=&quot;https://github.com/mothule/research_xcodegen/tree/master/ios_minimum_proj&quot;&gt;GitHub&lt;/a&gt;に上げてますので全体像が分からない場合はこちらを見てください。&lt;/p&gt;

&lt;h2 id=&quot;カテゴリ毎の必須プロパティの確認方法&quot;&gt;カテゴリ毎の必須プロパティの確認方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yonaskolb/XcodeGen/blob/master/Docs/ProjectSpec.md&quot;&gt;公式のプロジェクト仕様ページ&lt;/a&gt;には各カテゴリ毎に定義されているプロパティと説明が列挙されています。&lt;/p&gt;

&lt;p&gt;そして各プロパティ横のチェックボックスがマークされたものが必須プロパティとなります。&lt;/p&gt;

&lt;h2 id=&quot;テストターゲットを追加する&quot;&gt;テストターゲットを追加する&lt;/h2&gt;
&lt;p&gt;実務ではプロダクトターゲットだけでなく単体テストとしてテストターゲットも必要になります。&lt;br /&gt;
先程の&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSMinimumProject&lt;/code&gt;にテストターゲットを追加してみます。&lt;/p&gt;

&lt;h3 id=&quot;xcodeでテストフォルダを生成する&quot;&gt;Xcodeでテストフォルダを生成する&lt;/h3&gt;
&lt;p&gt;まず最初にXcodeから&lt;code class=&quot;highlighter-rouge&quot;&gt;Unit Testing Bundle&lt;/code&gt;を選択して追加します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-basic-usage/7.png&quot; width=&quot;200px&quot; alt=&quot;UnitTestingBundle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;するとターゲットとそれに紐づくフォルダが追加されるので、ターゲット名をコピーします。&lt;/p&gt;

&lt;h3 id=&quot;プロジェクト仕様にテストターゲット追加する&quot;&gt;プロジェクト仕様にテストターゲット追加する&lt;/h3&gt;
&lt;p&gt;そして新しくプロジェクト仕様にターゲットを次のように追加します。　　
例えばテストターゲット名が&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithUTProjTests&lt;/code&gt;だとしたら次のようになります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iOSWithUTProjTests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle.unit-test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOS&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithUTProjTests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;iOSWithUTProj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新しいプロパティとして&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;プロパティがあります。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;はこのターゲットに依存するライブラリなどを列挙します。&lt;br /&gt;
今回はターゲットなので&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;プロパティを使い、テスト対象のターゲット名(&lt;code class=&quot;highlighter-rouge&quot;&gt;iOSWithUTProj&lt;/code&gt;)をセットします。&lt;/p&gt;

&lt;p&gt;こちらも&lt;a href=&quot;https://github.com/mothule/research_xcodegen/tree/master/ios_with_ut_proj&quot;&gt;GitHub&lt;/a&gt;に上げてます。&lt;/p&gt;

&lt;h4 id=&quot;dependencies--targetなくともテストターゲットは追加されるが&quot;&gt;dependencies &amp;gt; targetなくともテストターゲットは追加されるが&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies &amp;gt; target&lt;/code&gt;を入れずともXcodeプロジェクトにUTターゲットは生成されます。&lt;br /&gt;
が、実行できません。&lt;br /&gt;
なぜなら、&lt;code class=&quot;highlighter-rouge&quot;&gt;Testing &amp;gt; Host Application&lt;/code&gt; がNoneになっているためです。&lt;br /&gt;
この部分をセットするために、&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;を追加してます。&lt;/p&gt;

&lt;h2 id=&quot;carthageやcocoapods環境を構築する&quot;&gt;CarthageやCocoaPods環境を構築する&lt;/h2&gt;
&lt;p&gt;XcodeGenを使って最小プロジェクトからUnitTest付きiOSアプリの最小プロジェクトを作りました。&lt;/p&gt;

&lt;p&gt;次はCarthageやCocoaPodsを使ったライブラリ追加を「&lt;span&gt;&lt;a href=&quot;/ios/xcodegen/ios-xcodegen-carthage-cocoapods&quot;&gt;XcodeGenでCarthageやCocoaPods環境のXcodeプロジェクトを生成する&lt;/a&gt;&lt;/span&gt;
」で説明します。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="xcodegen" /><summary type="html">Xcodeプロジェクト(.xcodeproj)のコンフリクトはストレスです。 この記事ではXcodeGenを実際に使って最小プロジェクトを作って使い方を説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-28-ios-xcodegen-basic-usage/0.png" /></entry><entry><title type="html">XcodeGenでBuild ConfigurationとSchemeの設定をする</title><link href="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-build-configuration-scheme" rel="alternate" type="text/html" title="XcodeGenでBuild ConfigurationとSchemeの設定をする" /><published>2020-07-28T00:00:00+09:00</published><updated>2020-07-29T23:34:17+09:00</updated><id>https://blog.mothule.com/ios/xcodegen/ios-xcodegen-build-configuration-scheme</id><content type="html" xml:base="https://blog.mothule.com/ios/xcodegen/ios-xcodegen-build-configuration-scheme">&lt;p&gt;XcodeGenでDebugやReleaseなどBuild Configuration自体を追加したり、Build Configuration毎にビルドパラメータを変えたりする方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;新しいbuild-configurationの登録&quot;&gt;新しいBuild Configurationの登録&lt;/h2&gt;
&lt;p&gt;デフォルトはDebugとReleaseですが、新しく追加する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;configs&lt;/code&gt;プロパティで追加します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Beta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;release&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AppStore&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;release&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;例えば &lt;code class=&quot;highlighter-rouge&quot;&gt;Beta: release&lt;/code&gt;とは、Build Configuration名を&lt;code class=&quot;highlighter-rouge&quot;&gt;Beta&lt;/code&gt;と名付け、ベースをReleaseにしてあります。&lt;br /&gt;
値の部分がdebugまたはrelease以外だとデフォルト値が適用されなくなります。&lt;/p&gt;

&lt;h2 id=&quot;build-configuration毎にビルドパラメータを変更&quot;&gt;Build Configuration毎にビルドパラメータを変更&lt;/h2&gt;
&lt;p&gt;デフォルトのDebugとReleaseとは違いをつけたいから新しくBuild Configurationを追加したのに&lt;br /&gt;
そのままでは意味がありません。Build Configuration毎にビルドパラメータを変更します。&lt;/p&gt;

&lt;h3 id=&quot;ciではassertionを無効にしてみる&quot;&gt;CIではAssertionを無効にしてみる&lt;/h3&gt;
&lt;p&gt;例えばCI時のみ動かないassertを作ろうと思います。
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert(_:)&lt;/code&gt;メソッド自体は適当です。何でもいいので説明省きます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if DISABLE_ASSERTION&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assertionFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;コード側で重要なのはプリプロセッサの条件式に入ってる&lt;code class=&quot;highlighter-rouge&quot;&gt;DISABLE_ASSERTION&lt;/code&gt;です。&lt;br /&gt;
これをXcodeGenで定義するには、&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.configs.CI.SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/code&gt;に値を追加します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;CustomBuildConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ← ターゲット名&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 〜 略 〜&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;SWIFT_ACTIVE_COMPILATION_CONDITIONS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISABLE_ASSERTION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行するとXcodeに反映されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/2.png&quot; width=&quot;100%&quot; alt=&quot;XcodeBuildConfiguration&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;はプロジェクト仕様のルートに置くことでターゲット毎でなく全体適用させることもできます。&lt;/p&gt;

&lt;h2 id=&quot;プロパティ名の見つけ方&quot;&gt;プロパティ名の見つけ方&lt;/h2&gt;
&lt;p&gt;例えばXcodeのBuild Settings &amp;gt; Development Teamを用意する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;DEVELOPMENT_TEAM&lt;/code&gt;プロパティをセットします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/1.png&quot; width=&quot;50%&quot; alt=&quot;XcodeBuildSettingsDevelopmentTeam&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;DEVELOPMENT_TEAM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hogehoge&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ではどうやってXcodeのBuild Settingsとプロジェクト仕様のプロパティを一致させてるのか？&lt;br /&gt;
それはxcconfigと同じ値を使っています。&lt;/p&gt;

&lt;p&gt;実はxcconfigで使う値は、XcodeのBuild Settingsの各項目を選択してコピーするとxcconfigの値が取れます。
しかも下記のように設定がされている項目とBuild Configuration毎に分けてくれます。
未設定(デフォルト値)の部分は「//:completeSettings = some」以降になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//:configuration = Debug
SDKROOT = iphoneos
TARGETED_DEVICE_FAMILY = 1,2
LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks
INFOPLIST_FILE = iOSWithCarthageProj/Info.plist
PRODUCT_BUNDLE_IDENTIFIER = com.mothule.iOSWithCarthageProj
FRAMEWORK_SEARCH_PATHS = $(inherited) $(PROJECT_DIR)/Carthage/Build/iOS
CODE_SIGN_IDENTITY = iPhone Developer
ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon


//:configuration = Release
SDKROOT = iphoneos
TARGETED_DEVICE_FAMILY = 1,2
LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks
INFOPLIST_FILE = iOSWithCarthageProj/Info.plist
PRODUCT_BUNDLE_IDENTIFIER = com.mothule.iOSWithCarthageProj
FRAMEWORK_SEARCH_PATHS = $(inherited) $(PROJECT_DIR)/Carthage/Build/iOS
CODE_SIGN_IDENTITY = iPhone Developer
ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon


//:completeSettings = some
ADDITIONAL_SDKS
ARCHS
SDKROOT
// 〜 略 〜
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;xcodegenでテスト時のbuild-configurationをciにする&quot;&gt;XcodeGenでテスト時のBuild ConfigurationをCIにする&lt;/h2&gt;

&lt;p&gt;前述した方法を実施することでCI用のBuild Configurationとビルドパラメータを定義することができます。&lt;br /&gt;
しかし生成したXcodeではBuild ConfigurationがDebugのままです。&lt;br /&gt;
これだとCIでXcode生成して実行する場合では意図したBuild Configurationになりません。&lt;br /&gt;
デフォルトをDebugではなくCIにする必要があります。&lt;/p&gt;

&lt;p&gt;デフォルトにするには&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt;を使うことで定義できます。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;CustomBuildConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ← スキーム名&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CustomBuildConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ← ビルド対象ターゲットと対応Actionの設定&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CustomBuildConfigTests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうすることで下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/3.png&quot; width=&quot;100%&quot; alt=&quot;XcodeSchemes&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを追加することで生成されたXcodeプロジェクトを開くと初めからTestのBuild ConfigurationはCIになります。&lt;/p&gt;

&lt;h3 id=&quot;テストターゲットやカバレッジ指定をする&quot;&gt;テストターゲットやカバレッジ指定をする&lt;/h3&gt;
&lt;p&gt;前述した設定でTest時のデフォルトBuild ConfigurationをCIにすることができました。&lt;br /&gt;
しかし、いざテストを実行しても動きません。&lt;br /&gt;
それはテストターゲットが設定されていないためです。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;CustomBuildConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CustomBuildConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;CustomBuildConfigTests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CustomBuildConfigTests&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ← テストターゲット名&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;gatherCoverageData&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先程のymlのtestプロパティを変更しました。こうすることでテストターゲットが選ばれた状態でXcodeプロジェクトが作成されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/4.png&quot; width=&quot;100%&quot; alt=&quot;XcodeSchemes&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回の使ったコードは&lt;a href=&quot;https://github.com/mothule/research_xcodegen/tree/master/custom_build_config&quot;&gt;GitHub&lt;/a&gt;にアップしてありますので、全体像を掴みたい場合はご確認ください。&lt;/p&gt;

&lt;h2 id=&quot;xcodegenでembedded-frameworkを登録する&quot;&gt;XcodeGenでEmbedded frameworkを登録する&lt;/h2&gt;

&lt;p&gt;XcodeGenでBuild Configuration別のビルドチューニングについて説明しました。&lt;/p&gt;

&lt;p&gt;次はEmbedded frameworkを&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><category term="xcodegen" /><summary type="html">XcodeGenでDebugやReleaseなどBuild Configuration自体を追加したり、Build Configuration毎にビルドパラメータを変えたりする方法について説明します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-28-ios-xcodegen-build-configuration-scheme/0.png" /></entry><entry><title type="html">Apple Developer ProgramのAccount Holderを譲渡する方法</title><link href="https://blog.mothule.com/ios/ios-how-to-transfer-account-holder-role" rel="alternate" type="text/html" title="Apple Developer ProgramのAccount Holderを譲渡する方法" /><published>2020-07-08T00:00:00+09:00</published><updated>2020-07-08T16:16:39+09:00</updated><id>https://blog.mothule.com/ios/ios-how-to-transfer-account-holder-role</id><content type="html" xml:base="https://blog.mothule.com/ios/ios-how-to-transfer-account-holder-role">&lt;p&gt;Account Holderを譲渡する珍しい機会があったので簡単ですがまとめました。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;自身がAccount Holderである&lt;/li&gt;
  &lt;li&gt;譲渡先が同じチームに招待済み&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;流れ&quot;&gt;流れ&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Membershipを開く&lt;/li&gt;
  &lt;li&gt;Transfer Your Account Holder Roleを選択&lt;/li&gt;
  &lt;li&gt;譲渡先のメンバーを選択&lt;/li&gt;
  &lt;li&gt;確認画面が出るので同意&lt;/li&gt;
  &lt;li&gt;譲渡先のメール通知&lt;/li&gt;
  &lt;li&gt;同意すれば完了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至って単純です。&lt;/p&gt;

&lt;h2 id=&quot;membershipを開く&quot;&gt;Membershipを開く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/account/#/membership&quot;&gt;Apple Developer PrgramのMembership&lt;/a&gt;を開く&lt;/p&gt;

&lt;h2 id=&quot;transfer-your-account-holder-roleを選択&quot;&gt;Transfer Your Account Holder Roleを選択&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-08-ios-how-to-transfer-account-holder-role/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-08-ios-how-to-transfer-account-holder-role/1.png&quot; width=&quot;100%&quot; alt=&quot;iOS-Transfer-Account-Holder-Role&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面下部の &lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer Your Account Holder Role&lt;/code&gt; を選択&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If needed, you can transfer your Account Holder role to another person on your team who has the legal authority to bind your organization to Apple Developer Program legal agreements. Once confirmed, you will no longer be the Account Holder and will remain on the team as a Developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;別の人物にAccount Holderの役割を譲渡します。
譲渡後は開発者の役割または複数ロールを持っていれば残ったロールに変更されます。&lt;/p&gt;

&lt;h2 id=&quot;譲渡先のメンバーを選択&quot;&gt;譲渡先のメンバーを選択&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-07-08-ios-how-to-transfer-account-holder-role/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-07-08-ios-how-to-transfer-account-holder-role/2.png&quot; width=&quot;100%&quot; alt=&quot;iOS-Transfer-Account-Holder-Role-Confirm&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;確認画面が出るので同意する。
あとは譲渡先の人が同意をすれば完了です。&lt;/p&gt;

&lt;h2 id=&quot;取り消しや再送する場合&quot;&gt;取り消しや再送する場合&lt;/h2&gt;
&lt;p&gt;Membershipの上部にオレンジ帯が出てくるので、
取り消す場合は Withdraw Request
再送信する場合は Resend Request
のボタンになります。&lt;/p&gt;

&lt;p&gt;以上です。とても単純ではありますが、滅多にすることはないので記事にしました。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><summary type="html">Account Holderを譲渡する珍しい機会があったので簡単ですがまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-07-08-ios-how-to-transfer-account-holder-role/eyecatch.png" /></entry><entry><title type="html">お前らはPO業務を舐めすぎている</title><link href="https://blog.mothule.com/notebook/service-design/notebook-service-design-wrong-po-works" rel="alternate" type="text/html" title="お前らはPO業務を舐めすぎている" /><published>2020-06-02T00:00:00+09:00</published><updated>2020-06-02T12:54:06+09:00</updated><id>https://blog.mothule.com/notebook/service-design/notebook-service-design-wrong-po-works</id><content type="html" xml:base="https://blog.mothule.com/notebook/service-design/notebook-service-design-wrong-po-works">&lt;p&gt;PO(Product Owner)はアジャイルのスクラムで定義された用語です。&lt;br /&gt;
チーム内では、施策や機能の策定、取捨選択によるプロダクト成長に責任を持ちます。&lt;br /&gt;
もしPOがいなくなったら、市場におけるライバルとの差別化や対象ユーザーの理解、利用者の体験最大化が全部停滞します。&lt;/p&gt;

&lt;h2 id=&quot;poをチームマネージャー勘違いするな&quot;&gt;POをチームマネージャー勘違いするな&lt;/h2&gt;
&lt;p&gt;POをチームメンバーの管理をする業務とか、企画の裁量権持った人だと盛大な勘違いする人がいます。&lt;br /&gt;
ましてやPOを掛け持ちさせる上長がいたりします。&lt;br /&gt;
そんな適当な考えでプロダクトが成長するなら誰も苦労しないです。&lt;br /&gt;
もう少しPOという役割の重要性を理解し、健全なスクラムチームが増えることを願います。&lt;/p&gt;

&lt;h2 id=&quot;poの本業はプロダクト成長&quot;&gt;POの本業はプロダクト成長&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;担当サービスおいて誰よりも詳しい&lt;/li&gt;
  &lt;li&gt;指標をいつもに見てる(売上だけでなくUXやCXの指標定義や分析を行う)&lt;/li&gt;
  &lt;li&gt;その上で次の施策について導き出す&lt;/li&gt;
  &lt;li&gt;施策の優先度を↑の観点から決めれる&lt;/li&gt;
  &lt;li&gt;プロモ／協力会社／会社戦略などの要望とユーザー目線のすり合わせができる&lt;/li&gt;
  &lt;li&gt;slackの担当領域chに食いついており、担当領域の議論や疑問が発生したら即解決して他メンバーに無駄な時間を費やせない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;こんなpoはpoではない&quot;&gt;こんなPOはPOではない&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;問題が起きてから動く&lt;/li&gt;
  &lt;li&gt;聞かれた優先順位を並べるだけ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それだとユーザー目線は育たないし、UX向上しないし、成長速度は鈍牛、プロダクトは偏って成長する。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;↑これはもうただのメンテナンス。調整屋。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これでユーザーファーストとか言ってたらアイス両手に持ったデブが「私ダイエットする！」って言ってるのと同義です。&lt;/p&gt;

&lt;h2 id=&quot;エンジニアが技術でux提供するとしたらpoは&quot;&gt;エンジニアが技術でUX提供するとしたらPOは&lt;/h2&gt;
&lt;p&gt;POはプロダクトを通してUXを提供することが責務です。&lt;br /&gt;
規模によってはCX観点です。&lt;/p&gt;

&lt;p&gt;CXを簡単に言うなら「ユーザーがニーズを感じたその日からプロダクトを通して実際にニーズを達成して人生に良い体験をするまで」のプロダクトだけでなくそれを取り巻く環境も巻き込んだ視野の広い観点です。&lt;/p&gt;

&lt;p&gt;話を戻します。&lt;br /&gt;
POにとってプロダクト成長、つまり「プロダクトを開発する」とは、&lt;br /&gt;
人と多数の機能をつなぎ合わせること、いわばプログラミングです。&lt;/p&gt;

&lt;p&gt;置かれた状況下(時間、予算、市場)でツールやプラクティスを駆使して情報を獲得し&lt;br /&gt;
それらをプロダクトのミッション達成するにはどう繋げて実現するかに全力を注ぐことです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOSエンジニアはiOSアプリ開発に責任を持つ人&lt;/li&gt;
  &lt;li&gt;AndroidエンジニアはAndroidアプリ開発に責任を持つ人&lt;/li&gt;
  &lt;li&gt;WebエンジニアはWebアプリ開発に責任を持つ人&lt;/li&gt;
  &lt;li&gt;BackendエンジニアはBackend開発に責任を持つ人&lt;/li&gt;
  &lt;li&gt;POはプロダクト開発に責任を持つ人&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poとはプロダクト開発に必要不可欠な戦力&quot;&gt;POとはプロダクト開発に必要不可欠な戦力&lt;/h2&gt;

&lt;p&gt;立たされた市場(ユーザー特性やライバル)を把握し&lt;br /&gt;
プロダクト全体つまりCX目線で強み弱み、不足を把握して&lt;br /&gt;
プロダクトの分析や成長をメインとするポジションです。&lt;/p&gt;

&lt;h3 id=&quot;例えばpoがいないと&quot;&gt;例えばPOがいないと&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;上層部より出された方針／戦略においてプロダクトの弱みや不足に気づく人がいない。&lt;/li&gt;
  &lt;li&gt;方針／戦略からプロダクトの施策で何をやるべきか話を進められる人がいない&lt;/li&gt;
  &lt;li&gt;プロダクト成長におけるKPIツリーを作れる人がいない&lt;/li&gt;
  &lt;li&gt;プロダクトの体調管理をできてる人がいない
    &lt;ul&gt;
      &lt;li&gt;調子が悪いとき、どこが問題か分析する人がいない&lt;/li&gt;
      &lt;li&gt;業界トレンドやライバル、プロダクトの市場、プロダクトが提供するサービスの知識から有効な解決策を出せる人がいない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;慢性なユーザー理解してる人がいない&lt;/li&gt;
  &lt;li&gt;↑上記を仕方なく他メンバーが片手間でやっている&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新人にpoをやらせるな&quot;&gt;新人にPOをやらせるな&lt;/h2&gt;

&lt;p&gt;上記で説明したPOが持つ責任を新人など経験浅い人材がこなせるわけないです。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="service-design" /><summary type="html">PO(Product Owner)はアジャイルのスクラムで定義された用語です。 チーム内では、施策や機能の策定、取捨選択によるプロダクト成長に責任を持ちます。 もしPOがいなくなったら、市場におけるライバルとの差別化や対象ユーザーの理解、利用者の体験最大化が全部停滞します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-06-02-notebook-service-design-wrong-po-works/eyecatch.png" /></entry><entry><title type="html">iOSアプリのバリデーションについて考えてみた</title><link href="https://blog.mothule.com/ios/swift/ios-swift-validation" rel="alternate" type="text/html" title="iOSアプリのバリデーションについて考えてみた" /><published>2020-05-27T00:00:00+09:00</published><updated>2020-05-27T01:24:28+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-validation</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-validation">&lt;p&gt;アプリの入力フォームで無効なデータを登録しないようバリデーションを挟むことがあります。
大抵はAPI側で検証して問題があればバリデーションエラーとしてレスポンスを返し、
受け取ったクライアント側は結果をユーザーに伝えます。&lt;/p&gt;

&lt;p&gt;この方法だと通信処理が走ってしまうのでサーバー負荷に加えて、結果が分かるのに時間もかかります。
そのため、クライアント側でバリデーションできたほうがUXとしては良いです。&lt;/p&gt;

&lt;p&gt;しかしクライアント側のバリデーションロジックとサーバ側の検証ロジックが完全一致していなければバグの温床となるため
クライアント側でバリデーションをするにしても最低限にとどまることが多いと思います。&lt;/p&gt;

&lt;p&gt;そのためあまり使うことが少ないのですが、少し考えてみました。&lt;/p&gt;

&lt;h2 id=&quot;validatorとvalidationresult-protocolの用意&quot;&gt;ValidatorとValidationResult protocolの用意&lt;/h2&gt;

&lt;p&gt;まずは執行役のValidator protocolとその結果を受け取るValidationResult protocolを用意します。&lt;/p&gt;

&lt;p&gt;Validatorには実行メソッドとなる&lt;code class=&quot;highlighter-rouge&quot;&gt;validate() -&amp;gt; ResultType&lt;/code&gt;を用意して、
Validator protocolの採用クラスはこのメソッドに検証処理をまとめます。&lt;/p&gt;

&lt;p&gt;そして、検証処理の結果としてValidationResult protocolを採用したクラスを返します。&lt;/p&gt;

&lt;p&gt;ValidationResultにはバリデーションが合格したか分かるようにisOkプロパティを用意します。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mothule/498c37e2f78bc9a527d25df8c0dc615d.js?file=Validator.swift&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;名前バリデーションを作ってみる&quot;&gt;名前バリデーションを作ってみる&lt;/h2&gt;

&lt;p&gt;先程定義したValidatorとValidationResult protocolを使って名前用バリデーションを作ってみます。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mothule/498c37e2f78bc9a527d25df8c0dc615d.js?file=NameValidator.swift&quot;&gt;&lt;/script&gt;

&lt;p&gt;ValidationResultをネストしても動かせるので型名をシンプルにできます。&lt;br /&gt;
ValidationResultの採用クラスをenumにしたことでバリデーションエラーの一覧が分かります&lt;/p&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;tooLong(Int)&lt;/code&gt;のように内部パラメータを結果に渡すことでバリデーションエラーのハンドリング時に具体的な情報を構築することもできます。&lt;/p&gt;

&lt;h2 id=&quot;メールアドレスバリデーションを作ってみる&quot;&gt;メールアドレスバリデーションを作ってみる&lt;/h2&gt;

&lt;p&gt;今度はメールアドレス用バリデーションを作ってみます。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mothule/498c37e2f78bc9a527d25df8c0dc615d.js?file=EmailValidator.swift&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage: String&lt;/code&gt;のように起きたバリデーションエラーのメッセージテキストを&lt;strong&gt;デフォルト値&lt;/strong&gt;として使うこともできます。&lt;/p&gt;

&lt;h3 id=&quot;注意バリデーションのエラーメッセージをそのまま使うリスク&quot;&gt;注意：バリデーションのエラーメッセージをそのまま使うリスク&lt;/h3&gt;
&lt;p&gt;バリデーションは画面に結びついたものではなく検証対象に結びついたロジックです。&lt;br /&gt;
そのため1画面とは限りません。また表示する文言も1つとは限りません。&lt;br /&gt;
例えば男性と女声で文言を変える可能性もあれば、エラーした回数におうじて文言を変える可能性もあります。&lt;/p&gt;

&lt;p&gt;バリデーションのエラーメッセージを使う場合は、あくまでもデフォルト値として扱うようにしておき、&lt;br /&gt;
呼び出し元で上書き可能にしておくことで、デフォルトで良い部分はコード量を減らし、&lt;br /&gt;
必要に応じて上書きするコードを書けるといった仕組みにしておくことで柔軟性を維持しつつ楽できるようになります。&lt;/p&gt;

&lt;h2 id=&quot;バリデーションを使う&quot;&gt;バリデーションを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-05-27-ios-swift-validation/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-05-27-ios-swift-validation/1.png&quot; width=&quot;100%&quot; alt=&quot;ViewControllerWithValidation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次は用意した2つのバリデーションをViewController側で使うコードです。&lt;br /&gt;
UIButtonの押下イベント内(&lt;code class=&quot;highlighter-rouge&quot;&gt;onTouchedRegister(_:)&lt;/code&gt;)で2つのUITextFieldからバリデーション処理を入れてます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage&lt;/code&gt;に文言が入ることで画面内にバリデーションエラーをユーザー通知します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-05-27-ios-swift-validation/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-05-27-ios-swift-validation/2.png&quot; width=&quot;50%&quot; alt=&quot;ValidationError&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mothule/498c37e2f78bc9a527d25df8c0dc615d.js?file=ViewController.swift&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;rnmovaliライブラリ&quot;&gt;RNMoValiライブラリ&lt;/h2&gt;
&lt;p&gt;実は昔モデル用バリデーションを作っています。
&lt;a href=&quot;https://github.com/mothule/RNMoVali&quot;&gt;mothule/RNMoVali&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これは1つのプロパティに、名前と用意してあるバリデーターを登録しておくことで、&lt;br /&gt;
バリデーション実行後に名前に紐づくバリデーション結果を受け取る仕組みです。&lt;/p&gt;

&lt;p&gt;しかし、記事冒頭に書いたようにあまりニーズがありません。&lt;br /&gt;
クライアント側で「しっかり」バリデーションを必要とするのは、サーバーのない登録系アプリぐらいで、&lt;br /&gt;
それらは大抵が個人が練習で作るToDoアプリぐらいでしょう。&lt;/p&gt;

&lt;p&gt;ちなみに作ったのが古いのでSwiftバージョンが古いですが、コンパイルエラーを直せば動くと思います。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">アプリの入力フォームで無効なデータを登録しないようバリデーションを挟むことがあります。 大抵はAPI側で検証して問題があればバリデーションエラーとしてレスポンスを返し、 受け取ったクライアント側は結果をユーザーに伝えます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-05-27-ios-swift-validation/0.png" /></entry></feed>