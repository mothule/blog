<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-05-05T19:12:53+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">簡易なSwiftパフォーマンス測定クラスを作った</title><link href="https://blog.mothule.com/ios/swift/ios-swift-create-perf-script" rel="alternate" type="text/html" title="簡易なSwiftパフォーマンス測定クラスを作った" /><published>2020-05-04T00:00:00+09:00</published><updated>2020-05-04T15:47:13+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-create-perf-script</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-create-perf-script">&lt;p&gt;普段からSwift言語でコーディングしても、Swift内部の動きが分からず書き方の違いでパフォーマンスが変わります。&lt;/p&gt;

&lt;p&gt;Swift自体のコードを読めば理解できるかもしれません。しかしコンパイラコードを読むのはかなりの労力を時間を必要とします。目的が「どっちの書き方が速いか？」だけであればコスパ悪いです。&lt;/p&gt;

&lt;p&gt;この記事では、速度パフォーマンスのコード検証におけるボイラープレートコードの説明と、それを軽減するために私が作成したクラスを紹介する記事です。&lt;/p&gt;

&lt;h2 id=&quot;速度パフォーマンス測定の仕組み&quot;&gt;速度パフォーマンス測定の仕組み&lt;/h2&gt;
&lt;p&gt;速度パフォーマンスを検証するなら大抵は次の工程になります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Playgroundや簡単なXcodeプロジェクトを用意&lt;/li&gt;
  &lt;li&gt;検証コードを実装&lt;/li&gt;
  &lt;li&gt;検証コード前後に開始と終了の差分時間を確保&lt;/li&gt;
  &lt;li&gt;複数回実行して差分時間を集める&lt;/li&gt;
  &lt;li&gt;差分時間の最速／最遅を除去&lt;/li&gt;
  &lt;li&gt;差分時間の最速／最速／平均を算出する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;複数回実行する理由&quot;&gt;複数回実行する理由&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1回の測定では測定誤差の解消ができません。&lt;/strong&gt;&lt;br /&gt;
なので通常は複数回コードの検証を実施結果の平均値などを使います。&lt;/p&gt;

&lt;h3 id=&quot;最速と最遅を除去する理由&quot;&gt;最速と最遅を除去する理由&lt;/h3&gt;
&lt;p&gt;測定誤差の影響を強く受けた最速と最遅をなくすためです。&lt;/p&gt;

&lt;h2 id=&quot;swiftのコード検証はコスパ悪い&quot;&gt;Swiftのコード検証はコスパ悪い&lt;/h2&gt;
&lt;p&gt;速度パフォーマンスの仕組みは単純です。しかし目的に対する労力が見合ってません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;簡単なコード検証をしたいだけなのに、測定の仕組みを用意するのは面倒です。&lt;/strong&gt;&lt;br /&gt;
仕組みは単純でも、検証のたびに必要になるし、検証コードよりも測定コードが長いことも…&lt;/p&gt;

&lt;h3 id=&quot;コード検証はフットワークが重要&quot;&gt;コード検証はフットワークが重要&lt;/h3&gt;
&lt;p&gt;ふと思いついたこと、どっちがいいのかモヤモヤしてるときに「ササッ」と調べたいですよね。&lt;br /&gt;
頭の中に検証コードは入ってるのに、それ以上に検証に時間がかかるのはストレスです。&lt;br /&gt;
毎度その状態だと、次第に検証を諦めてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コード検証は、結果と同じぐらい速度が重要です。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;速度パフォーマンス測定クラスの作成&quot;&gt;速度パフォーマンス測定クラスの作成&lt;/h2&gt;
&lt;p&gt;検証コードの実装や結果を得る作業が正味作業だとすれば、測定の仕組みを実装するのは付帯作業です。&lt;br /&gt;
そして毎回同じ測定の仕組みを実装するのは無駄作業です。&lt;/p&gt;

&lt;p&gt;なので検証コードに注力できるように、&lt;strong&gt;速度パフォーマンス測定において最低限の機能をもつクラスを作成しました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mothule/Perf&quot;&gt;mothule/Perf - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;主に自分向け&quot;&gt;主に自分向け&lt;/h3&gt;
&lt;p&gt;主に自分用に用意しました。&lt;br /&gt;
ローカルにこのファイルを置いてても場所を忘れたりPCリプレイスやPC故障でロストを考えてGitHubに上げました。&lt;/p&gt;

&lt;p&gt;とはいえ内容はシンプルでユースケースも明確なので使いたい方は使っていただいても構いません。&lt;/p&gt;

&lt;h3 id=&quot;手軽さ重視&quot;&gt;手軽さ重視&lt;/h3&gt;
&lt;p&gt;パフォーマンス測定時の環境を考えて、libかframeworkにせず、CocoaPodsやCarthageにも対応しません。&lt;br /&gt;
単純にファイル単体を落として参照して使うだけです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コード検証時にはそれぐらい単純な方がコスパがよいためです。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;仕組みについて&quot;&gt;仕組みについて&lt;/h3&gt;
&lt;p&gt;仕組みは、検証回数と検証コードをクロージャで渡せば、戻り値で検証結果を得られます。&lt;/p&gt;

&lt;p&gt;検証結果には、検証名、最速時間、最遅時間、平均時間の情報を保持しています。&lt;br /&gt;
また最速と最遅は除外してるため検証回数-2が検証結果数になります。&lt;/p&gt;

&lt;h2 id=&quot;検証作業はスペシャリストへの階段&quot;&gt;検証作業はスペシャリストへの階段&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;どっちの書き方がいいのか？&lt;/li&gt;
  &lt;li&gt;この処理って実は重いのか？&lt;/li&gt;
  &lt;li&gt;どう書けば速いのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などは、実はCPUやレジストリ、キャッシュ、メインメモリ、仮想メモリ等ハードウェアに依存していたり、言語自体の実装に依存することが多いです。&lt;/p&gt;

&lt;p&gt;C/C++では、vtableやオーバーヘッドなど言語自体の要因もありますが、ハードウェアよりの依存が比率的に高くなります。&lt;/p&gt;

&lt;p&gt;一方SwiftはCやアセンブラと異なり直接メモリ操作を指示するコードはほぼほぼ使いません。&lt;br /&gt;
そのため、「どの書き方がメモリに親切なのか」「無駄な処理が走らないか」などはSwift言語自体のコードを読まないとわかりません。&lt;strong&gt;しかし測定することでそれを結果として知ることはできます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Swiftは主にiOSで使われる言語で主に高レイヤーな領域のコーディングで使われることが多いですが、
新しいデータ構造を自作したりキャッシュ機構を自作したりなど少し低レイヤーな領域のコーディングするときに、どの書き方なら安定して速度を出せるのか？を知っているだけコードのパフォーマンスは変わります。&lt;/p&gt;

&lt;p&gt;速く書けるだけがスペシャリストではありません。&lt;br /&gt;
&lt;strong&gt;速く動くコードを書けるのもスペシャリストとして大事なことです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そのために検証作業は大事な手段となり、今回用意したコードは検証速度を円滑にするツールとなります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">普段からSwift言語でコーディングしても、Swift内部の動きが分からず書き方の違いでパフォーマンスが変わります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-05-04-ios-swift-create-perf-script/0.png" /></entry><entry><title type="html">SwiftのArrayの前方挿入は遅い</title><link href="https://blog.mothule.com/ios/swift/ios-swift-array-forward-op-slow" rel="alternate" type="text/html" title="SwiftのArrayの前方挿入は遅い" /><published>2020-05-04T00:00:00+09:00</published><updated>2020-05-05T02:40:36+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-array-forward-op-slow</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-array-forward-op-slow">&lt;p&gt;Swiftでは非常に使用頻度の高いArrayですが、挙動を把握しておかないと誤った使い方で処理の重いコードを書いてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;この記事では、Arrayの内部特性を理解し特性が含むリスクに対して、速度パフォーマンスを測定して何が重い実験した結果をまとめたレポートです。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Arrayを再作成するかappend/removeをするか考えてた&lt;/li&gt;
  &lt;li&gt;考えてみればArrayは本当に配列（メモリは直列）なのか？&lt;/li&gt;
  &lt;li&gt;内部データ構造はListだったりしないか？&lt;/li&gt;
  &lt;li&gt;内部データ構造が配列ならstd::vector同様に前方削除や追加が重いのでは？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;メモリが直列とは&quot;&gt;メモリが直列とは？&lt;/h2&gt;

&lt;p&gt;直列とは物理的なメモリ上に横並びにデータが展開されていることを指します。&lt;/p&gt;

&lt;h3 id=&quot;直列を維持するリスク&quot;&gt;直列を維持するリスク&lt;/h3&gt;

&lt;p&gt;例えば添字の0はメモリだと先頭でなければいけません。逆も然りです。
では先頭に新しくデータ追加した場合は、どうするのか？&lt;/p&gt;

&lt;p&gt;メモリは一度アロケートすると先頭アドレスとサイズをブロックとして確保します。
追加でメモリが必要な場合は、改めて必要なサイズのメモリを確保しなければいけません。
その後、既存データと新規データ両方をセットする必要があります。&lt;/p&gt;

&lt;p&gt;このとき最後尾に追加する場合は最後の領域にセットして完了ですが、
最後尾以外に追加する場合は、新規データのサイズ分ズラす必要があります。
しかもメモリ操作領域が大きければ大きいほど負荷が高くなります。&lt;/p&gt;

&lt;h2 id=&quot;swiftソースコードで直列か確認&quot;&gt;Swiftソースコードで直列か確認&lt;/h2&gt;

&lt;p&gt;Swiftのソースコードは&lt;a href=&quot;https://github.com/apple/swift&quot;&gt;GitHub&lt;/a&gt;にあります。&lt;br /&gt;
Arrayのビルドインされた実装はその中の&lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/runtime/Array.cpp&quot;&gt;/stdlib/public/runtime/Array.cpp&lt;/a&gt;になります。&lt;br /&gt;
Arrayのインターフェイスは、&lt;a href=&quot;https://github.com/apple/swift/blob/55782b2f73cd887ffd8d136d29d5cd3fa612e41a/stdlib/public/core/Array.swift&quot;&gt;/stdlib/public/core/Array.swift&lt;/a&gt;で実装されています。&lt;/p&gt;

&lt;h3 id=&quot;処理をトレースする&quot;&gt;処理をトレースする&lt;/h3&gt;

&lt;p&gt;Array.remove(at:)からArray.cppに実装されているコピー操作までの処理をトレースします。&lt;/p&gt;

&lt;p&gt;今回swift側検証コードは下記になります。&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;array.remove(at: 0)&lt;/code&gt;の処理をトレースするとざっくり下記になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- remove(at:)
  - _makeMutableAndUnique()
    - _createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend)
      - ContiguousArrayBuffer._copyContents(subRange:,initializing:)
        - ...
          - swift_arrayInitWithCopy(OpaqueValue*,OpaqueValue*,size_t,const Metadata*)
  - moveInitialize(from:count:)
    - ...
      - swift_arrayInitWithTakeFrontToBack(OpaqueValue*,OpaqueValue*,size_t,const Metadata*)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;remove(at:) -&amp;gt; Element&lt;/code&gt;は&lt;a href=&quot;https://github.com/apple/swift/blob/55782b2f73cd887ffd8d136d29d5cd3fa612e41a/stdlib/public/core/Array.swift#L1292-L1306&quot;&gt;/stdlib/public/core/Array.swift#L1292-L1306&lt;/a&gt;で実装されています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;_makeMutableAndUnique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ①&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstElementAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ②&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCount&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;_makemutableandunique-&quot;&gt;_makeMutableAndUnique ①&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_makeMutableAndUnique&lt;/code&gt;は&lt;a href=&quot;https://github.com/apple/swift/blob/55782b2f73cd887ffd8d136d29d5cd3fa612e41a/stdlib/public/core/Array.swift#L345-L352&quot;&gt;/stdlib/public/core/Array.swift#L345-L352&lt;/a&gt;で実装されており、
内部では&lt;code class=&quot;highlighter-rouge&quot;&gt;_createNewBuffer&lt;/code&gt;が呼ばれています。&lt;/p&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;_createNewBuffer&lt;/code&gt;は&lt;a href=&quot;https://github.com/apple/swift/blob/55782b2f73cd887ffd8d136d29d5cd3fa612e41a/stdlib/public/core/Array.swift#L1051-L1080&quot;&gt;/stdlib/public/core/Array.swift#L1051-L1080&lt;/a&gt;で実装されており、
内部では新しいキャパシティサイズの&lt;code class=&quot;highlighter-rouge&quot;&gt;_ContiguousArrayBuffer&lt;/code&gt;をしたのちに&lt;code class=&quot;highlighter-rouge&quot;&gt;_buffer._copyContents&lt;/code&gt;を呼んでいます。&lt;/p&gt;

&lt;p&gt;これは内部でArray.cppの&lt;a href=&quot;https://github.com/apple/swift/blob/31af116df62d40779b0f43ffc61c2806469a53cc/stdlib/public/runtime/Array.cpp#L137-L142&quot;&gt;swift_arrayInitWithCopy&lt;/a&gt;を呼んでいます。&lt;/p&gt;

&lt;h4 id=&quot;pointermoveinitialize-&quot;&gt;pointer.moveInitialize ②&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pointer.moveInitialize&lt;/code&gt;とは&lt;a href=&quot;https://github.com/apple/swift/blob/d7b5de95f3fdfe281dee9dfec66b220e27675ca3/stdlib/public/core/UnsafePointer.swift#L786-L812&quot;&gt;/stdlib/public/core/UnsafePointer.swift#L786-L812&lt;/a&gt;で実装されています。&lt;/p&gt;

&lt;p&gt;この関数内でArray.cppの&lt;a href=&quot;/stdlib/public/runtime/Array.cpp#L151-L156&quot;&gt;swift_arrayInitWithTakeFrontToBack&lt;/a&gt;か&lt;a href=&quot;https://github.com/apple/swift/blob/55782b2f73cd887ffd8d136d29d5cd3fa612e41a/stdlib/public/runtime/Array.cpp#L158-L163&quot;&gt;swift_arrayInitWithTakeBackToFront&lt;/a&gt;が呼ばれていると思われます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;remove(at:)&lt;/code&gt;で引数indexに0を渡すと、&lt;code class=&quot;highlighter-rouge&quot;&gt;pointer.moveInitialize&lt;/code&gt;を介してデータサイズ*データ数のメモリ移動が発生します。&lt;/p&gt;

&lt;h2 id=&quot;仮説&quot;&gt;仮説&lt;/h2&gt;

&lt;p&gt;メモリが直列であれば、前方削除や前方挿入が後方より重いはずです。&lt;/p&gt;

&lt;h2 id=&quot;検証&quot;&gt;検証&lt;/h2&gt;

&lt;p&gt;下記環境下で検証します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOS環境&lt;/li&gt;
  &lt;li&gt;Simulator&lt;/li&gt;
  &lt;li&gt;配列数9900〜99000を10回に分ける&lt;/li&gt;
  &lt;li&gt;検証回数10回&lt;/li&gt;
  &lt;li&gt;これらのサイズを8バイトと32バイトでする&lt;/li&gt;
  &lt;li&gt;検証メソッドまたはシナリオ
    &lt;ul&gt;
      &lt;li&gt;removeFirst()&lt;/li&gt;
      &lt;li&gt;removeLast()&lt;/li&gt;
      &lt;li&gt;insert(:at:0)&lt;/li&gt;
      &lt;li&gt;insert(:at:count-1)&lt;/li&gt;
      &lt;li&gt;append()&lt;/li&gt;
      &lt;li&gt;reserveCapacity()後にinsert(:at:0)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;検証コード&quot;&gt;検証コード&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    typealias ElemType = Int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    let genElem: (Int) -&amp;gt; ElemType = { no in no }&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;insert(:at:last)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;append()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Use reserveCapacity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reserveCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;removeLast()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;insert(:at:0)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfCaptures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;removeFirst()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ElemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplingCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Perf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toCSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;結果&quot;&gt;結果&lt;/h2&gt;

&lt;p&gt;下図は検証コードから得た結果を整理してものです。&lt;br /&gt;
X軸が配列数で、Y軸が処理時間(秒)になります。&lt;/p&gt;

&lt;p&gt;要素サイズの32バイトの&lt;code class=&quot;highlighter-rouge&quot;&gt;insert(:at:)&lt;/code&gt;が群を抜いて負荷がかかっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/1.png&quot; width=&quot;100%&quot; alt=&quot;SwiftArrayパフォーマンス全体図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2枚目は上図で下層で束なってる部分のみの図となります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/2.png&quot; width=&quot;100%&quot; alt=&quot;SwiftArrayパフォーマンス縮図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;前方挿入は重い&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;配列の要素サイズが大きいと 前方挿入は非常に重い&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;reserveCapacityはほぼ効果ない&lt;/li&gt;
  &lt;li&gt;insert(:at:last)よりappendのほうが少し速い&lt;/li&gt;
  &lt;li&gt;removeFirstは重いがそこまで気にしなくていい程度&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おまけ更に要素サイズを上げる&quot;&gt;おまけ:更に要素サイズを上げる&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regularPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Brand&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publishDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Brand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記のような80バイトで最も重い&lt;code class=&quot;highlighter-rouge&quot;&gt;insert(:at:0)&lt;/code&gt;で試してみます。
先程郡を抜いていた32バイトより更に重くなっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-05-04-ios-swift-array-forward-op-slow/3.png&quot; width=&quot;100%&quot; alt=&quot;SwiftArrayパフォーマンスサイズ大&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;考察&quot;&gt;考察&lt;/h2&gt;
&lt;p&gt;32バイトはInt2つでString1つしかありません。&lt;/p&gt;

&lt;p&gt;80バイト程度で1~2万件のデータを扱う時に前方挿入をする処理が多いとスパイクが起きるレベルです。&lt;br /&gt;
これがECなどで1つの商品情報を扱う場合は更にでかいサイズかと思います。&lt;br /&gt;
そうなると1万件以下でも重くなるでしょう。&lt;br /&gt;
追加するタイミングによっては無視できない重さになると思います。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">Swiftでは非常に使用頻度の高いArrayですが、挙動を把握しておかないと誤った使い方で処理の重いコードを書いてしまいます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-05-04-ios-swift-array-forward-op-slow/0.png" /></entry><entry><title type="html">iOS開発で便利なSwiftのArrayとDictionaryのイディオム</title><link href="https://blog.mothule.com/ios/swift/ios-swift-collection-idiom" rel="alternate" type="text/html" title="iOS開発で便利なSwiftのArrayとDictionaryのイディオム" /><published>2020-05-01T00:00:00+09:00</published><updated>2020-05-05T19:12:44+09:00</updated><id>https://blog.mothule.com/ios/swift/ios-swift-collection-idiom</id><content type="html" xml:base="https://blog.mothule.com/ios/swift/ios-swift-collection-idiom">&lt;p&gt;Swiftではデータ構造の代表格としてArrayとDictionaryがあります。
この2つを使いこなすことは、iOSエンジニアとして重要なことです。&lt;/p&gt;

&lt;p&gt;Swift特有の使い方、つまりイディオムを理解することでSwiftyなコーディングができるようにもなります。&lt;/p&gt;

&lt;p&gt;この記事で紹介するものが全てを網羅していませんが、&lt;br /&gt;
iOSエンジニアなら知っておくべきSwiftのArrayとDictionaryに関するイディオムについて説明します。&lt;/p&gt;

&lt;h2 id=&quot;isemptyの反対を追加する&quot;&gt;isEmptyの反対を追加する&lt;/h2&gt;

&lt;p&gt;ArrayやDictionary、StringにはあるisEmptyプロパティは状態の否定形なので使い勝手が悪いです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;isanyを用意する&quot;&gt;isAnyを用意する&lt;/h3&gt;
&lt;p&gt;isEmptyの反対としてisAnyを用意します。
下記コードはisAnyをArray,Dictionary,StringにisEmptyの反対の結果を返すプロパティisAnyを定義してます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これによりさっきのコードがこう書けます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAny&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAny&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;arrayからdictionaryに変換する&quot;&gt;ArrayからDictionaryに変換する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;で配列要素をDictionaryのKeyとValueに変換します。&lt;br /&gt;
変換には、&lt;strong&gt;配列の要素をKeyとValueへの分解が必須条件です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下記はある&lt;code class=&quot;highlighter-rouge&quot;&gt;[商品]&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;[商品ID: 商品]&lt;/code&gt;の型に変換するコードです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;梅干し&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;砂糖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;唐辛子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンソール結果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1: Item(id: 1, name: &quot;砂糖&quot;, price: 512), 2: Item(id: 2, name: &quot;唐辛子&quot;, price: 223), 0: Item(id: 0, name: &quot;梅干し&quot;, price: 230)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;データ加工を段階的に分解する&quot;&gt;データ加工を段階的に分解する&lt;/h2&gt;

&lt;p&gt;次のItem構造体とその配列があるとします。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regularPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isSale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regularPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;梅干し&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regularPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;砂糖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regularPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;唐辛子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regularPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このarrayから「Item配列から値引き合計額を求める」処理を&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;だけで書くとこうなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regularPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これをデータ加工を段階に分けるコードが下記になります。&lt;br /&gt;
一つ一つの処理内容がシンプルになり、一連の処理として見た時に読みやすくなります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regularPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;トレードオフ&quot;&gt;トレードオフ&lt;/h3&gt;
&lt;p&gt;しかしトレードオフとしてパフォーマンスが低下します。&lt;br /&gt;
次の表は30万個の配列からそれぞれを実施した結果です。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;パターン&lt;/th&gt;
      &lt;th&gt;最速&lt;/th&gt;
      &lt;th&gt;最遅&lt;/th&gt;
      &lt;th&gt;平均(秒)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;reduceのみ&lt;/td&gt;
      &lt;td&gt;0.095&lt;/td&gt;
      &lt;td&gt;0.11&lt;/td&gt;
      &lt;td&gt;0.099&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;組み合わせ&lt;/td&gt;
      &lt;td&gt;0.124&lt;/td&gt;
      &lt;td&gt;0.129&lt;/td&gt;
      &lt;td&gt;0.126&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;30万個を多いかどうかは作ってる物依存なので各自判断となります。&lt;/p&gt;

&lt;h2 id=&quot;arrayで単体検索ならfilterよりfirst&quot;&gt;Arrayで単体検索ならfilterよりfirst&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;filterは全要素アクセスするが、firstは条件満たしたら中断する&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;は要素の絞り込みが目的です。各要素すべてに対して条件評価するので単体検索には不向きです。&lt;br /&gt;
一方で&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt;は最初の条件クリアする要素を見つけた時点で終了するので平均して速いです。&lt;/p&gt;

&lt;h3 id=&quot;実際に動きを見る&quot;&gt;実際に動きを見る&lt;/h3&gt;

&lt;p&gt;下記コードは&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;を使って&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;を探す処理です。&lt;br /&gt;
3回目で&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;を見つけてますが、最後の要素まで繰り返します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンソール結果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A
B
exit
C
found exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記コードは&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt;を使って&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;を探す処理です。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;が見つかった時点で以降の要素にはアクセスしていません。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンソール結果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A
B
exit
found exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように単体検索なら&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt;の方が効率的です。&lt;/p&gt;

&lt;h2 id=&quot;arrayで存在確認ならfirstよりcontains&quot;&gt;Arrayで存在確認ならfirstよりcontains&lt;/h2&gt;
&lt;p&gt;firstとcontainsはともに条件ヒットしたら終了します。&lt;br /&gt;
もし要素の有無を調べるだけであれば、containsを使いましょう。&lt;br /&gt;
containsの戻り値はboolで、探してた要素を使わない場合はこちらのほうがシンプルになります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一方firstを使うと戻り値が助長になります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rangeで指定範囲の数字を繰り返す&quot;&gt;Rangeで指定範囲の数字を繰り返す&lt;/h2&gt;

&lt;p&gt;指定範囲でfor文を回したい時に便利です。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンソール結果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
11
12
13
14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rangeで指定数だけ繰り返す&quot;&gt;Rangeで指定数だけ繰り返す&lt;/h2&gt;

&lt;p&gt;範囲に寄る繰り返しで開始値を0に固定にして、Intのextensionに次のメソッド用意するだけで、RubyのActiveSupportにあるような書き方ができるようになります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CountableRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;collectionの安全な添字アクセス&quot;&gt;Collectionの安全な添字アクセス&lt;/h2&gt;

&lt;p&gt;Dictionaryのsubscriptのように無効であればnilを返すようにする拡張メソッドです。
通常であれば例外になるArrayの添字アクセスもこのメソッドを通すことで安全にアクセスできるようになります。&lt;/p&gt;

&lt;p&gt;これは割と有名かと思われます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safe&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンソール&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Optional(1)
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;arrayで要素数を気にせず範囲取得&quot;&gt;Arrayで要素数を気にせず範囲取得&lt;/h2&gt;

&lt;p&gt;配列の要素数を気にせず範囲取得したい場合に「先頭からN」または「後方からN」のパターンであれば&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;suffix&lt;/code&gt;を使うことで、要素数を上回るとり方をしてもクラッシュせず範囲取得ができます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;prefixの戻り値は&lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt;型であって&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;ではありません。&lt;br /&gt;
Arrayのinitにわたすことで&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;に変換できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ここをシンタックスシュガー表現にすると、違う結果になるので注意です。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [ArraySlice([1, 2, 3])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;イディオムは寿命と活用範囲が狭く短い&quot;&gt;イディオムは寿命と活用範囲が狭く短い&lt;/h2&gt;
&lt;p&gt;イディオムとは特定の領域でしか活用できないノウハウのことです。&lt;br /&gt;
一般的にアーキテクチャ→デザインパターン→イディオムの並びで表されます。&lt;/p&gt;

&lt;p&gt;SwiftにおけるSwiftの特性を活かした使い方、それがSwiftのイディオムです。
別の見方をすえば、Swiftでしか使えない知識です。&lt;/p&gt;

&lt;p&gt;他言語ではまた違った書き方になるため知識の再利用がしにくいです。&lt;br /&gt;
しかしながら、実際にSwiftに触れている間でもっとも使われるのがイディオムです。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="swift" /><summary type="html">Swiftではデータ構造の代表格としてArrayとDictionaryがあります。 この2つを使いこなすことは、iOSエンジニアとして重要なことです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-05-01-ios-swift-collection-idiom/0.png" /></entry><entry><title type="html">MacでLinuxのISOファイルをUSBフラッシュメモリに書き込む</title><link href="https://blog.mothule.com/linux/linux-write-iso-to-usb-flash-drive" rel="alternate" type="text/html" title="MacでLinuxのISOファイルをUSBフラッシュメモリに書き込む" /><published>2020-04-29T00:00:00+09:00</published><updated>2020-04-29T22:54:00+09:00</updated><id>https://blog.mothule.com/linux/linux-write-iso-to-usb-flash-drive</id><content type="html" xml:base="https://blog.mothule.com/linux/linux-write-iso-to-usb-flash-drive">&lt;p&gt;&lt;strong&gt;Linux触るならシェルで焼こう&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使わなくなったPCにLinuxをインストールして触れる機会を増やし、慣れて知識を増やそう作戦の最初の壁。&lt;br /&gt;
それがLinuxのインストール…ではなく&lt;strong&gt;インストール用ドライブの作成です。&lt;/strong&gt;&lt;br /&gt;
単純にUSBメディアにISOファイルを入れるだけと思って、Finderで外部デバイスにコピーしたけどちゃんとできない人がいるのでは？&lt;/p&gt;

&lt;p&gt;インストールメディア用として認識させるには、ちゃんとした段取りで正しい方法で用意する必要があります。&lt;br /&gt;
この記事は、Macを使ってLinuxのISOイメージファイルをターミナルを使って作成する手順について説明しています。&lt;/p&gt;

&lt;h2 id=&quot;macでisoイメージファイルをusbに焼く流れ&quot;&gt;MacでISOイメージファイルをUSBに焼く流れ&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;イメージファイルをサイトから&lt;strong&gt;ダウンロード&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USBフラッシュメモリドライブ&lt;/strong&gt; をMacにセット&lt;/li&gt;
  &lt;li&gt;diskutilコマンドで&lt;strong&gt;USBフラッシュメモリを初期化&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ddコマンドで&lt;strong&gt;isoイメージファイルをUSBフラッシュメモリにコピー&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;isoイメージファイルをサイトからダウンロード&quot;&gt;ISOイメージファイルをサイトからダウンロード&lt;/h2&gt;
&lt;p&gt;OSのISOイメージファイルを公式サイトからダウンロードします。&lt;/p&gt;

&lt;p&gt;今回OSは&lt;a href=&quot;https://www.linuxmint.com/&quot;&gt;Linux Mint&lt;/a&gt;にします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/4.png&quot; width=&quot;50%&quot; alt=&quot;LinuxMintLogo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linux MintのISOイメージファイルを&lt;a href=&quot;https://www.linuxmint.com/download.php&quot;&gt;Linux Mintのダウンロードページ&lt;/a&gt;から落とします。&lt;/p&gt;

&lt;h2 id=&quot;usbフラッシュメモリドライブをmacにセット&quot;&gt;USBフラッシュメモリドライブをMacにセット&lt;/h2&gt;

&lt;p&gt;使うUSBフラッシュメモリなら何でもいいです、今回は手元にあるものから用意しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/1.jpg&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/1.jpg&quot; width=&quot;50%&quot; alt=&quot;USBフラッシュメモリ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用意したUSBフラッシュメモリドライブをMacに挿します。&lt;br /&gt;
もし下記アラートが出たら「無視」を選んでください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/2.png&quot; width=&quot;50%&quot; alt=&quot;MacUSB認識不可ディスクアラート&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;diskutilコマンドでusbフラッシュメモリを初期化&quot;&gt;diskutilコマンドでUSBフラッシュメモリを初期化&lt;/h2&gt;

&lt;p&gt;ターミナルでdiskutilコマンドを使ってドライブ初期化を実行します。&lt;/p&gt;

&lt;h3 id=&quot;diskutilとは&quot;&gt;diskutilとは？&lt;/h3&gt;
&lt;p&gt;diskutilとはディスクユーティリティツールです。&lt;br /&gt;
&lt;strong&gt;ローカルのディスクとボリュームを管理&lt;/strong&gt; するユーティリティです。&lt;br /&gt;
ほとんどのコマンドにはsudoが必要です。&lt;/p&gt;

&lt;h3 id=&quot;初期化の手順&quot;&gt;初期化の手順&lt;/h3&gt;
&lt;p&gt;diskutilコマンドを使ってドライブを初期化するには、次の手順になります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;diskutil listコマンドで&lt;strong&gt;対象ドライブのパス確認&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;diskutil eraseDiskコマンドで&lt;strong&gt;パス指定で削除&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;diskutil unmountDiskコマンドでドライブのマウント解除&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;diskutil-listコマンドで対象ドライブのパス確認&quot;&gt;diskutil listコマンドで対象ドライブのパス確認&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil list&lt;/code&gt;コマンドで現在マウントしてるUSBフラッシュメモリドライブを探します。&lt;/p&gt;

&lt;p&gt;例えば下記は自分の環境で&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil list&lt;/code&gt;を実行した結果です。&lt;br /&gt;
この場合だと最後&lt;code class=&quot;highlighter-rouge&quot;&gt;external&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;physical&lt;/code&gt;と表示されてる&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk2&lt;/code&gt;ですね。&lt;br /&gt;
容量(SIZE)も用意したUSBフラッシュメモリと同じなので間違いないです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil list
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         251.0 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         250.7 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +250.7 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            206.4 GB   disk1s1
   2:                APFS Volume Preboot                 47.8 MB    disk1s2
   3:                APFS Volume Recovery                522.7 MB   disk1s3
   4:                APFS Volume VM                      3.2 GB     disk1s4

/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *4.0 GB     disk2
   1:                       0xEF                         9.2 MB     disk2s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;diskutil-erasediskコマンドでパス指定で削除&quot;&gt;diskutil eraseDiskコマンドでパス指定で削除&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil eraseDisk&lt;/code&gt;コマンドで対象ディスクのパスを指定してディスクを初期化します。&lt;br /&gt;
使い方を簡単にすると下記です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil eraseDisk format name ドライブのパス
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ドライブのパスは、先程調べたパス(&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk2&lt;/code&gt;)になるので結果的に実行するコマンドは下記になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil eraseDisk MS-DOS UNTITLED /dev/disk2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MS-DOS&lt;/code&gt;はファイルフォーマット&lt;code class=&quot;highlighter-rouge&quot;&gt;FAT&lt;/code&gt;となります。&lt;code class=&quot;highlighter-rouge&quot;&gt;FAT32&lt;/code&gt;は古いので大抵のOSではサポートしてるため。
今回はUSBフラッシュメモリの容量は4GBなので&lt;code class=&quot;highlighter-rouge&quot;&gt;FAT&lt;/code&gt;でちょうど良かったりする。
(FATの最大ファイルサイズは4GiB)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;UNTITLED&lt;/code&gt;は何でもいいです。&lt;/p&gt;

&lt;p&gt;下記は先程のコマンドを実行した結果です。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Finished erase on disk2&lt;/code&gt;と出て無事初期化成功しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil eraseDisk MS-DOS UNTITLED /dev/disk2
Started erase on disk2
Unmounting disk
Creating the partition map
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;partitions to activate
Formatting disk2s2 as MS-DOS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FAT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with name UNTITLED
512 bytes per physical sector
/dev/rdisk2s2: 7478992 sectors &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;934874 FAT32 clusters &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4096 bytes/cluster&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;bps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512 &lt;span class=&quot;nv&quot;&gt;spc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8 &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32 &lt;span class=&quot;nv&quot;&gt;nft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0xf8 &lt;span class=&quot;nv&quot;&gt;spt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32 &lt;span class=&quot;nv&quot;&gt;hds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;255 &lt;span class=&quot;nv&quot;&gt;hid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;411648 &lt;span class=&quot;nv&quot;&gt;drv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x80 &lt;span class=&quot;nv&quot;&gt;bsec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7493632 &lt;span class=&quot;nv&quot;&gt;bspf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7304 &lt;span class=&quot;nv&quot;&gt;rdcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;infs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;bkbs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6
Mounting disk
Finished erase on disk2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;diskutil-unmountdiskコマンドでドライブのマウント解除&quot;&gt;diskutil unmountDiskコマンドでドライブのマウント解除&lt;/h3&gt;
&lt;p&gt;削除工程の最後は、マウント解除です。&lt;br /&gt;
これをせず次工程のISOイメージファイルをコピーしようとすると下記エラーとなります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd: /dev/disk2: Resource busy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記は&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil unmountDisk&lt;/code&gt;コマンドでマウント解除した結果です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil unmountDisk /dev/disk2
Unmount of all volumes on disk2 was successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ddコマンドでisoイメージファイルをusbフラッシュメモリにコピー&quot;&gt;ddコマンドでisoイメージファイルをUSBフラッシュメモリにコピー&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil eraseDisk&lt;/code&gt;でUSBフラッシュメモリをキレイにできました。&lt;br /&gt;
今度はisoイメージファイルをUSBフラッシュメモリにコピーします。&lt;br /&gt;
コピーには&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;コマンドを使います。&lt;/p&gt;

&lt;h3 id=&quot;ddコマンドとは&quot;&gt;ddコマンドとは？&lt;/h3&gt;
&lt;p&gt;ファイルの変換とコピーするコマンドです。
標準入力を標準出力にコピーします。
入力データは512バイトのブロック毎に入力・出力します。&lt;/p&gt;

&lt;h3 id=&quot;ddコマンドでisoファイルをusbメモリにコピーする&quot;&gt;ddコマンドでISOファイルをUSBメモリにコピーする&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;コマンドを次のように指定します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/Downloads/linuxmint-19.3-xfce-32bit.iso &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/disk2 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4028
489925+1 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;489925+1 records out
1973420032 bytes transferred &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1604.956170 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1229579 bytes/sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;コマンドのオプションに&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;bs&lt;/code&gt;オプションを使います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if=&lt;/code&gt;オプションで入力ファイルとなるISOイメージファイルのパスを指定します。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;of=&lt;/code&gt;オプションで出力ファイルとなるドライブのパスを指定します。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bs=&lt;/code&gt;オプションでブロックサイズを指定します。未指定時は512バイトです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このコマンドは完了に時間がかかります。&lt;br /&gt;
動いてるかどうかは、USBフラッシュメモリドライブによっては、入出力の点灯で確認できます。&lt;/p&gt;

&lt;h3 id=&quot;usbフラッシュメモリドライブを抜く&quot;&gt;USBフラッシュメモリドライブを抜く&lt;/h3&gt;

&lt;p&gt;ISOイメージファイルをUSBフラッシュメモリへコピーが完了したらマウント解除して安全にUSBドライブが抜けるようにします。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diskutil eject /dev/disk2
Disk /dev/disk2 ejected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記は&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil list&lt;/code&gt;を実行した結果です。消えてることが分かります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil list
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         251.0 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         250.7 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +250.7 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            206.4 GB   disk1s1
   2:                APFS Volume Preboot                 47.8 MB    disk1s2
   3:                APFS Volume Recovery                522.7 MB   disk1s3
   4:                APFS Volume VM                      3.2 GB     disk1s4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;インストールメディアは単純だけど慣れるほど使わない&quot;&gt;インストールメディアは単純だけど慣れるほど使わない&lt;/h2&gt;
&lt;p&gt;一回でも手を動かしてインストールメディアを作成してしまえば、思いの外単純だと思います。
でもそう何回もインストールメディアを作ることはなく、必要となったときには忘れてしまいます。&lt;/p&gt;

&lt;p&gt;こういうのは、慣れるより探せです。&lt;/p&gt;</content><author><name></name></author><category term="linux" /><category term="mint" /><category term="mac" /><summary type="html">Linux触るならシェルで焼こう</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-29-linux-write-iso-to-usb-flash-drive/0.png" /></entry><entry><title type="html">iOSエンジニアは動画を無料で簡単にSlackやGitHubに上げれる環境を構築しよう</title><link href="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg" rel="alternate" type="text/html" title="iOSエンジニアは動画を無料で簡単にSlackやGitHubに上げれる環境を構築しよう" /><published>2020-04-27T00:00:00+09:00</published><updated>2020-04-28T01:24:40+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg">&lt;p&gt;&lt;strong&gt;動画は最強の情報伝達手段です&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;iosエンジニアの動画欲しいあるある&quot;&gt;iOSエンジニアの動画欲しいあるある&lt;/h2&gt;

&lt;p&gt;iOSエンジニアがXcodeを使ってxibやstoryboard、SwiftUIで画面作成をしたら次のケースで作成画面を共有します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デザインレビュー
    &lt;ul&gt;
      &lt;li&gt;デザイナーや他エンジニア、POといった他の人に見てもらう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;説明
    &lt;ul&gt;
      &lt;li&gt;他の人に説明するときスマホ画面やPC画面をスクショしてSlackにアップロードする&lt;/li&gt;
      &lt;li&gt;GitHubのPRやIssueで変更画面や不具合発生中の画面を載せる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;進捗
    &lt;ul&gt;
      &lt;li&gt;お昼や打刻前に進捗として開発中の画面をSlackにアップロードする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このとき、静止画より動画の方がより確実に多くの情報を短時間に伝えられます。&lt;/p&gt;

&lt;p&gt;しかし、「動画を撮ろう！」と思っては見たものの…&lt;strong&gt;「無料」で「手軽」&lt;/strong&gt; に録画してアップロードできる環境でないと、有料だと諦めたり、面倒だとたまにしかアップロードしなくなります。&lt;/p&gt;

&lt;p&gt;この記事は、そんな手っ取り早く手軽にPC画面やiPhone画面を録画してアップロードしたいワガママiOSエンジニア向けに&lt;br /&gt;
&lt;strong&gt;「無料」で「簡単」にiPhone画面やPC画面を録画し、見る側もすぐに再生される軽量な動画の録画環境の構築方法について説明します。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;なおiOSエンジニア限らずAndroidエンジニアもフロントエンドWebエンジニアやデザイナーでも構築できます！&lt;/li&gt;
  &lt;li&gt;なおMac限定記事となります。Windows, Linux残念！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;軽量録画環境で必要なもの&quot;&gt;軽量録画環境で必要なもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac&lt;/li&gt;
  &lt;li&gt;QuickTime Player.app&lt;/li&gt;
  &lt;li&gt;ffmpeg&lt;/li&gt;
  &lt;li&gt;ひと手間かけたシェルスクリプト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac以外を簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerapp&quot;&gt;QuickTime Player.app&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;iPhone画面やPC画面の録画に使います&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Macに付属する動画再生プレイヤーです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.png&quot; width=&quot;240px&quot; alt=&quot;QuickTimePlayerのロゴ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;違います。&lt;strong&gt;録画機能を備えてます。&lt;/strong&gt; 「プレイヤー」って名前物凄く紛らわしいですね…&lt;/p&gt;

&lt;h3 id=&quot;ffmpeg&quot;&gt;FFmpeg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;動画の軽量化に使います&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wikipediaより引用&lt;/em&gt; した説明です。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;動画と音声を記録・変換・再生するためのフリーソフトウェアです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コマンドラインで使用できる動画と音声の変換として使います。&lt;br /&gt;
インストール方法は後で説明します。&lt;/p&gt;

&lt;h3 id=&quot;ひと手間かけたシェルスクリプト&quot;&gt;ひと手間かけたシェルスクリプト&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ちょっとした小さく単純なシェルスクリプトファイルです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これが無くても仕組みは動きますが、あるだけで後で説明する仕組みがスムーズになります。&lt;/p&gt;

&lt;p&gt;非エンジニアの方は「シェル」「スクリプト」って聞くと身構えるかもしれませんが、今回説明するシェルスクリプトは極めて単純で言ってしまえば中身を理解せずとも環境を構築できます。&lt;br /&gt;
iOSエンジニアの方でシェルについて分からない方は「&lt;span&gt;&lt;a href=&quot;/tools/shellscript/shellscript-basic-for-mobile-enginner&quot;&gt;iOSエンジニアが開発効率のために最低限知るべきシェルスクリプト入門&lt;/a&gt;&lt;/span&gt;
」を見て是非ともシェルを理解しましょう。&lt;/p&gt;

&lt;h2 id=&quot;大まかな仕組みについて&quot;&gt;大まかな仕組みについて&lt;/h2&gt;
&lt;p&gt;ここで環境構築前にざっくりと録画の仕組みについて説明します。&lt;br /&gt;
大まかな流れとしては次の通りになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;録画したいiPhoneをUSBで接続&lt;/li&gt;
  &lt;li&gt;QuickTime Playerで録画&lt;/li&gt;
  &lt;li&gt;FFmpegで動画を圧縮&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なんと、たった3工程で済みます。&lt;/p&gt;

&lt;h3 id=&quot;録画したいiphoneをusbで接続&quot;&gt;録画したいiPhoneをUSBで接続&lt;/h3&gt;

&lt;p&gt;キャプチャしたいiPhoneをUSBでMacに接続します。&lt;br /&gt;
PC画面の場合はこの作業は不要です。&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerで録画&quot;&gt;QuickTime Playerで録画&lt;/h3&gt;

&lt;p&gt;QuickTime Player.appを立ち上げて録画を開始します。&lt;br /&gt;
録画終了後は保存して完了です。&lt;/p&gt;

&lt;h3 id=&quot;ffmpegで動画を圧縮&quot;&gt;FFmpegで動画を圧縮&lt;/h3&gt;

&lt;p&gt;保存した動画ファイルは無圧縮で重いのでFFmpegで圧縮します。&lt;br /&gt;
このときにシェルスクリプトがあると大変便利です。&lt;/p&gt;

&lt;h2 id=&quot;手軽な動画環境を構築する&quot;&gt;手軽な動画環境を構築する&lt;/h2&gt;
&lt;p&gt;簡単な録画環境を構築するには、事前に仕掛けがあるから動きます。
&lt;strong&gt;今からその仕掛けを構築します。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FFmepgをインストール&lt;/li&gt;
  &lt;li&gt;シェルスクリプトを用意&lt;/li&gt;
  &lt;li&gt;シェルのパスを通す&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ffmepgをインストール&quot;&gt;FFmepgをインストール&lt;/h3&gt;
&lt;p&gt;FFmepgをHomebrewでインストールします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストールが完了したらインストールされたかを確認します。成功してたら次のような結果になるかと思います。(バージョンは時期で異なります）&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ffmpeg
ffmpeg version 3.3.4 Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000-2017 the FFmpeg developers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;もし異なる場合は下記の可能性を検討してみてください&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インストールが失敗した&lt;/li&gt;
  &lt;li&gt;homebrewでインストールしたコマンドのパスが通っていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;シェルスクリプトを用意&quot;&gt;シェルスクリプトを用意&lt;/h3&gt;

&lt;p&gt;このシェルスクリプトを説明する前に、前提情報を知っておく必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;QuickTime Playerは録画の保存を選ぶと、開かれる保存先は前回保存先になります。&lt;/li&gt;
  &lt;li&gt;保存のデフォルトファイル名は&lt;code class=&quot;highlighter-rouge&quot;&gt;名称未設定.mov&lt;/code&gt;です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このシェルスクリプトは次の動きをします。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;カレントディレクトリを決められた場所に移動します&lt;/li&gt;
  &lt;li&gt;FFmpegで「名称未設定.mov」を「dest.mp4」にMP4変換します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下記はその動きをするシェルスクリプトになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 名称未設定.mov dest.mp4 &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;たったこれだけです。非常に短く単純なシェルスクリプトです。&lt;br /&gt;
これをファイルとして適当な場所に保存してください。&lt;/p&gt;

&lt;p&gt;ここでは説明便宜上、下記パスに保存します。&lt;br /&gt;
「&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh/encode_movie.sh&lt;/code&gt;」&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt;フォルダが無い方は作っておいてください。&lt;/p&gt;

&lt;h4 id=&quot;chmodで実行可能にする&quot;&gt;chmodで実行可能にする&lt;/h4&gt;
&lt;p&gt;次に保存したシェルスクリプトを誰でも実行可能にするためにchmodで実行権限を編集します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 ~/sh/encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt;コマンドを使わず実行できます。これをしておかないとやはりスムーズとは言えません。&lt;/p&gt;

&lt;h4 id=&quot;分からない方向け-全部をまとめて用意するシェルコマンド&quot;&gt;分からない方向け: 全部をまとめて用意するシェルコマンド&lt;/h4&gt;

&lt;p&gt;次のシェルコマンドをターミナルにコピペして実行すれば先程説明した内容をまとめてやってくれます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#!/bin/bash&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd ~/Downloads&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ffmpeg -i 名称未設定.mov dest.mp4 -y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/sh/encode_movie.sh
chmod 711 ~/sh/encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このシェルコマンドらは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のホームディレクトリにshディレクトリを作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;ファイルを作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;の実行権限を変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をやってくれます。&lt;/p&gt;

&lt;h3 id=&quot;シェルのパスを通す&quot;&gt;シェルのパスを通す&lt;/h3&gt;
&lt;p&gt;用意したシェルスクリプトは、同じ名前と場所で保存していれば「&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh/encode_movie.sh&lt;/code&gt;」にあると思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;しかし、このままでは動画を作成後に、スクリプトを呼ぶためにわざわざパスを指定しなければいけません。&lt;/strong&gt;&lt;br /&gt;
それだと面倒なのでどこのディレクトリからでも呼べるようにパスを通します。&lt;/p&gt;

&lt;p&gt;PATH環境変数に&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh&lt;/code&gt;のパスを通すことで、ターミナル上からどこでも呼べるようになります。
ターミナルのデフォルトシェルがbashであれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;にPATH環境変数にパスを追加する処理を書きます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim ~/.bash_profile&lt;/code&gt;で次の処理を追加します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:~/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;$ source ~/.bash_profile&lt;/code&gt;でリロードしておきましょう。&lt;/p&gt;

&lt;h2 id=&quot;実際に動画を撮る&quot;&gt;実際に動画を撮る&lt;/h2&gt;
&lt;p&gt;動画環境は整いました。それでは実際にiPhone画面の録画とMac画面の録画をしてみます。&lt;/p&gt;

&lt;h3 id=&quot;iphoneとmacをusbで接続&quot;&gt;iPhoneとMacをUSBで接続&lt;/h3&gt;

&lt;p&gt;録画したいiPhoneをMacにUSBで接続します。&lt;/p&gt;

&lt;p&gt;もしiPhoneをMacに初めて接続する場合は、次のような確認がiPhoneに表示されるので「信頼」を選んでください。&lt;br /&gt;
そうしないと、次工程のQuickTime Playerで端末を認識しなくなります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/2.jpg&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/2.jpg&quot; width=&quot;50%&quot; alt=&quot;iPhone信頼確認画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerappを立ち上げる&quot;&gt;QuickTime Player.appを立ち上げる&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spotlight検索&lt;/code&gt;で「QuickTime」と入力すれば見つけられます。&lt;br /&gt;
起動したらメニューバーからファイル&amp;gt;新規ムービー収録を選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/3.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービー収録&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新規ムービー週力を選ぶと、Macやモニターに付属するカメラやiPhone画面の映像が画面に写ります。&lt;br /&gt;
もしiPhone画面になっていない場合は、ウィンドウ下の赤いボタンの右側を押すと撮影先が並ぶので、そこでiPhoneを選んでください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/4.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービーの映像ソース選択&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;赤いボタンを押すと、録画が始まります。録画を止める場合はもう一度赤いボタンを押すと終了します。&lt;br /&gt;
試しに自分のブログを閲覧してるSafariを録画してます。&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;/assets/videos/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.mp4&quot; width=&quot;100%&quot; height=&quot;400px&quot;&gt;うまく読み込めない場合はリロード&lt;/video&gt;

&lt;p&gt;録画が終わると、編集画面になります。&lt;strong&gt;この段階ではまだ保存されていないです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/5.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービ収録編集画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面で保存(&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+s&lt;/code&gt;)を押すと保存先の選択が出ます。&lt;/p&gt;

&lt;p&gt;ここでファイル名はそのままの「&lt;strong&gt;名称未設定.mov&lt;/strong&gt;」にしてください。&lt;br /&gt;
&lt;strong&gt;ファイル名を変更してしまうと、次工程のシェルスクリプトが動きません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;また保存先（場所）は「&lt;strong&gt;ダウンロード&lt;/strong&gt;」にしてください。&lt;br /&gt;
&lt;strong&gt;ここも変更するとシェルスクリプトが動きません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;つまり保存先を&lt;strong&gt;Donwloads&lt;/strong&gt; に一度しておくことで、この部分は何も気にせず保存するだけになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/6.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayerファイル保存確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ターミナルでシェルスクリプトを実行する&quot;&gt;ターミナルでシェルスクリプトを実行する&lt;/h3&gt;

&lt;p&gt;ターミナルを開いて、保存してパスを通しておいたシェルスクリプトファイルを実行します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;パスが通っているので、シェルスクリプトファイル名を指定するだけでいいです。&lt;br /&gt;
実行すると&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/dest.mp4&lt;/code&gt;にファイルが作成されます。&lt;/p&gt;

&lt;h2 id=&quot;なぜffmpegが必要なのか&quot;&gt;なぜFFmpegが必要なのか？&lt;/h2&gt;
&lt;p&gt;FFmpegやそれを実行するシェルスクリプトが必要な理由は、ファイルサイズにあります。&lt;/p&gt;

&lt;p&gt;下記は、QuickTime Playerで作成したファイル「名称未設定.mov」のファイルサイズと&lt;br /&gt;
FFmpegで圧縮したファイル「dest.mp4」のファイルサイズを比較した表です&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ファイル名&lt;/th&gt;
      &lt;th&gt;サイズ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;名称未設定.mov&lt;/td&gt;
      &lt;td&gt;28.3MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dest.mp4&lt;/td&gt;
      &lt;td&gt;2.1MB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;圧倒的に圧縮したことでサイズが小さくなりました。約1/14です。&lt;/p&gt;

&lt;h3 id=&quot;このファイルサイズが何に影響するのか&quot;&gt;このファイルサイズが何に影響するのか&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;アップロード時間とダウンロード時間に影響します&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;まずSlackにアップロードするのに時間がかかります。これはまだ自分だけにしか影響を与えません。&lt;br /&gt;
しかし、この動画を見る閲覧者はダウンロードに影響します。&lt;br /&gt;
Slackで再生ボタンを押してもなかなか再生されなかったり、ストリーミングダウロードが間に合わずカクつきます。&lt;br /&gt;
またファイルの大きすぎる動画ファイルはサムネが表示されないケースが多いです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;読み手のことや動画で伝えたい目的を考えると、閲覧側のストレスを抑えるのは自然なことです。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mac画面の録画も簡単&quot;&gt;Mac画面の録画も簡単&lt;/h3&gt;

&lt;p&gt;PC画面内のキャプチャも簡単です。
QuickTime Playerで「&lt;strong&gt;新規画面収録&lt;/strong&gt;」を選ぶだけです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/7.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規画面収録メニュー&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新規画面収録を選ぶとキャプチャ領域を選ぶ設定になります。
全画面まるごとと指定範囲の２タイプが選べます。&lt;/p&gt;

&lt;p&gt;この画像は指定範囲で選んば場合です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/8.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/8.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規画面収録指定範囲&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;収録を開始&lt;/strong&gt; ボタンを押すことで録画開始になります。&lt;/p&gt;

&lt;p&gt;録画停止は、Macのツールバーにボタンがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/9.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/9.png&quot; width=&quot;50px&quot; alt=&quot;QuickTimePlayer新規画面収録停止ボタン&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もしくはTouch BarのあるMacの場合は、タッチバーにもボタンがあります。&lt;/p&gt;

&lt;h2 id=&quot;githubはmp4はアップロードできない&quot;&gt;GitHubはmp4はアップロードできない&lt;/h2&gt;
&lt;p&gt;先程説明したのはmp4の動画でした。しかしGitHubではIssueやPRではmp4の動画ファイルをアップロードすることができません。&lt;/p&gt;

&lt;p&gt;しかしgifは対応しています。そしてFFmpegはgif変換も対応しています。&lt;br /&gt;
なので今度は動画をgifに変換すれば良さそうです。&lt;/p&gt;

&lt;p&gt;そしてその方法は非常に簡単に実現できます。&lt;/p&gt;

&lt;h3 id=&quot;gifに変換するシェルスクリプト&quot;&gt;gifに変換するシェルスクリプト&lt;/h3&gt;
&lt;p&gt;このシェルスクリプトはQuickTime Playerで作成した動画ファイルに対し、　　
30FPSのサイズ320でgifファイルを作成します。&lt;/p&gt;

&lt;p&gt;このファイルには一度mp4に変換してからgifに変換しています。　　
そしてそのmp4に変換する処理は前述で説明したmp4に変換するシェルスクリプト「&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;」を呼んで変換しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads

&lt;span class=&quot;nv&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30
&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;320
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;sh encode_movie.sh
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; dest.mp4 &lt;span class=&quot;nt&quot;&gt;-vf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scale&lt;/span&gt;:-1 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rate&lt;/span&gt; dest.gif &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;またこのスクリプトは引数でスケールを変更することができます。例えばスケールをデフォルトの倍にする場合は&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encode_gif.sh 640
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;とすることでスケールが320から640になります。&lt;/p&gt;

&lt;h2 id=&quot;iosエンジニアなら画面共有に慣れよう&quot;&gt;iOSエンジニアなら画面共有に慣れよう&lt;/h2&gt;
&lt;p&gt;iOSエンジニアは画面デザインがある限り、デザイナーやPOに画面の動きを見せることは非常に多いです。&lt;br /&gt;
Slackでやり取りを円滑にするために、動画で画面の動き共有が気軽にできる環境は非常にコミュニケーションを円滑に進められます。&lt;/p&gt;

&lt;p&gt;今回説明した内容は、一度環境を構築しておくだけでよくて、その後は特に弄らずともずっと使い続けられます。
しかもシェルスクリプトの内容自体も非常にシンプルで、長く見ても短く見てもコスパの良い環境です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><category term="ffmpeg" /><category term="quicktime-player" /><category term="mac" /><summary type="html">動画は最強の情報伝達手段です</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/0.png" /></entry><entry><title type="html">crontabの書き方や確認、仕組みや落とし穴を理解する</title><link href="https://blog.mothule.com/tools/how-to-use-cron" rel="alternate" type="text/html" title="crontabの書き方や確認、仕組みや落とし穴を理解する" /><published>2020-04-26T00:00:00+09:00</published><updated>2020-04-26T07:55:19+09:00</updated><id>https://blog.mothule.com/tools/how-to-use-cron</id><content type="html" xml:base="https://blog.mothule.com/tools/how-to-use-cron">&lt;p&gt;定期実行といえばcron、それらスケジュールを制御するコマンドがcrontabです。&lt;/p&gt;

&lt;p&gt;でも、たまにしか触らないのでスケジュールの書き方をよく忘れます。&lt;br /&gt;
それどころかコマンドの使い方すら忘れるほど触れない時期が長いコマンドですね。&lt;br /&gt;
そして「cronは定期実行」というコマンドとしては比較的理解しやすい役割をもつため、きちんと仕組みについて理解せずとも使えたりします。&lt;/p&gt;

&lt;p&gt;この記事では書き方や今登録されているスケジュールの確認方法だけでなく、そもそもの動作仕組みや慣れてないとよくハマる落とし穴について、普段のメモ的な確認から基礎理解までまとめました。&lt;/p&gt;

&lt;h2 id=&quot;cronとcrontabの違い&quot;&gt;cronとcrontabの違い&lt;/h2&gt;

&lt;p&gt;cron、crontab、crontabファイルと似た言葉があるので、まずは超ざっくり用語整理します。&lt;/p&gt;

&lt;h3 id=&quot;cronとは&quot;&gt;cronとは？&lt;/h3&gt;
&lt;p&gt;crontabにスケジュールされたコマンドを実行する&lt;strong&gt;デーモン&lt;/strong&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;crontabとは&quot;&gt;crontabとは？&lt;/h3&gt;
&lt;p&gt;個々のユーザのcrontabファイルをメンテナンスする&lt;strong&gt;コマンド&lt;/strong&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルとは&quot;&gt;crontabファイルとは？&lt;/h3&gt;
&lt;p&gt;crontabコマンドによって作成された&lt;strong&gt;ファイル&lt;/strong&gt;です。&lt;br /&gt;
中身はcronが解釈可能な記法で記載されたスケジュールが並んでいます。&lt;/p&gt;

&lt;h4 id=&quot;crontabファイルを覗いてみる&quot;&gt;crontabファイルを覗いてみる&lt;/h4&gt;
&lt;p&gt;実際ファイルを覗いてみるとこんな感じです。&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;はコメント行です。&lt;br /&gt;
コメントに書いてるように&lt;strong&gt;このファイルを直接編集してはいけません。&lt;/strong&gt;&lt;br /&gt;
この場合では1つスケジュールが登録されています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.S21fXH5GxY installed on Sat Jun  2 23:14:39 2018)
# (Cron version -- $FreeBSD: src/usr.sbin/cron/crontab/crontab.c,v 1.24 2006/09/03 17:52:19 ru Exp $)
*/10 5-22 * * 1-5 ~/cron/sh/hoge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cronの動きを理解する&quot;&gt;cronの動きを理解する&lt;/h2&gt;
&lt;p&gt;crontabにスケジュールされたコマンドを実行するデーモンです。&lt;/p&gt;

&lt;h3 id=&quot;誰がcronを起動するのか&quot;&gt;誰がcronを起動するのか？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;デーモン起動は自動です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にファイル存在を検知すると起動します。&lt;br /&gt;
ユーザは手動でcronデーモンを起動する必要ありません。&lt;/p&gt;

&lt;h3 id=&quot;どこからcrontabファイルをロードするのか&quot;&gt;どこからcrontabファイルをロードするのか？&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;のアカウント名にちなんで名付けられたcrontabファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;から検索します。&lt;br /&gt;
見つけたcrontabはメモリ上にロードされます。&lt;br /&gt;
また異なる形式の&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;も検索対象です。&lt;/p&gt;

&lt;h3 id=&quot;指定時間にコマンド実行する仕組み&quot;&gt;指定時間にコマンド実行する仕組み&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cronは毎分起動してます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cronは毎分起動し保存されてるcrontabを調べ現在の分で実行する必要があるか確認します。&lt;br /&gt;
コマンドを実行すると、出力はcrontab所有者またはMAILTO環境変数で指定されたユーザーにメールで送信されます。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルを反映する方法&quot;&gt;crontabファイルを反映する方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;crontabの変更は自動更新です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cronはcrontabが変更されたかどうかを毎分チェックしており、変更されていればcrontabファイルを再ロードします。&lt;br /&gt;
そのためにcrontabで変更してもcron再起動は不要です。&lt;/p&gt;

&lt;h2 id=&quot;crontabを理解する&quot;&gt;crontabを理解する&lt;/h2&gt;
&lt;p&gt;crontabコマンドはcrontabファイルを編集したり現在のスケジュールを確認するためのコマンドです。&lt;br /&gt;
crontabでスケジュール追加や変更することでcronが自動で起動またはリロードします。&lt;/p&gt;

&lt;h3 id=&quot;crontabのtabとは&quot;&gt;crontabのtabとは？&lt;/h3&gt;
&lt;p&gt;明確な情報はありませんが、tableのtabだと思います。&lt;br /&gt;
crontabは行毎が1情報となっており、何個もcronがスケジュールされていると表(table)のようになるからだと思います。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルの場所&quot;&gt;crontabファイルの場所&lt;/h3&gt;
&lt;p&gt;crontabファイルは、&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にあります。&lt;br /&gt;
ファイル名はユーザー名になっています。&lt;/p&gt;

&lt;p&gt;私のMac環境では&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にありました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ls /usr/lib/cron/tabs
mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;crontabの形式&quot;&gt;crontabの形式&lt;/h3&gt;
&lt;p&gt;crontabファイルはフォーマットに従わなければいけません。&lt;br /&gt;
1行毎にスケジュールが並んでおり、1行で実行時間と実行内容が並びます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分 時 日 月 曜日 コマンド
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この順番で並んでいるなければいけません。&lt;/p&gt;

&lt;h2 id=&quot;crontabコマンドの使い方&quot;&gt;crontabコマンドの使い方&lt;/h2&gt;
&lt;p&gt;使用方法は次のようになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab [-u user] file
crontab [-u user] { -l | -r | -e }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;オプションそれぞれについて説明します。&lt;/p&gt;

&lt;h3 id=&quot;-u-ユーザ名の指定&quot;&gt;-u: ユーザ名の指定&lt;/h3&gt;

&lt;p&gt;crontabを調整するユーザを指定します。&lt;br /&gt;
&lt;strong&gt;未指定の場合は、実行中ユーザ&lt;/strong&gt; のcrontabを調整します。&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt;コマンド中にcrontabを実行するとどのユーザで実行するか不安定になるため、安全のために&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;オプションが必要です。&lt;/p&gt;

&lt;h3 id=&quot;-l-現在のスケジュールを確認&quot;&gt;-l: 現在のスケジュールを確認&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;オプションをつけることで、現在ロードされてるcrontabファイルを確認できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 5-22 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1-5 ~/cron/sh/hoge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-r-現在のスケジュールを全て削除&quot;&gt;-r: 現在のスケジュールを全て削除&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;オプションをつけることで、crontabファイルを削除します。&lt;/p&gt;

&lt;p&gt;次のシェルは実際にcrontabファイルを削除したあとに確認してます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 5-22 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1-5 ~/cron/sh/hoge.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
crontab: no crontab &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-e-現在のスケジュールを編集&quot;&gt;-e: 現在のスケジュールを編集&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;オプションをつけることで、スケジュールを編集します。&lt;br /&gt;
VISUAL環境変数またはEDITOR環境変数で指定されたエディタアプリで編集します。&lt;br /&gt;
エディタ終了すると自動的に適用されます。&lt;/p&gt;

&lt;p&gt;次のシェルは空の状態から新しくスケジュールを登録してます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
crontab: no crontab &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mothule - using an empty one
crontab: installing new crontab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;注意-1&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;ファイルを直接編集する必要があるため、ファイルのリンクを解除して再生成するエディタは使えません。&lt;/p&gt;

&lt;h2 id=&quot;crontabの実行権限を制御する&quot;&gt;crontabの実行権限を制御する&lt;/h2&gt;
&lt;p&gt;crontabは定期実行のスケジュールを編集できるコマンドです。&lt;br /&gt;
実行されるコマンドによっては重要な処理だったりします。&lt;br /&gt;
誰でも編集できる状態だと、悪意なくとも人為的なミスが起きるリスクが存在し続けます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;このリスクヘッジとして、cron.allowとcron.denyを使うことでcrontabの実行権限を制御できます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.allow&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.deny&lt;/code&gt;ファイルはそれぞれ、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/cron.allow&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/cron.deny&lt;/code&gt;として配置することで有効化されます。&lt;/p&gt;

&lt;p&gt;それぞれの中身は行ごとに1ユーザーの名前が並びます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.allow&lt;/code&gt;ファイルが存在する場合は、その中に記載されたユーザーのみが使えます。つまりホワイトリストですね。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.deny&lt;/code&gt;ファイルが存在する場合は、その中に記載されたユーザーは使えません。つまりブラックリストですね。&lt;/p&gt;

&lt;h2 id=&quot;crontabの書き方&quot;&gt;crontabの書き方&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;crontabの書き方は覚えにくいです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;特性上何度も書くこともないし、他コマンドなどで同じフォーマットがないためです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分 時 日 月 曜日 コマンド
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;日時の範囲&quot;&gt;日時の範囲&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;値範囲&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;分&lt;/td&gt;
      &lt;td&gt;0~59&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;時&lt;/td&gt;
      &lt;td&gt;0~23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;日&lt;/td&gt;
      &lt;td&gt;1~31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;月&lt;/td&gt;
      &lt;td&gt;1~12 or jan~dec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;曜日&lt;/td&gt;
      &lt;td&gt;0~7 or sun ~ sat&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;アスタリスクはどの値にも当てはまる&quot;&gt;アスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)はどの値にも当てはまる&lt;/h3&gt;
&lt;p&gt;例えば次のスケジュールは毎分実行されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;項目となる部分をアスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)とすることで、その項目はどの値であってもパスするようになります。&lt;/p&gt;

&lt;h3 id=&quot;-で区切ると複数時間を指定できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; で区切ると複数時間を指定できる&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;月曜と水曜のみ実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1,3 &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-で挟むと範囲時間を指定できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;で挟むと範囲時間を指定できる&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;9時〜22時のみ実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 9-22 * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-を--で割ると一定時間おきに実行する&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; で割ると一定時間おきに実行する&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3時間置きに実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/3 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;※ この記法は Linux だと動かないかも&lt;/p&gt;

&lt;h2 id=&quot;ケース別crontabの書き例&quot;&gt;ケース別crontabの書き例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1分毎に実行&lt;/li&gt;
  &lt;li&gt;15分毎に実行&lt;/li&gt;
  &lt;li&gt;1時間毎に実行&lt;/li&gt;
  &lt;li&gt;毎日21時に実行&lt;/li&gt;
  &lt;li&gt;毎週日曜の9時と21時に実行&lt;/li&gt;
  &lt;li&gt;12月の平日の9時から22時までの間10分毎に実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1分毎に実行&quot;&gt;1分毎に実行&lt;/h3&gt;

&lt;p&gt;これは特に説明不要ですね。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;15分毎に実行&quot;&gt;15分毎に実行&lt;/h3&gt;

&lt;p&gt;分を15で割ることで15分毎になります&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/15 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1時間毎に実行&quot;&gt;1時間毎に実行&lt;/h3&gt;

&lt;p&gt;分を固定値にすることで1時間毎になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;毎時0分に実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;毎時27分に実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;27 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;毎日21時に実行&quot;&gt;毎日21時に実行&lt;/h3&gt;

&lt;p&gt;時を固定値にすることで毎日21時に実行します&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 21 * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分をアスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)だと21時00分〜21時59分の60回実行されてしまうので注意です。&lt;/p&gt;

&lt;h3 id=&quot;毎週日曜の9時と21時に実行&quot;&gt;毎週日曜の9時と21時に実行&lt;/h3&gt;

&lt;p&gt;曜日で日にちを縛って、カンマで9時と21時を指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 9,21 * * sun command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;曜日は数字でも英字でも指定できます。日曜日は数字だと0です&lt;/p&gt;

&lt;h3 id=&quot;9月の平日の9時から22時までの間10分毎に実行&quot;&gt;9月の平日の9時から22時までの間10分毎に実行&lt;/h3&gt;

&lt;p&gt;ハイフン(&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;)で月を範囲指定し、曜日で平日に制限します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/10 9-22 * 9 1-5 command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cronローカル活用術&quot;&gt;cronローカル活用術&lt;/h2&gt;

&lt;p&gt;cronはサーバーでバッチ処理のイメージが強いですが、個人のPCでも十分使いこなすことができます。&lt;br /&gt;
crontabに記載するコマンドはシェルコマンドであれば何でもいいので、外部シェルやRubyスクリプトを実行することもできます。&lt;/p&gt;

&lt;p&gt;例えば次のスケジュールをMac上のcrontabで登録すると毎分通知をすることができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * * * * /Users/mothule/.rbenv/shims/terminal-notifier -message '1分経過'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-26-how-to-use-cron/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-26-how-to-use-cron/1.png&quot; width=&quot;100%&quot; alt=&quot;terminal-notifierによるMac通知&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記例だと単純に1分毎に決められた文言が通知されるだけですが、&lt;strong&gt;Rubyスクリプトなどで25分/5分のポモドーロ・テクニックを使って通知させたりもできます。&lt;/strong&gt; また通信して変更があればslackに通知といったこともできます。&lt;/p&gt;

&lt;h2 id=&quot;cronの実行時エラーをログで確認する&quot;&gt;cronの実行時エラーをログで確認する&lt;/h2&gt;
&lt;p&gt;crontabに並ぶコマンドを実行してエラーが発生したらログとして残ります。&lt;/p&gt;

&lt;p&gt;ログが更新されたかどうかはターミナルを弄ってると通知されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$
You have mail in /var/mail/mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このパスがログとなっています。&lt;/p&gt;

&lt;h2 id=&quot;cronだとcommand-not-foundが出る場合&quot;&gt;cronだとcommand not foundが出る場合&lt;/h2&gt;
&lt;p&gt;ターミナル上では動くコマンドでもcron実行だと&lt;code class=&quot;highlighter-rouge&quot;&gt;command not found&lt;/code&gt;と出て実行されない場合があります。&lt;br /&gt;
cronが実行される環境では、コマンドへのPATHが通っていないことが考えられます。&lt;br /&gt;
シェルとターミナルの関係性を理解してると分かりますが、ターミナルが立ち上がるときにPATH設定など事前準備後にターミナルが立ち上がります。&lt;/p&gt;

&lt;p&gt;cronはターミナルを通していないため、PATH環境変数が異なります。&lt;/p&gt;

&lt;p&gt;この場合の解決方法は２つあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コマンドを絶対パスで指定&lt;/li&gt;
  &lt;li&gt;PATH環境変数を設定してコマンド実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;コマンドを絶対パスで指定&quot;&gt;コマンドを絶対パスで指定&lt;/h3&gt;

&lt;p&gt;例えば前述した&lt;code class=&quot;highlighter-rouge&quot;&gt;terminal-notifier&lt;/code&gt;コマンドであれば、私の環境での絶対パスは&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/mothule/.rbenv/shims/terminal-notifier&lt;/code&gt;です。
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt;コマンドで調べることができます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which terminal-notifier
/Users/mothule/.rbenv/shims/terminal-notifier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;path環境変数を設定してコマンド実行&quot;&gt;PATH環境変数を設定してコマンド実行&lt;/h3&gt;

&lt;p&gt;シェルコマンドは環境変数を設定してから実行することが可能です。
この仕組を使って、crontabに設定するコマンドの手前に、PATHにコマンドのパスを追加することで、コマンドだけの実行でもパスが通っていることで実行可能となります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/Users/mothule/.rbenv/shims terminal-notifier &lt;span class=&quot;nt&quot;&gt;-message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;crontabで色々な理解を深める&quot;&gt;crontabで色々な理解を深める&lt;/h2&gt;
&lt;p&gt;ただ決まった時間に実行するスケジューラーでもcronの仕組みやcronとcrontabとの関係を知ることで、理解が深まります。
落とし穴を知ることで、シェルやターミナルも少し理解が進みます。&lt;/p&gt;

&lt;p&gt;以上がcrontabの記事でした。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="cron" /><summary type="html">定期実行といえばcron、それらスケジュールを制御するコマンドがcrontabです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-26-how-to-use-cron/0.png" /></entry><entry><title type="html">アジャイル開発を勘違いしてる企画職やPMがいる会社は苦労する</title><link href="https://blog.mothule.com/notebook/engineers-are-hating-they" rel="alternate" type="text/html" title="アジャイル開発を勘違いしてる企画職やPMがいる会社は苦労する" /><published>2020-04-22T00:00:00+09:00</published><updated>2020-04-22T02:22:15+09:00</updated><id>https://blog.mothule.com/notebook/engineers-are-hating-they</id><content type="html" xml:base="https://blog.mothule.com/notebook/engineers-are-hating-they">&lt;p&gt;Web界隈では開発手法はウォーターフォールからアジャイル開発へとシフトしていると思います。
従来のウォーターフォール方式では完成した頃には既に二番手三番手、既に古いと思われるほど求められるニーズの変化速度が速くなっているからです。&lt;/p&gt;

&lt;p&gt;この変化に柔軟に対応できる開発方法がアジャイル開発でした。正しく理解し運用することで安定した開発が可能になります。
また上位レイヤーのリーン開発との相性もよくリーン＋アジャイルでのフットワーク軽い開発スタイルは見かけます。
しかしこのアジャイル開発を浅く知って勘違いした企画職やPMがアジャイルでもウォーターフォールでもないどちらのメリットもない形に崩すのは典型例です&lt;/p&gt;

&lt;p&gt;この記事はアジャイル開発を5年近く続けて経験した苦労話です。&lt;/p&gt;

&lt;p&gt;なお私が経験したのはアジャイル開発はスクラム＋XPです。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発は細かくリリースしやすい&quot;&gt;アジャイル開発は細かくリリースしやすい&lt;/h2&gt;

&lt;p&gt;Webの特徴であるリリースを何回もできることを前提とした、数機能ずつリリースを繰り返すサイクルです。
実装する機能はスプリント初期に構築したプロダクトバックログのストーリーと呼ばれる機能をシナリオ化した物が並び順になっており、
1~2週間を1スプリント(SP)と称し1SP内にそのストーリーを対応して、SP終わりにプロダクトオーナー(PO)と呼ばれるプロダクト成長を責務とする人が
ストーリーを満たしているか受入判定を行います。そしてSP頭になればまた次の優先度のストーリーを進めます。
プロダクトはSP毎に常にリリース可能な状態となっていなければならず、それにより期限が予定より短くなったり開発が遅れたりすることで優先度の低い未対応ストーリーはそのままで
リリースすることでプロダクトにとって最も重要な順に対応された機能がユーザーに届けられます。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発が非開発者に勘違いされがちなこと&quot;&gt;アジャイル開発が非開発者に勘違いされがちなこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;柔軟に仕様を変更できる&lt;/li&gt;
  &lt;li&gt;細かい仕様書が不要&lt;/li&gt;
  &lt;li&gt;開発やデザイナーだけで開発が回る&lt;/li&gt;
  &lt;li&gt;人員増やせばより開発が加速・安定する&lt;/li&gt;
  &lt;li&gt;ウォーターフォールより早い&lt;/li&gt;
  &lt;li&gt;立て続けに機能追加できる&lt;/li&gt;
  &lt;li&gt;プロダクトオーナーは若手でもできる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;柔軟に仕様を変更できる&quot;&gt;柔軟に仕様を変更できる&lt;/h3&gt;

&lt;p&gt;アジャイル開発の利点を概要部分だけ読んだ企画がよく勘違いします。
そんな夢物語があるわけないです。&lt;/p&gt;

&lt;p&gt;厳密には次の通りです&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SPレビューからSP計画までの間にプロダクトバックログ内のストーリー単位での未対応ストーリーの優先順位変更が可能&lt;/li&gt;
  &lt;li&gt;未対応ストーリーの仕様変更が可能&lt;/li&gt;
  &lt;li&gt;仕様変更したら関連するストーリー全てのポイントが再見積もりとなる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。
これをSP中にも関わらず対応中の機能の仕様をコロコロ変えたら、そのSPでは何もストーリーを達成できません。
本来はSPが走り始めたらストーリーを変えてはいけません。対応してよいストーリーはReadyを満たしたものだけになります。&lt;/p&gt;

&lt;p&gt;当たり前ですが、仕様変更するならした分だけ工数は伸びます。これはどの開発手法でも変わりません。&lt;/p&gt;

&lt;h3 id=&quot;細かい仕様書が不要&quot;&gt;細かい仕様書が不要&lt;/h3&gt;

&lt;p&gt;アジャイル開発では「資料よりも対話」を大事にしようと言われています。
しかしこれを口頭で全部伝えればOK、細かいことは伝えずOKと勘違いする企画がバカのように多いです。&lt;/p&gt;

&lt;p&gt;そもそもの前提が間違っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;複雑なビジネスロジックや重要機能は最適量の仕様書は必要です。&lt;/li&gt;
  &lt;li&gt;不要とは言っていません。ちょっとした確認や本当に細かい部分を資料ではなく口頭でやろう。という逆位置からのスタートです。&lt;/li&gt;
  &lt;li&gt;大前提としてPOが隣や向かいの席など超近接です&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを仕様も伝えず最も重要な機能も伝えず、違う企画だらけの島に席をおいて、しょっちゅう会議でいない無能POがいます。&lt;/p&gt;

&lt;p&gt;そんなテレパシーを超えたテクノロジーもビックリの情報疎通環境でできるんだと間違うお花畑企画がいます。&lt;/p&gt;

&lt;h3 id=&quot;開発やデザイナーだけで開発が回る&quot;&gt;開発やデザイナーだけで開発が回る&lt;/h3&gt;

&lt;p&gt;SP計画とSPレビューだけ顔出してSP中は一切無関係みたいな勘違いも見かけます。
スクラムの前提はPOもデザイナーも開発、SMもコアメンバーは一つのチームとして動きます。
それぞれがスペシャリストでなければいけません。&lt;/p&gt;

&lt;p&gt;それを勘違いして仕様バグ確認や優先順位や精査、プロダクトバックログの整理やユーザー分析などをせず、別の企画の決裁向けプレゼン資料を作ってるバカも多いです。
シニア企画に多いです。&lt;/p&gt;

&lt;h3 id=&quot;人員増やせばより開発が加速安定する&quot;&gt;人員増やせばより開発が加速・安定する&lt;/h3&gt;

&lt;p&gt;アジャイル開発はメンバー全員が「プロダクトを良くしたい」という同一姿勢が前提で、同じプロダクトに同じメンバーで続けることでチーム内成熟度が熟成し、手戻りや齟齬を減らしたり、付帯作業を抑えたり、プロダクトへの知識を蓄積することでベロシティを安定化させるなど、そのプロダクトにおいてそのチームが最も適切で先鋭となることがアジャイル開発をするチームにおいて重要なことです。&lt;/p&gt;

&lt;p&gt;これを1フェイズ終わったからといって、メンバーをコロコロ変えたり、ベロシティが低くて期限に間に合わないからと言ってメンバーを増員したりなどするのは悪手です。
アジャイル開発はPOとしてしっかり接していないと、プロダクトバックログやスプリントバックログのマネージメントコストが超非常に高いという事実をまず知らないです。&lt;/p&gt;

&lt;p&gt;これをチームとして参加せず数字だけ見てる人がよくやる典型的なリソースコントロールです。
机上の空論です。扱ってるリソースが機械だと思ってるのでしょう。&lt;/p&gt;

&lt;h3 id=&quot;ウォーターフォールより早い&quot;&gt;ウォーターフォールより早い&lt;/h3&gt;

&lt;p&gt;アジャイル開発はSP毎にリリースReadyにする、対応ストーリーのみを考慮した開発、先のストーリーは考えない（結局やらない可能性もあるから）といった特徴もあるため
開発に無駄があります。&lt;/p&gt;

&lt;p&gt;例で言うと、ウォーターフォールでは全部の仕様を策定し、それを確認した上でデータベースのテーブル設計を行います。
設計されたテーブルは機能をカバーできる設計となります。&lt;/p&gt;

&lt;p&gt;しかしアジャイル開発ではまずはフェイズ１などここまでをリリース対象としようと全部の仕様策定などはしません。
そのため目の前のストーリーを実現するには適切なテーブル設計でも、次SPや次フェイズのストーリーでは、カバーできない場合があります。
その場合はマイグレーション処理が発生します。&lt;/p&gt;

&lt;p&gt;これはテーブル設計に関わらずクラス設計にも同様の話です。予め可変性の高い要件が見えていればその部分を柔軟性高めの設計にします。
しかしそれが見えないため、ガチガチに組んだ設計部があとで実は多様性を持たせないといけないことになり、結局大きめのリファクタリング入ることはよくあります。&lt;/p&gt;

&lt;p&gt;実際見た目はそのままの言語やインフラなどテクノロジーリプレイ案件であれば、不安定で不透明な仕様や追加仕様は存在しないためアジャイル開発でやるメリットがありません。&lt;/p&gt;

&lt;p&gt;アジャイル開発はある程度速度を犠牲にした代わりに柔軟性を手に入れているのです。&lt;/p&gt;

&lt;h3 id=&quot;立て続けに機能追加できる&quot;&gt;立て続けに機能追加できる&lt;/h3&gt;

&lt;p&gt;半分間違ってます。&lt;/p&gt;

&lt;p&gt;技術負債を解消し続けなければ、ちょっとした変更でもリグレッションバグが発生しテスト工数がかさんだり、色々な箇所を読み解く必要があったり、気づけばアジャイルのメリットをなくなってしまいます。&lt;/p&gt;

&lt;p&gt;アジャイル開発はWebサービスなどプロダクトを継続成長させる開発に向いています。
しかしそれを支えるには負債解消計画も継続的に考慮されてなければいけません。&lt;/p&gt;

&lt;h3 id=&quot;プロダクトオーナーは若手でもできる&quot;&gt;プロダクトオーナーは若手でもできる&lt;/h3&gt;
&lt;p&gt;もう愚の骨頂です。
こう思ってる人は愚かにもほどがあります。&lt;/p&gt;

&lt;p&gt;プロダクトの責任を負ってる人が若手ができるわけがありません。
プロダクトはライバルや市場、ターゲット分析に加えトレンド機能などプラットフォーム知識、そして機能毎のKPI策定やそれらの追跡、問題点の分析と改善などプロダクト成長させ収益を得ることを一手に引き受けます。
そこらの2年目3年目が一人でこなせる訳ありません。もともとPOは10年目以上のベテランが推奨です。&lt;/p&gt;

&lt;p&gt;ちょっと考えれば分かることをいいように解釈して、本来必要な作業をやらなくても良いと何故か判断する部長などリソースマネージャーがいます。
アホですね。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発は銀の弾丸ではない&quot;&gt;アジャイル開発は銀の弾丸ではない&lt;/h2&gt;

&lt;p&gt;今後も含めいかなる開発手法が登場しても、元々やらなければいけないことの本質が消えることは絶対ありません。
仕様書も説明もなく仕様は伝わらないし、仕様バグも見つからないし、完了条件も定義できません。&lt;/p&gt;

&lt;p&gt;未だにIT開発をコストと考える古臭い人は非常に多いです。特に数字をメインにしてる人は多いです。
こういった会社や上司のいる場所は、エンジニアがアジャイル開発を経て幸せになることはまずありません。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><summary type="html">Web界隈では開発手法はウォーターフォールからアジャイル開発へとシフトしていると思います。 従来のウォーターフォール方式では完成した頃には既に二番手三番手、既に古いと思われるほど求められるニーズの変化速度が速くなっているからです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-22-engineers-are-hating-they.png" /></entry><entry><title type="html">RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server" rel="alternate" type="text/html" title="RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-03-29T05:12:12+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server">&lt;p&gt;RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。
しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。
私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。&lt;/p&gt;

&lt;p&gt;今回はRubyMineを使ってUNIXドメインソケット通信で起動してるRailsアプリにブレイクポイントを仕込んだり、ブレイクポイントで止めたコンテキストからRubyを実行したり、変数をウォッチしたりするいわゆるデバッグする方法についてまとめます。&lt;/p&gt;

&lt;h2 id=&quot;環境&quot;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RubyMine&lt;/li&gt;
  &lt;li&gt;PumaにてUNIXドメインソケット通信中のRailsアプリ&lt;/li&gt;
  &lt;li&gt;Mac&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubymineから実行はunixドメインソケット通信による起動がない&quot;&gt;RubyMineから実行はUNIXドメインソケット通信による起動がない&lt;/h2&gt;

&lt;p&gt;通常ならRubyMineからRailsアプリを実行するには、メニューバーの &lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Run... &amp;gt; Development: app_name&lt;/code&gt; の順で実行できます。
もし設定を変更したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Edit Configurations...&lt;/code&gt;を選ぶことで登録された設定情報を変更できる画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼RubyMineのEdit Configurations…を開いた画面&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでIP addressとPortを指定して実行すればサーバが立ち上がります。
しかしこの方法はTCP/IPによるポートが開かれるタイプとなり、UNIXドメインソケットによる立ち上げとは異なります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;項目を見てもそれらしき項目は見当たりません。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼サーバーパラメータ一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面のServer一覧&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私が調べた限りでは直接UNIXドメインソケット通信として起動する方法はありませんでした。
これでは起動もデバッグもできずで、RubyMineが使い物にならなくなります。
しかし、実は少し手間ですがちゃんと手段はあります。&lt;/p&gt;

&lt;h2 id=&quot;unixドメインソケット通信はrubymineでrailsアプリをアタッチする&quot;&gt;UNIXドメインソケット通信はRubyMineでRailsアプリをアタッチする&lt;/h2&gt;

&lt;p&gt;それはメニューバーの&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Attach to Process...&lt;/code&gt;による&lt;strong&gt;既存プロセスにアタッチ&lt;/strong&gt;する方法です。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼メニューバーのRunにAttach to Process…はあります。&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのメニューバーのRunを開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使うことで起動中のRailsアプリに対してアタッチを試み、成功したらRubyMineが介入できる環境を構築してくれます。&lt;/p&gt;

&lt;p&gt;フローは次のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;デバッグしたいRailsアプリをシェルで起動&lt;/li&gt;
  &lt;li&gt;RubyMineからAttach to Processを実行&lt;/li&gt;
  &lt;li&gt;Attachが成功するのを待つ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;デバッグしたいrailsアプリをシェルで起動&quot;&gt;デバッグしたいRailsアプリをシェルで起動&lt;/h3&gt;
&lt;p&gt;ターミナルからRailsのServerコマンドを実行してRailsアプリを起動します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となっているのでUNIXドメインソケット通信として起動しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails s
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Booting Puma
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Rails 6.0.2.1 application starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;development
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more startup options
Puma starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;single mode...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version 4.3.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby 2.6.5-p114&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, codename: Mysterious Traveller
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Min threads: 5, max threads: 5
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Environment: development
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rubymineからattach-to-processを実行&quot;&gt;RubyMineからAttach to Process…を実行&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Attach to Process...&lt;/code&gt;を選ぶとRubyMineがRubyで起動してるプロセスを見つけて一覧として出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Rubyプロセス一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot; width=&quot;100%&quot; alt=&quot;Attach to Process...で出る一覧画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先程立ち上げたRailsアプリを見つけてくれます。賢いですね。&lt;/p&gt;

&lt;h3 id=&quot;attachが成功するのを待つ&quot;&gt;Attachが成功するのを待つ&lt;/h3&gt;

&lt;p&gt;次はこれを選ぶことでRubyMineがRailsアプリにアタッチをトライしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot; width=&quot;100%&quot; alt=&quot;接続中プログレス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RubyMineのDebug Toolbarにも次のようなログが流れます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;env RBENV_VERSION=2.6.5 /usr/local/Cellar/rbenv/1.1.2/libexec/rbenv exec ruby /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/gdb_wrapper --pid 15009 --ruby-path /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib -- --key-value --step-over-in-blocks --disable-int-handler --evaluation-timeout 20 --evaluation-control --time-limit 100 --memory-limit 0 --rubymine-protocol-extensions --port 61951 --host 0.0.0.0 --dispatcher-port 61952 --attach-mode&quot;&lt;/span&gt;
Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
executed &lt;span class=&quot;s1&quot;&gt;'lldb /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --no-lldbinit'&lt;/span&gt;
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;attach 15009&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
...
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;23&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; dlopen&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle&quot;&lt;/span&gt;, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_start_attach&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;breakpoint &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--shlib&lt;/span&gt; /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; __func_to_set_breakpoint_at&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
continuing
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_rb_eval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;require '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/../lib/ruby-debug-ide/attach/debugger_loader'; load_debugger(['/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib', '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib'], ['--key-value', '--step-over-in-blocks', '--disable-int-handler', '--evaluation-timeout', '20', '--evaluation-control', '--time-limit', '100', '--memory-limit', '0', '--rubymine-protocol-extensions', '--port', '61951', '--host', '0.0.0.0', '--dispatcher-port', '61952', '--attach-mode'])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功するとRailsアプリのログにも次のようなログが出力されます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; listens on 0.0.0.0:61951
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;失敗するときの3つの確認&quot;&gt;失敗するときの3つの確認&lt;/h3&gt;

&lt;p&gt;Attach to Processはアタッチ処理は安定とはいえないです。何回か試して成功するという状態です。
私がアタッチが失敗した場合にいつも試してることを教えます。
もし失敗する場合は次の4つを試してみてください。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;タイムアウトを伸ばす&lt;/li&gt;
  &lt;li&gt;Railsアプリを立ち上げ直す&lt;/li&gt;
  &lt;li&gt;アタッチトライ中にRailsアプリを動かしてみる&lt;/li&gt;
  &lt;li&gt;ブレイクポイントをつけてAttachを実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「タイムアウトを伸ばす」はRubyMineのPreferencesから出来ます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Debugger &amp;gt; Ruby &amp;gt; Debug connection timeout&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのSettingsからDebug connection timeを延長する&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rubymineでunixドメインソケット通信でもデバッグできるようになる&quot;&gt;RubyMineでUNIXドメインソケット通信でもデバッグできるようになる&lt;/h2&gt;
&lt;p&gt;通常ではRubyMineから起動したアプリしかデバッグができなかったり、ターミナル上でしかUNIXドメインソケット通信のRailsアプリを起動できなかったりしますが、この方法であれば既に立ち上がっているRubyプロセスでもアタッチすることでデバッグができるようになり便利ですね。&lt;/p&gt;</content><author><name></name></author><category term="mac" /><category term="rubymine" /><category term="nginx" /><category term="tools" /><category term="ruby" /><category term="rails" /><summary type="html">RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。 しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。 私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/0.png" /></entry><entry><title type="html">RubyMineで条件付きブレイクポイントを使いこなす方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint" rel="alternate" type="text/html" title="RubyMineで条件付きブレイクポイントを使いこなす方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-04-01T00:40:47+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint">&lt;p&gt;みんな大好きRubyMineはRubyのIDEです。
IDEと言えばそのソフト一つで開発環境が整っている必要があります。
なんせ&lt;strong&gt;Integrated Development Envrionment&lt;/strong&gt;ですもんね。&lt;/p&gt;

&lt;p&gt;そんなIDEの重要機能としてデバッグがあります。
これが統合されていないIDEはIDEとは絶対に言えないです。&lt;/p&gt;

&lt;p&gt;その中でもブレイクポイントはデバッグにおいて要と言える機能です。
ブレイクポイントができないデバッグは何ができるのか？と疑問なほどです。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントとは&quot;&gt;条件付きブレイクポイントとは？&lt;/h2&gt;

&lt;p&gt;そんな便利なブレイクポイントですが、IDEとして用意されているブレイクポイントは一般的に単純なブレイクポイントだけでなく、一定の条件を満たした場合のみ止まってくれる&lt;strong&gt;「条件付きブレイクポイント」&lt;/strong&gt; はIDEならではの機能です。&lt;/p&gt;

&lt;p&gt;RubyMineにもきちんと用意されてます。今回はこれの使い方を説明します。&lt;/p&gt;

&lt;p&gt;コードは何でもいいです、今回はこれを使います。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;無条件ブレイクポイントをかける&quot;&gt;無条件ブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;行の横をクリックすると赤丸がついたらその行にブレイクポイントをつけたことになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineのエディタ画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Debug実行するとこの行で止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止まった画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これでもブレイクポイントがかかっているのでその時のコンテキストでRubyコードを実行したり変数評価したりできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止めた後のConsole画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ループ内のブレイクポイントは何回も止まる&quot;&gt;ループ内のブレイクポイントは何回も止まる&lt;/h3&gt;

&lt;p&gt;ただこの方法ではループや何回も呼ばれるメソッドなどではその都度止まります。
例えば決まったコンテキストだけデバッグしたい場合では何度も再開ボタンを連打して飛ばしてしまったりします。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントをかける&quot;&gt;条件付きブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;この無条件のブレイクポイントを右クリック押すとポップアップメニューが出ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集ポップアップ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enabled: 有効状態の設定&lt;/li&gt;
  &lt;li&gt;Suspend: 一時停止の設定&lt;/li&gt;
  &lt;li&gt;Condition: 条件の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enabled-有効状態の設定&quot;&gt;Enabled: 有効状態の設定&lt;/h3&gt;
&lt;p&gt;一時的に有効／無効を設定します。ブレイクポイント自体の削除はしません。
無効にすると穴のあいた赤丸になります。&lt;/p&gt;

&lt;h3 id=&quot;suspend-一時停止の設定&quot;&gt;Suspend: 一時停止の設定&lt;/h3&gt;
&lt;p&gt;一時停止とはつまるところ停止です。この行で止まります。
デフォルトではONになっており、これをOFFにするとオレンジ色になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集でSuspendOFF&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一時停止する代わりにログ出力のオプションが増えます。&lt;/p&gt;

&lt;h4 id=&quot;breakpoint-hit-発火をログ出力で通知&quot;&gt;“Breakpoint hit”: 発火をログ出力で通知&lt;/h4&gt;
&lt;p&gt;止まる代わりにログを出力します。
例えば次のコードでブレイクポイントを貼り、
“Breakpoint hit”をONにします。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ここでブレイクポイントを貼る&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
Breakpoint reached: main.rb:4
Breakpoint reached: main.rb:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;「&lt;strong&gt;“Breakpoint reached: main.rb:4”&lt;/strong&gt;」と通過したことをログ出力されてます。&lt;/p&gt;

&lt;h4 id=&quot;stack-trace-発火時のスタックトレース表示&quot;&gt;Stack trace: 発火時のスタックトレース表示&lt;/h4&gt;
&lt;p&gt;ブレイクポイントを通過して発火するとコールスタックを出力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with exit code 0
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;どこからこのメソッドが呼ばれてるのか知りたい場合に便利ですね。&lt;/p&gt;

&lt;h4 id=&quot;evaluate-and-log-発火時に独自ログを表示&quot;&gt;Evaluate and log: 発火時に独自ログを表示&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを通過して発火すると記載しておいたRubyコードが評価され結果を出力します。
例えばブレイクポイントに次のコードを仕込んで実行すると&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;String &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ブレイクポイント発火時に次のようにRubyコードの評価結果が出力されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
String 1
String 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;remove-once-hit-一度だけ止まる&quot;&gt;Remove once hit: 一度だけ止まる&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを一度発火するとそのブレイクポイントは削除されます。
&lt;strong&gt;このブレイクポイントはSuspendがONのときしか機能しません。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;disable-until-hitting-the-following-breakpoint-他のブレークポイント検知で有効化する&quot;&gt;Disable until hitting the following breakpoint: 他のブレークポイント検知で有効化する&lt;/h4&gt;
&lt;p&gt;このブレイクポイントは他のブレークポイントが発火したらそれをトリガーにブレークポイントが有効化します。&lt;/p&gt;

&lt;p&gt;ただシングルスレッドではこの機能は正しく動作していないように思えます。
対象のブレイクポイント発火時はたしかに有効化しているようなのですが、その後有効状態を継続してもブレイクポイントはヒットしません。
ここもし詳しく分かる方いたら教えてほしいです。&lt;/p&gt;

&lt;h3 id=&quot;condition-条件の設定&quot;&gt;Condition: 条件の設定&lt;/h3&gt;

&lt;p&gt;デフォルトはOFFになっておりONにすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;内をRubyとして評価し&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;になったら止まります。
条件付きブレイクポイントの場合は赤丸の右下に？マークがつきます。
次の図では、変数&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;になったら止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineの条件付きブレイクポイント&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例では単純な等価判定ですが、戻り値として&lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;を返せばいいだけなので
そのコンテキストで得られる情報を使った評価も可能です。
例えばActiveRecordがアクセスできるコンテキストであれば条件式に入れることも可能です。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;といったことも可能です。&lt;/p&gt;

&lt;h2 id=&quot;moreでブレイクポイント管理画面を表示&quot;&gt;Moreでブレイクポイント管理画面を表示&lt;/h2&gt;

&lt;p&gt;画面左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;More&lt;/code&gt;ラベルをタップするとブレイクポイント一覧と詳細ができる管理画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineブレイクポイント管理画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面でなくても指定したブレイクポイントの編集は可能です。&lt;/p&gt;

&lt;h2 id=&quot;rubymineにも条件付きブレイクポイントはつけれる&quot;&gt;RubyMineにも条件付きブレイクポイントはつけれる&lt;/h2&gt;

&lt;p&gt;他IDEと遜色ない条件付きブレイクポイント機能ですね。
ただ条件付きブレイクポイントのデメリットとしては、処理が重くなります。
通るたびに条件を満たしているか評価を行うためその分重くなります。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="rubymine" /><category term="ruby" /><summary type="html">みんな大好きRubyMineはRubyのIDEです。 IDEと言えばそのソフト一つで開発環境が整っている必要があります。 なんせIntegrated Development Envrionmentですもんね。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/0.png" /></entry><entry><title type="html">Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認</title><link href="https://blog.mothule.com/ruby/ruby-backslash" rel="alternate" type="text/html" title="Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認" /><published>2020-02-28T00:00:00+09:00</published><updated>2020-02-28T05:08:45+09:00</updated><id>https://blog.mothule.com/ruby/ruby-backslash</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-backslash">&lt;h2 id=&quot;バックスラッシュ記法とは&quot;&gt;バックスラッシュ記法とは？&lt;/h2&gt;
&lt;p&gt;文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。&lt;/p&gt;

&lt;h2 id=&quot;バックスラッシュ記法の一覧&quot;&gt;バックスラッシュ記法の一覧&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;バックスラッシュ記法&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;タブ(0x09)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;垂直タブ(0x0b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;改行(0x0a)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;キャリッジリターン(0x0d)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;改ページ(0x0c)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;バックスペース (0x08)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\a&lt;/td&gt;
      &lt;td&gt;ベル (0x07)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\e&lt;/td&gt;
      &lt;td&gt;エスケープ (0x1b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;空白 (0x20)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\nnn&lt;/td&gt;
      &lt;td&gt;8 進数表記 (n は 0-7)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xnn&lt;/td&gt;
      &lt;td&gt;16 進数表記 (n は 0-9,a-f)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cx or \C-x&lt;/td&gt;
      &lt;td&gt;コントロール文字 (x は ASCII 文字)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-x&lt;/td&gt;
      &lt;td&gt;メタ x (c | 0x80)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-\C-x&lt;/td&gt;
      &lt;td&gt;メタ コントロール x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\x&lt;/td&gt;
      &lt;td&gt;文字 x そのもの&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\unnnn&lt;/td&gt;
      &lt;td&gt;Unicode 文字(n は 0-9,a-f,A-F、16進数4桁で指定)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\u{nnnn}&lt;/td&gt;
      &lt;td&gt;Unicode 文字列(n は 0-9,a-f,A-F)。nnnnは16進数で1桁から6桁まで指定可能。スペースかタブ区切りで複数の Unicode 文字を指定できる。例: “\u{30eb 30d3 30fc a}” # =&amp;gt; “ルビー\n”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\改行&lt;/td&gt;
      &lt;td&gt;文字列中に改行を含めずに改行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#backslash&quot;&gt;Rubyリファレンスマニュアルより抜粋引用&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;タブt&quot;&gt;タブ(\t)&lt;/h3&gt;

&lt;p&gt;分かりにくいですが、fooとbarの間にスペースではなく、タブが入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;垂直タブv&quot;&gt;垂直タブ(\v)&lt;/h3&gt;
&lt;p&gt;真下に移動します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;バックスペースb&quot;&gt;バックスペース(\b)&lt;/h3&gt;

&lt;p&gt;キーボードのバックスペース同様、手前1文字を消します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベルa&quot;&gt;ベル(\a)&lt;/h3&gt;

&lt;p&gt;実行すると音がなります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;空白s&quot;&gt;空白(\s)&lt;/h3&gt;

&lt;p&gt;スペース1文字入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8進数表記-16進数表記-コントロール文字&quot;&gt;8進数表記, 16進数表記, コントロール文字&lt;/h3&gt;

&lt;p&gt;これらは直接制御文字を指定する方法です。
制御文字のコードと命令については&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%96%87%E5%AD%97&quot;&gt;Wikipedia&lt;/a&gt;が分かりやすいです。&lt;/p&gt;

&lt;p&gt;例えば前述したタブの場合は コントロール文字であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;^I&lt;/code&gt;16進数なら&lt;code class=&quot;highlighter-rouge&quot;&gt;09&lt;/code&gt;なので、
Rubyではこう書きます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Ibar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;unicode文字-unicode文字列&quot;&gt;Unicode文字, Unicode文字列&lt;/h3&gt;

&lt;p&gt;Unicodeを直接指定します。
例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0041&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041 0x0042 0x0043&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{0041 0042 0043}&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ABC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文字列中に改行を含めずに改行改行&quot;&gt;文字列中に改行を含めずに改行(\改行)&lt;/h3&gt;

&lt;p&gt;文字列を作成中に改行しても文字列作成中を継続する場合に使います。
これ意味わかりにくいですが、コード見ると何のことかすぐ分かります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo\
bar\
baz&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# foobarbaz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rubyのバックスラッシュ記法一覧確認したけど&quot;&gt;Rubyのバックスラッシュ記法一覧確認したけど&lt;/h2&gt;
&lt;p&gt;用途や効果の分からない記法もありました。長年実務でも見かけたことのないものなので特別なシステム開発でしか使われないかと思います。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">バックスラッシュ記法とは？ 文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-28-ruby-backslash.png" /></entry></feed>