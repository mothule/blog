<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-02-02T00:14:09+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">Rails以外でBundlerを使う方法</title><link href="https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails" rel="alternate" type="text/html" title="Rails以外でBundlerを使う方法" /><published>2020-02-01T00:00:00+09:00</published><updated>2020-02-01T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails</id><content type="html" xml:base="https://blog.mothule.com/ruby/bundler/ruby-use-bundler-outside-of-rails">&lt;p&gt;仕事柄バックエンドはRailsでフロントエンドのエコシステムではRubyベースのツールもあり、
なるべく自前スクリプトでもRubyで書くようにしてます。&lt;/p&gt;

&lt;p&gt;だけど毎度Railsを使わずBundlerを使う場合に一部躓くのでメモとしてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;段取り&quot;&gt;段取り&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;スクリプトで使うバージョン指定&lt;/li&gt;
  &lt;li&gt;(Option)bundlerインストール&lt;/li&gt;
  &lt;li&gt;Gemfile用意&lt;/li&gt;
  &lt;li&gt;bundle install&lt;/li&gt;
  &lt;li&gt;スクリプトでbundle内gemをrequire&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rails外で使う上で特別必要な処理って最後の項目だけなので、
そこだけ知りたい人はざざっと一番下へどうぞ。&lt;/p&gt;

&lt;h2 id=&quot;スクリプトで使うバージョン指定&quot;&gt;スクリプトで使うバージョン指定&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby version]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optionbundlerインストール&quot;&gt;(Option)bundlerインストール&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;バージョン指定する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;-v &quot;[bundler version]&quot;&lt;/code&gt;を入れます。&lt;br /&gt;
最新でいいなら指定不要です。&lt;/p&gt;

&lt;h2 id=&quot;gemfile用意&quot;&gt;Gemfile用意&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gemfileが作成されるので、中に必要なgemを追加します。&lt;/p&gt;

&lt;h2 id=&quot;bundle-install&quot;&gt;bundle install&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gemfileで指定されたgemsをインストールします。&lt;/p&gt;

&lt;h2 id=&quot;スクリプト内でbundle内gemをrequire&quot;&gt;スクリプト内でbundle内gemをrequire&lt;/h2&gt;

&lt;p&gt;エントリーファイルが &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rb&lt;/code&gt; であれば, &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rb&lt;/code&gt; の頭に&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubygems'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と書きます。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="bundler" /><summary type="html">仕事柄バックエンドはRailsでフロントエンドのエコシステムではRubyベースのツールもあり、 なるべく自前スクリプトでもRubyで書くようにしてます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-01-ruby-use-bundler-outside-of-rails.png" /></entry><entry><title type="html">Google Analyticsで自分のサイトを分析して分かったこと</title><link href="https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site" rel="alternate" type="text/html" title="Google Analyticsで自分のサイトを分析して分かったこと" /><published>2020-02-01T00:00:00+09:00</published><updated>2020-02-01T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site</id><content type="html" xml:base="https://blog.mothule.com/tools/google-analytics/tools-google-analytics-my-site">&lt;p&gt;Google Analytics(以下GA)を使ってサイト分析は一般的なサイト運営です。&lt;/p&gt;

&lt;p&gt;普段アクセス数やアクセス数の多いページ一覧しか見てなかったのですが、&lt;br /&gt;
今回ちょっと分析結果から仮説を立てるまでをまとめてみました。&lt;/p&gt;

&lt;p&gt;GAを使った分析がいまいち分からない人向け。&lt;/p&gt;

&lt;h2 id=&quot;まずはグラフを見る&quot;&gt;まずはグラフを見る&lt;/h2&gt;

&lt;h3 id=&quot;dauのチャート&quot;&gt;DAUのチャート&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/dau.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/dau.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;変化を見る&quot;&gt;変化を見る&lt;/h4&gt;
&lt;p&gt;チャートでは変化を見ましょう。
大きく変化してる部分や、全体としてのなだらかの変化率を見るの2つの観点で見てみましょう。&lt;/p&gt;

&lt;p&gt;ちなみにこの図だと、
ガクンと落ちてる部分は全て &lt;strong&gt;「土日」&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;技術ブログなので、土日はみんな技術系の調べ物はせず、リフレッシュしてるのでしょうか。&lt;/p&gt;

&lt;h3 id=&quot;トラフィック&quot;&gt;トラフィック&lt;/h3&gt;

&lt;p&gt;どうやってこのサイトに到達したのかが分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/trafic.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/trafic.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;流入元を調べる&quot;&gt;流入元を調べる&lt;/h4&gt;
&lt;p&gt;どこからやってきたのかここで調べましょう。
SNSであればTwitterやFacebook、他サイトとしてQiitaなどの流入もあります。&lt;/p&gt;

&lt;p&gt;このサイトは、ほぼ全部オーガニックつまりGoogle検索で辿り着いてます。&lt;/p&gt;

&lt;h3 id=&quot;時間帯別ユーザーアクセス&quot;&gt;時間帯別ユーザーアクセス&lt;/h3&gt;

&lt;p&gt;ユーザーがこのサイトにアクセスしてくる時間帯が分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/users-each-times.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/users-each-times.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;変化を見る-1&quot;&gt;変化を見る&lt;/h4&gt;
&lt;p&gt;集合といった塊や変化してる部分を見ましょう。&lt;/p&gt;

&lt;p&gt;ちなみにこの図だと、
平日9時から20時に主なアクセス時間帯のようです。&lt;/p&gt;

&lt;p&gt;つまり社会人であれば業務中ですね。&lt;br /&gt;
前述したDAUも考慮すると &lt;strong&gt;業務中でしか使われていないサイト&lt;/strong&gt; のようです。&lt;/p&gt;

&lt;h3 id=&quot;アクセスランキングと直帰率と離脱率&quot;&gt;アクセスランキングと直帰率と離脱率&lt;/h3&gt;

&lt;p&gt;2ヶ月間のアクセスランキングとそれらの直帰率と離脱率です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/access-page-rank-bounce-rate.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/access-page-rank-bounce-rate.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;記事の属性や数字を見る&quot;&gt;記事の属性や数字を見る&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;初心者向け記事が目立ちます。&lt;/li&gt;
  &lt;li&gt;直帰率が非常に高いです。&lt;/li&gt;
  &lt;li&gt;離脱率も一部非常に高いです。&lt;/li&gt;
  &lt;li&gt;ページ滞在時間が長いので欲しい情報に到達してると思って良さそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ここにはない情報がある&quot;&gt;ここにはない情報がある&lt;/h4&gt;

&lt;p&gt;それは記事の構成と記事比率です。
「初心者向け」と「iOS」の記事が多く、それら記事内で構造化されていれば、SEO評価が上がります。&lt;/p&gt;

&lt;p&gt;例えばCarthageに関する記事は1つしかないので、直帰率や離脱率が高いのでしょう。&lt;br /&gt;
違う目線で見れば、これ1つでユーザーにとって有能な記事とも見れます。&lt;/p&gt;

&lt;h4 id=&quot;用語の意味&quot;&gt;用語の意味&lt;/h4&gt;

&lt;p&gt;直帰率とは1セッションにおいてそのページ以外にアクセスせず離脱すること。&lt;br /&gt;
離脱率とはそのページを最後にセッションを終了すること。&lt;br /&gt;
セッション終了とは簡単な話ブラウザを閉じること。&lt;/p&gt;

&lt;p&gt;厳密には最後のアクセスから30分以上経過などあります。これはGAの定義の話なので他分析ツールでは異なってきます。&lt;br /&gt;
GAについては&lt;a href=&quot;https://support.google.com/analytics/answer/2731565?hl=ja&quot;&gt;アナリティクスでのウェブ セッションの算出方法&lt;/a&gt;をどうぞ。&lt;/p&gt;

&lt;h2 id=&quot;仮説を立てる&quot;&gt;仮説を立てる&lt;/h2&gt;

&lt;p&gt;掲載したチャートや表、感想から考えて、
「ユーザーは業務中の初学者か？」と仮説が立ちます。&lt;br /&gt;
おおむね「業務中で分からないことをググって解決して、分かったら閉じる。」がユーザーシナリオが想像できます。&lt;br /&gt;
直帰率が高いのがそれを後押ししてます。
また次のリテンションも後押ししてます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/retension.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-01-tools-google-analytics-my-site/retension.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;仮説から課題を立てる&quot;&gt;仮説から課題を立てる&lt;/h2&gt;

&lt;p&gt;仮説が立ったら今度は課題です。仮説を事実だと捉えて考えてみます.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;このサイトは回遊率が低いです。 もっといろんな記事を見て直帰率とセッション時間をあげたいですね。&lt;/li&gt;
  &lt;li&gt;意図通りか別として、ユーザーの技術力が低いです。初学者以外にもアクセスされて欲しいですね。&lt;/li&gt;
  &lt;li&gt;業務中でしか使われていません。もっとプライベートな時間帯にもアクセスが欲しいですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;課題に対する分析や対策を考える&quot;&gt;課題に対する分析や対策を考える&lt;/h2&gt;

&lt;p&gt;課題が見えたら今度はそれらのいろんな角度から見たり、見えてきた原因の解決策を考えてみます。&lt;/p&gt;

&lt;h3 id=&quot;直帰率が高いのはそれ以外に欲しい情報がない&quot;&gt;直帰率が高いのはそれ以外に欲しい情報がない&lt;/h3&gt;
&lt;p&gt;ユーザーシナリオから鑑みて、直帰率が高すぎるのは、欲しい情報が手に入ったことで、ユーザーニーズが終了してるのも事実です。&lt;br /&gt;
しかしユーザーは無意識でも「刺さる情報を提供できていない」とも言えます。&lt;/p&gt;

&lt;h3 id=&quot;刺さる情報とはユーザー属性から出す&quot;&gt;刺さる情報とはユーザー属性から出す&lt;/h3&gt;
&lt;p&gt;ユーザーが初学者であれば、初学者に刺さるような情報があればいいわけです。&lt;br /&gt;
またiOS記事であれば、他の刺さるようなiOS記事があるといいかもしれません。
プライベートな時間帯を狙うなら、技術NEWS系の記事もあるとアンテナはってる人たちに見てもらえる可能性があります。&lt;/p&gt;

&lt;h3 id=&quot;初学者以外のユーザー属性に刺さる記事がない&quot;&gt;初学者以外のユーザー属性に刺さる記事がない&lt;/h3&gt;
&lt;p&gt;事実として初学者以外に向けた記事数は少ないですし、それらを構造化もあまり出来ていません。&lt;br /&gt;
初学者以外を狙うとなると、大掛かりな行動となりそうです。&lt;/p&gt;

&lt;h2 id=&quot;アクションを立てる&quot;&gt;アクションを立てる&lt;/h2&gt;

&lt;p&gt;対策から具体的な行動に移せる粒度に落とし込みます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ページ内の関連記事の精度を上げる&lt;/li&gt;
  &lt;li&gt;技術NEWSの考察した記事を蓄積する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;アクションを判断する&quot;&gt;アクションを判断する&lt;/h2&gt;

&lt;p&gt;関連記事の精度を上げることで、閲覧中記事と同じ属性を持つ記事をユーザーに提供すれば、&lt;br /&gt;
ユーザーは同様に興味を持つかも知れないですね。&lt;/p&gt;

&lt;p&gt;技術NEWSの考察は、サイト方針とは異なる情報となるため、今回は却下となります。&lt;/p&gt;

&lt;h2 id=&quot;分析してみて&quot;&gt;分析してみて&lt;/h2&gt;
&lt;p&gt;優先順位の判断材料となります。&lt;/p&gt;

&lt;p&gt;やることはたくさんある中で少ない時間の中で、何を選択し集中することでコスパよく効果を出さないといけません。
そんな状況下では、優先順位付けに悩みます。&lt;/p&gt;

&lt;p&gt;これを繰り返すことでOODAをループさせます。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="google-analytics" /><summary type="html">Google Analytics(以下GA)を使ってサイト分析は一般的なサイト運営です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-01-tools-google-analytics-my-site/0.png" /></entry><entry><title type="html">Gemで指定バージョンをインストール</title><link href="https://blog.mothule.com/ruby/gem/ruby-gem-specify-version" rel="alternate" type="text/html" title="Gemで指定バージョンをインストール" /><published>2020-01-29T00:00:00+09:00</published><updated>2020-01-29T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/gem/ruby-gem-specify-version</id><content type="html" xml:base="https://blog.mothule.com/ruby/gem/ruby-gem-specify-version">&lt;p&gt;Rubyのバージョンが上がるたび、そのバージョンのgemsをインストールします。
BundlerだとGemfile.lockの指定されたバージョンでインストールします。&lt;/p&gt;

&lt;p&gt;たまにしか使わない、でも絶対知っていないといけないGemで指定バージョンをインストールについてメモしておきます。&lt;/p&gt;

&lt;h2 id=&quot;構文&quot;&gt;構文&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;gem name] &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bundlerの場合&quot;&gt;Bundlerの場合&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.2&lt;/code&gt;をインストールする場合&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="gem" /><summary type="html">Rubyのバージョンが上がるたび、そのバージョンのgemsをインストールします。 BundlerだとGemfile.lockの指定されたバージョンでインストールします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-29-ruby-gem-specify-version.png" /></entry><entry><title type="html">リモートワーク4年目間近で落ちた穴</title><link href="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work" rel="alternate" type="text/html" title="リモートワーク4年目間近で落ちた穴" /><published>2020-01-11T00:00:00+09:00</published><updated>2020-01-11T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/pitfall-of-remote-work">&lt;p&gt;フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。&lt;/p&gt;

&lt;p&gt;しかし今回自分が遭遇した問題は、今後のリモートワークにおいてどの会社でも共通して発生する問題だなと思いました。
この問題の原因や何故起きてしまったのか？どうやったら回避や解決ができるのか？についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;テキストコミュニケーションは信頼関係でカバーしてる&quot;&gt;テキストコミュニケーションは信頼関係でカバーしてる&lt;/h2&gt;
&lt;p&gt;フルリモートワークでは、互いの顔は見えずメインコミュニケーション手段としてslackなどのテキスト会話が主な手段です。
zoomやslack callなどビデオチャットも使いますが、常に繋がっているという環境ではありません。
主に会議体ではビデオチャット、それ以外ではテキストチャットに二分します。&lt;/p&gt;

&lt;p&gt;そうなると、非言語コミュニケーションもできない、インタラクティブ性の低いテキストコミュニケーションでは、
入力/出力は全て文字の一択となり、次のような問題が起きます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前提知識の違いからくる齟齬&lt;/li&gt;
  &lt;li&gt;文字の読み間違えからくる齟齬&lt;/li&gt;
  &lt;li&gt;知識差からくる長文または短文&lt;/li&gt;
  &lt;li&gt;全員知識ないことで起きる混乱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは全て議論への根気負けが原因です。途中で理解する姿勢がなくなったらその時点で議論は成り立ちません。
話す側は相手の気持ちや知識差を意識して、
聞く側は相手が何を言おうとしてるのか意識して
両者が相手を尊重、理解する姿勢が整うことは必須条件です。&lt;/p&gt;

&lt;p&gt;しかし今回起きた問題は、これらが限界を超えた結果、その際にどうすることもできないことに気づきました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きたのか&quot;&gt;何が起きたのか？&lt;/h2&gt;

&lt;p&gt;会社要因でメンタルがきついときに解決する術がないと、どうすることもできず詰んでしまいます。
プライベートに重きを置く人で仕事に深入りしないタイプであれば、あまり問題視することではありません。
しかし、会社やサービスを良くしようと頑張るタイプであれば、避けることできない葛藤を解決することになります。
サービスを良くしようという意思が強ければ強いほど、逃げたくても逃げようがありません。&lt;/p&gt;

&lt;h2 id=&quot;何が原因か&quot;&gt;何が原因か？&lt;/h2&gt;

&lt;p&gt;これはメンタルがきつくなったこと自体の原因ではなく、なぜそれが落とし穴だと思ったかなについて書いてます。&lt;/p&gt;

&lt;p&gt;リモーワークではちょっとした雑談も全部誰もが見れる状況となります、そのため大振りふった雑談やちょっとした愚痴などは書くことで、それを良しとしない人が見るとそれは会社にとって迷惑行為となりかねません。&lt;/p&gt;

&lt;p&gt;しかし人は仕事会話だけで連携が成り立つほど単純ではありません。
ちょっとした人間性や趣味や価値観といった背景を知ることでその人に話しかけやすくなったり、無理なお願いをしやすくなったり、反対に無理なお願いをしないように気をつけたりして、お互いに支え合った行動ができるようになります。&lt;/p&gt;

&lt;p&gt;雑談はやりすぎは害ですが、ほどよく使うことでストレス発散や互いの信頼関係に強い効果を発揮します。
人によっては本当に仕事会話だけで成り立つ人もいますが、全員が全員そうでもありません。&lt;/p&gt;

&lt;p&gt;人それぞれ適切な雑談量は存在します。&lt;/p&gt;

&lt;p&gt;その雑談をする、相談する、愚痴相手になってもらうといった寄り添う行為がリモートワークでは存在しにくいです。
なぜならまずメンタルが落ちてるのに気づかないからです。
オフィスでは反応が変だったり、頭抱えてる状態が続いてたりと、非言語のアウトプットが無自覚ににじみ出てることで、他の人が気づいて同僚が気を使って話しかけたり、上司が相談に乗ることもあると思います。&lt;/p&gt;

&lt;p&gt;しかしテキストコミュニケーションでは、前述したように手段はテキストだけのため、自分でそれを出す必要があります。
また加えて上司が見える場所でそれをする、もしくは上司に直接相談するなど、明確な行動として動き出す必要があります。
LINEの既読のように上司が見たと分かるのであればまだ分かりやすいですが、slackではその様な機能はありません。&lt;/p&gt;

&lt;p&gt;つまり、通常時は問題ないが、不安定時に支え合う仕組みやきっかけが存在しません。
今回私は、その穴にハマってしまい苦労しました。&lt;/p&gt;

&lt;h2 id=&quot;どうやれば解決できるか&quot;&gt;どうやれば解決できるか？&lt;/h2&gt;

&lt;p&gt;部下の働ける環境や生産性を維持、向上するのは上司の役目の一つです。
上司からのレポートライン同様、上司への報告など上司が気づく仕組みづくりが必要です。&lt;/p&gt;

&lt;p&gt;また本当の雑談の場というのは必要です。それが定例となると無駄な会議体となりなくなることは明白です。
なので通常のslack上で互いに話しやすい支えやすい信頼関係は複数人必要です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">フルリモートワークの会社で働いて4年目間近、テキストコミュニケーションの難しさや情報の集約性といった課題はありつつも、メリットを見れば魅力的な働き方です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-11-pitfall-of-remote-work.jpg" /></entry><entry><title type="html">GitHubのConfirm your account recovery settingsについて</title><link href="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings" rel="alternate" type="text/html" title="GitHubのConfirm your account recovery settingsについて" /><published>2020-01-05T00:00:00+09:00</published><updated>2020-01-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings</id><content type="html" xml:base="https://blog.mothule.com/tools/github/tools-github-confirm-your-account-recovery-settings">&lt;p&gt;近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。&lt;br /&gt;
特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。&lt;br /&gt;
実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。&lt;/p&gt;

&lt;p&gt;加えて近年のサービスではアクセストークンを第三者へ渡すことで外部からサービスアクセスができる連携機能も重要なエコシステムとなっています。&lt;br /&gt;
しかしリスクとしては個人とサービスだけでなくその第三者がセキュリティ意識が低いことで漏洩リスクが高まります。&lt;/p&gt;

&lt;p&gt;今回はGitHubでよく出てくる「Confirm your account recovery settings」画面について1つずつ確認したのでそれを説明します。&lt;/p&gt;

&lt;h2 id=&quot;confirm-your-account-recovery-settings-画面とは&quot;&gt;Confirm your account recovery settings 画面とは？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面のことです。GitHubにアクセスしたとき一定の期間毎に表示されるようで、&lt;br /&gt;
見かける方はセキュリティ対策が不十分である可能性があります。&lt;/p&gt;

&lt;h2 id=&quot;two-factor-methods-とは&quot;&gt;Two-factor methods とは？&lt;/h2&gt;

&lt;p&gt;Two-factorとは2要素認証のことで通称2FA(Two-factor Authentication)と呼ばれています。&lt;br /&gt;
自身の知っている知識情報だけでなく、自身の所有物を使ったり、自分自身の身体的特徴などを2つの認証要素で認証することを言います。&lt;/p&gt;

&lt;p&gt;GitHubではAuthenticator app(認証アプリ)、Security keys(物理キー)、SMS number(スマホのSMSメール)の3種類の手段が用意されています。
注意点としては2FA後にブラウザを許可し2FAをスキップする設定もありますので、許可すると所有認証となる物だけでなくでなくPCをロストするとリスクが拡大します。&lt;/p&gt;

&lt;h3 id=&quot;authenticator-app&quot;&gt;Authenticator app&lt;/h3&gt;

&lt;p&gt;スマホやPCアプリによる認証コードを出してくれるアプリです。&lt;br /&gt;
メール認証後にこのアプリを使って表示されている認証コードを使って認証します。
認証コードは一定時間毎に入れ替わります。&lt;/p&gt;

&lt;p&gt;これにより悪意ある第三者が自分のメール認証のメアドとパスワードを入手しても、私が所有しているスマホを入手しない限りログインできません。&lt;/p&gt;

&lt;h4 id=&quot;対応アプリは色々ある&quot;&gt;対応アプリは色々ある&lt;/h4&gt;

&lt;p&gt;私はAuthyというアプリを使ってます。
MacではAuthy DesktopというPCアプリもあり数年使っていますが今の所そこまで不便に感じずに使ってます。&lt;/p&gt;

&lt;p&gt;たまにアプリを立ち上げるとAuthy自体に設定したパスワードを求められるので、少しだけ2段階認証となっております。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/jp/app/authy/id494168017&quot;&gt;Authy - App Store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.authy.authy&amp;amp;hl=ja&quot;&gt;Authy - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-keys&quot;&gt;Security keys&lt;/h3&gt;

&lt;p&gt;ハードウェアのセキュリティキーのことで、実在する物理のキーになります。
有名な物だとYubiKeyなどでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=mothule05-22&amp;amp;linkId=21079b265ff170d8eb1d0caabfcdd878&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00LX8KZZ8&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mothule05-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=mothule05-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=B00LX8KZZ8&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;YubiKey&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Yubico-Y-072-YubiKey-NEO/dp/B00LX8KZZ8/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=mothule05-22&amp;amp;linkId=b95d217be6ebdea044d92e29a3d8d2ba&amp;amp;language=ja_JP&quot;&gt;Amazonで開く&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これも前述したAuthenticator app同様に所有認証となり、悪意ある第三者がメール認証のメアドとパスワードを得ても、このセキュリティキーで認証しなければログインできません。&lt;/p&gt;

&lt;h3 id=&quot;sms-number&quot;&gt;SMS number&lt;/h3&gt;

&lt;p&gt;SMS番号とは電話番号へのSMSメッセージを使って認証コードを送ってくれる方法で、得た認証コードを入力することで認証します。&lt;br /&gt;
これも他同様に電話番号が紐付いた端末を保持しているということで所有認証の部類に入ります。&lt;/p&gt;

&lt;h2 id=&quot;recovery-options-とは&quot;&gt;Recovery options とは？&lt;/h2&gt;

&lt;p&gt;Recovery options とは万が一上記の認証手段を失ってしまった場合に、回復する手段のことをいいます。&lt;/p&gt;

&lt;p&gt;GitHubではRecovery codes(乱数群)、Fallback SMS number(別スマホのSMSメール)、Recovery tokens（回復用乱数羅列）の3種類が用意されています。&lt;/p&gt;

&lt;p&gt;セキュリティと直結はしにくいですが、2FAでセキュリティを上げることで認証手段が複数個になるわけですから、同様にその認証手段をロストするリスクも向上します。&lt;/p&gt;

&lt;p&gt;セキュリティを堅牢にしても自分がアクセスできなくなっては意味がありません。&lt;/p&gt;

&lt;h3 id=&quot;recovery-codes&quot;&gt;Recovery codes&lt;/h3&gt;

&lt;p&gt;Recovery codes とは回復用に予め受け取っておいたコード一覧のことです。&lt;br /&gt;
ログイン済みでRecovery codesを取得し、保存しておくことで、何らかの理由でGitHubにアクセスできなくなったときにこのコードのいずれか１つを使ってアクセスします。&lt;br /&gt;
このコードを紙に印刷して完全にデジタルから隔離しておいたり、スマホなど別端末で管理になると思います。&lt;br /&gt;
それぞれ一長一短ありますので、自分で万が一に備えておきましょう。&lt;/p&gt;

&lt;h3 id=&quot;fallback-sms-number&quot;&gt;Fallback SMS number&lt;/h3&gt;

&lt;p&gt;2FAで設定したSMS番号とは別のSMS番号に認証コードを送信できるようになります。&lt;br /&gt;
スマホのロストはもっとも確率が高いので、2FAでAuthenticator appsやSMS numberを使っていて、Recovery codesをスマホに保存している場合は、ここを設定しておいたほうが安心です。&lt;/p&gt;

&lt;h3 id=&quot;recovery-tokens&quot;&gt;Recovery tokens&lt;/h3&gt;

&lt;p&gt;Facebookアカウントを使用した回復手段です。&lt;br /&gt;
Facebookアカウントと連携しておくことで万が一アクセス手段をロストしてもFacebookアカウントにログインできれば回復できます。&lt;/p&gt;

&lt;h2 id=&quot;2faは絶対やろう&quot;&gt;2FAは絶対やろう&lt;/h2&gt;

&lt;p&gt;2FAは絶対にやりましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;様々なサービスを使っている&lt;/li&gt;
  &lt;li&gt;他サービスと同じパスワードを使いまわしている&lt;/li&gt;
  &lt;li&gt;フリーWiFiや自分の所有物でない端末でログインする機会がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いずれ1つでも当てはまる人は、既に射程距離に入っています。&lt;/p&gt;

&lt;h3 id=&quot;大手サービスだから大丈夫&quot;&gt;「大手サービスだから大丈夫」&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;所属経験上、大手だからといって安心ではない&lt;/li&gt;
  &lt;li&gt;セキュリティ考慮が予算から外れやすい現実&lt;/li&gt;
  &lt;li&gt;大手ほどエンジニアは外注でセキュリティなど完全に予算外&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;漏洩のニュースが流れていなくても情報は外部に漏れている&quot;&gt;漏洩のニュースが流れていなくても情報は外部に漏れている&lt;/h3&gt;

&lt;p&gt;私自身の経験ですが、過去に使っていたパスワードで、そのパスワードを使ってた対象サービスの漏洩ニュースがなかったにも関わらず、&lt;br /&gt;
メール認証で使ってたメールアドレスに対して、「お前のパスワードこれだろ？悪用されたくなかったらビットコインで金よこせ」といわゆる人質メールが来ました。&lt;br /&gt;
しかも提示されていたパスワードは実際に昔使ってたものでした。&lt;/p&gt;

&lt;p&gt;偶然にも私はパスワードは違う形に変えていたことで、有名どころのサービスやクレカを登録してるサービスは異なるパスワードでしたが、もしこれが同じパスワードでしたら&lt;br /&gt;
完全個人情報やクレジットカード情報など、生活におけるほぼ全部の情報が漏洩しているところでした。&lt;/p&gt;

&lt;p&gt;つまり GitHubがどんなに堅牢でも、パスワードが同じだと、他サービスがやられたら堂々と不正ログインされます。&lt;/p&gt;

&lt;p&gt;自分の人生を他人に信託できるのならどうぞご勝手に。&lt;br /&gt;
私はこれ以降全ての登録サービスを一元管理し、パスワードは長文乱数化、2FAあるなら対応し、不要なサービスはパスワードは複雑化し退会しています。&lt;/p&gt;

&lt;h2 id=&quot;人はミスをする生き物&quot;&gt;人はミスをする生き物&lt;/h2&gt;

&lt;p&gt;2FAをしているから万全というわけではありません。会社に迷惑はかからないのでその点は安心なのですが、&lt;br /&gt;
自分の過去の資産にアクセスできないのはそれはそれで手痛いです。&lt;br /&gt;
2FAに必要な認証要素を失ったら自分すらもアクセスできなくなります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authenticator app&lt;/li&gt;
  &lt;li&gt;Security keys&lt;/li&gt;
  &lt;li&gt;SMS number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これら3つ対応していても、PC担いで通勤中に交通事故に遭ってPCもスマホも物理キーも壊れたら終わりです。&lt;br /&gt;
命助かっても助かった気がしません。&lt;/p&gt;

&lt;p&gt;自宅が火事になればもろとも吹き飛びます。&lt;/p&gt;

&lt;p&gt;泥棒に盗まれても同じです。&lt;/p&gt;

&lt;p&gt;日常に潜む確率の低いリスクにわざわざ巻き込まれやすくする理由はないので、Recovery optionsは確実に残しておきましょう。&lt;/p&gt;

&lt;p&gt;これは普段の利便性が下がるものでもなく緊急時に使うものなので、やっておいて何一つ損はないです。&lt;/p&gt;

&lt;h2 id=&quot;本業に集中するための保険だと思うこと&quot;&gt;本業に集中するための保険だと思うこと&lt;/h2&gt;
&lt;p&gt;セキュリティは利便性の反比例になるため、堅牢にするほどGitHubの利便性は下がるのは避けられません。&lt;/p&gt;

&lt;p&gt;しかし、その利便性を重視しすぎることによって、漏洩やアカウント乗っ取りリスクは影を潜めていても確実にそこにいます。&lt;/p&gt;

&lt;p&gt;そのリスクを自分のミスで受けると個人であれば不正利用による信用失墜や巨額の請求が来たり、会社であれば所属会社からの雇用契約書の契約違反による甲側の一方的な解雇と場合によっては損害賠償請求がありえます。&lt;/p&gt;

&lt;p&gt;フリーランスや副業の方による業務委託契約であれば、契約書の契約違反となり損害賠償の話になります。&lt;/p&gt;

&lt;p&gt;自分が守るべき責務を守らないことで得られるものに対して、確率的に低くとも受けるリスクと比べると&lt;strong&gt;「そこまでして欲しい利便性か？」&lt;/strong&gt; と一度己に説いてみるのも重要です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="github" /><summary type="html">近年セキュリティを個々が意識し堅牢にすることの重要性が以前より遥かに増しています。 特にリモートワークなどでは会社情報を含むPCやスマホを使うことが多いので、個人に求められるセキュリティリテラシーはとても高いものとなっています。 実際に被害に合う確率が天文学な数字であっても、場所と状態さえ満たしてしまえばその確率は宝くじで1等2等に当選することよりも高くなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-01-05-tools-github-confirm-your-account-recovery-settings/0.png" /></entry><entry><title type="html">secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する</title><link href="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard" rel="alternate" type="text/html" title="secureTextFieldsのNeither element nor any descendant has keyboard focusを対処する" /><published>2019-12-16T00:00:00+09:00</published><updated>2019-12-16T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard</id><content type="html" xml:base="https://blog.mothule.com/ios/test/ios-xctest-failed-for-hard-keyboard">&lt;p&gt;1つのPCで複数のプロジェクトをいじることはよくあるありますよね。&lt;br /&gt;
業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。&lt;/p&gt;

&lt;p&gt;今回はXcodeのSimulatorがそれで、その影響で「何もコード弄ってないのに失敗する」って現象が起きたのでそれの対処方について簡単にまとめました。&lt;/p&gt;

&lt;h2 id=&quot;何が起きているのか&quot;&gt;何が起きているのか？&lt;/h2&gt;

&lt;p&gt;ローカル上にてXcodeのSimulator上でXCUITestを実行したところ、パスワード入力(secureTextFields)のタイピング(typeText)が反応せず失敗する。&lt;/p&gt;

&lt;h2 id=&quot;エラーメッセージ&quot;&gt;エラーメッセージ&lt;/h2&gt;

&lt;p&gt;抜粋ですが、残り部分はプロジェクト固有情報でノイズとなるため除去して最小限にしてあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to synthesize event: Neither element nor any descendant has keyboard focus. Event dispatch snapshot: SecureTextField, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内', value: 半角英数8文字以上20文字以内
Element debug description:
Attributes: SecureTextField, { {151.0, 284.0}, {254.0, 40.0} }, identifier: 'password_textfield', placeholderValue: '半角英数8文字以上20文字以内'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;メッセージを読み解く&quot;&gt;メッセージを読み解く&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Neither element nor any descendant has keyboard focus.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Google翻訳にて「&lt;code class=&quot;highlighter-rouge&quot;&gt;要素も子孫もキーボードフォーカスを持ちません。&lt;/code&gt;」と言われてるこれがエラーメッセージです。&lt;/p&gt;

&lt;p&gt;コードでは下記のように一度タップしてフォーカスしたのち、キータイプを行っていますがあることが原因でフォーカスされていないようです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secureTextFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_textfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;フォーカスされていないとは、つまりキーボードが出ていないことを意味します。&lt;br /&gt;
本来ならフォーカスされればそれに対する入力としてキーボードが出現します。&lt;/p&gt;

&lt;p&gt;何らかの原因でキーボードがでなくなっているようです。&lt;/p&gt;

&lt;p&gt;また普段は成功しているし、CIでも問題なく動いています。しかしローカルでは失敗してしまいます。&lt;br /&gt;
つまり自分のPCに原因があることが推測できます。&lt;/p&gt;

&lt;h2 id=&quot;原因はconnect-hardware-keyboard&quot;&gt;原因はConnect Hardware Keyboard&lt;/h2&gt;

&lt;p&gt;シミュレーターではある設定が有効だと、secureTextFields.typeTextが失敗する不具合があります。&lt;br /&gt;
ここで不具合と言い切っているのは、通常のtextField.typeTextでは失敗しないためです。&lt;/p&gt;

&lt;p&gt;キーボードが出てこなくなる設定、それは &lt;strong&gt;Connect Hardware Keyboard&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これが有効だとキーボードウィンドウが表示されず、ハードキーボード（つまりmacなどのキー)を押すとシミュレーターのフォーカス中のテキストフィールドに入力されます。&lt;/p&gt;

&lt;p&gt;どうやらこれがsecureTextFieldsだとフォーカスしていないと判断され失敗していたようでした。&lt;/p&gt;

&lt;h2 id=&quot;connect-hardware-keyboardがoffでも失敗する場合&quot;&gt;Connect Hardware KeyboardがOFFでも失敗する場合&lt;/h2&gt;

&lt;p&gt;シミュレーターのConnect Hardware KeyboardはOFFになっているが失敗するケースがあります。&lt;br /&gt;
その場合は一度Connect Hardware KeyboardをONにしてからすぐにOFFにしてもう一度テストを試してみてください。&lt;/p&gt;

&lt;p&gt;ショートカットは shift+cmd+k なので２回押せばOFF→ON→OFFとすぐできます。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="test" /><category term="xcuitest" /><summary type="html">1つのPCで複数のプロジェクトをいじることはよくあるありますよね。 業務で複数プロジェクトだったり、ちょっとした調査プロジェクトだったり、プロジェクト自体は独立して他プロジェクトと疎結合であっても、開発環境はそうでない場合があります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-12-16-ios-xctest-failed-for-hard-keyboard/0.png" /></entry><entry><title type="html">フルリモートワーカーが外出せずに紙の郵送できないかWebレターをやってみた</title><link href="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter" rel="alternate" type="text/html" title="フルリモートワーカーが外出せずに紙の郵送できないかWebレターをやってみた" /><published>2019-12-03T00:00:00+09:00</published><updated>2019-12-03T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-web-letter">&lt;p&gt;フルリモートワークで仕事をしていると、オフィスに足を運ぶことがほとんどなく、理由がない限り行く時間やメリットもありません。&lt;/p&gt;

&lt;p&gt;ただ今回、仕事でpdf書類を印刷してバックオフィスに提出する必要があったため、以前ネットで見かけたWebレターをやってみました。&lt;/p&gt;

&lt;p&gt;Webレターの基本的な情報ややり方、1つだけ大きな落とし穴があったので、それの回避方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;webレターとは&quot;&gt;Webレターとは&lt;/h2&gt;
&lt;p&gt;Webゆうびんが提供してる配送サービス。&lt;/p&gt;

&lt;p&gt;https://www.post.japanpost.jp/service/webletter/&lt;/p&gt;

&lt;p&gt;Web上からdocファイルとpdfファイルをアップロードすることで実際の住所にそのファイルを印刷した紙が郵送してくれます。&lt;/p&gt;

&lt;h3 id=&quot;印刷タイプと料金&quot;&gt;印刷タイプと料金&lt;/h3&gt;
&lt;p&gt;カラー印刷とモノクロ印刷が可能&lt;br /&gt;
料金は次の通り(値段は税込)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A4
    &lt;ul&gt;
      &lt;li&gt;白黒
        &lt;ul&gt;
          &lt;li&gt;最初の1ページ 99円&lt;/li&gt;
          &lt;li&gt;追加ページ(2~8ページ) 5円&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;カラー
        &lt;ul&gt;
          &lt;li&gt;最初の1ページ 146円&lt;/li&gt;
          &lt;li&gt;追加ページ(2~8ページ) 52円&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;利用には会員登録が必要無料&quot;&gt;利用には会員登録が必要(無料)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;登録内容の変更や退会に縛りはありません。&lt;/li&gt;
  &lt;li&gt;認証はEメール認証になります。&lt;/li&gt;
  &lt;li&gt;仮登録と本登録に分かれており登録メールを使って本登録しまう。&lt;/li&gt;
  &lt;li&gt;パスワードは半角英数字8～16文字&lt;/li&gt;
  &lt;li&gt;ログイン情報の失念は「秘密の質問」にて回復可能。&lt;/li&gt;
  &lt;li&gt;秘密の質問の失念は回復不可、別のメアドにて再登録。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;会員には1年の有効期限があります&quot;&gt;会員には1年の有効期限があります&lt;/h3&gt;
&lt;p&gt;最後の利用日から1年経過すると消失する。&lt;br /&gt;
再利用時は同じメアドで再登録可能。&lt;/p&gt;

&lt;h3 id=&quot;種類&quot;&gt;種類&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Webレタックス&lt;/li&gt;
  &lt;li&gt;Web速達&lt;/li&gt;
  &lt;li&gt;Webレター&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回やってみたのはWebレター&lt;/p&gt;

&lt;h3 id=&quot;決済方法&quot;&gt;決済方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;クレカ
    &lt;ul&gt;
      &lt;li&gt;American Express&lt;/li&gt;
      &lt;li&gt;JCB&lt;/li&gt;
      &lt;li&gt;VISA&lt;/li&gt;
      &lt;li&gt;MASTER&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VISAデビット&lt;/li&gt;
  &lt;li&gt;料金後納(後払いとは少し違う)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回やってみたのはクレカ決済&lt;/p&gt;

&lt;h3 id=&quot;料金後納とは&quot;&gt;料金後納とは&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;書類手続により、事前に当社の取扱郵便局の承認及び新東京郵便局への他局差出承認を受けていただきます。なお、毎月のご利用料金は翌月に口座振込や請求書によりお支払いただきます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり事前に決められた承認を受ける必要があります。&lt;br /&gt;
毎月の利用料支払いは翌月に口座振込や請求書にて支払う。&lt;br /&gt;
&lt;a href=&quot;https://www.post.japanpost.jp/service/web/faq/2.html&quot;&gt;料金後納にはどのような手続が必要ですか？&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;利用可能な文字&quot;&gt;利用可能な文字&lt;/h3&gt;
&lt;p&gt;JISX0213-2004で定めるJIS第一水準及び第二水準の文字を使用可能。&lt;br /&gt;
その他も利用できる可能性があるが、正しく表示されるかはプレビュー画面にて確認可能。&lt;/p&gt;

&lt;h2 id=&quot;本文作成時のつまづきポイント&quot;&gt;本文作成時のつまづきポイント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;UIが分かりにくい&lt;/li&gt;
  &lt;li&gt;MacのPDF印刷ではPDFアップロードに失敗する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uiが分かりにくい&quot;&gt;UIが分かりにくい&lt;/h3&gt;

&lt;p&gt;印刷物となる内容を作成する画面が結構分かりにくいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/1.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「選択」ボタンで pdf を選ぶことができます&lt;/li&gt;
  &lt;li&gt;印刷設定で白黒を選んでおかないとカラー料金になります&lt;/li&gt;
  &lt;li&gt;複数枚のpdfを郵送する場合は、複数回「選択」ボタンでpdfを選びます&lt;/li&gt;
  &lt;li&gt;pdfを選択すると「ページ操作」下のページ数が増えます&lt;/li&gt;
  &lt;li&gt;ページの削除操作は&lt;strong&gt;「ページ操作」&lt;/strong&gt; の押下で出来ます&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に選択でpdfを追加すると、デフォルトの1ページ目が残り続け、これを削除する方法に凄くつまづきました。&lt;br /&gt;
というのも画面左上に削除とあるので、「なぜこれが有効にならない」と第一印象に踊らされてました。&lt;/p&gt;

&lt;p&gt;このエディタはpdf/docだけでなく直接文字を入れたり線を引くことができます。&lt;br /&gt;
pdfのアップロードはそのベース情報のアップロードのため、ページ操作に該当します。&lt;/p&gt;

&lt;h3 id=&quot;macのpdf印刷ではpdfアップロードに失敗する&quot;&gt;MacのPDF印刷ではPDFアップロードに失敗する&lt;/h3&gt;
&lt;p&gt;MacのChromeでWebページをpdf化する場合は、印刷から出力先をpdfにすることで保存すると思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/2.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかし、これを先程の作成画面にアップロードすると次のエラーが出ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PDFをアップロードすることができません。&lt;br /&gt;
PDFの作成方法を変更してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どうやらPDFの作り方に問題があるようです。&lt;/p&gt;

&lt;p&gt;PDFに関しては次の注意事項があります。
&lt;a href=&quot;https://www.post.japanpost.jp/service/web/notice.html#bunsho&quot;&gt;文書ファイルのアップロード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これかなり終わった間があるのですが、色々と試したところ次の方法でアップロードすることができました。&lt;/p&gt;

&lt;h3 id=&quot;プレビューappで開いたpdfをpdfとして書き出すを選ぶ&quot;&gt;プレビュー.appで開いたpdfを「PDFとして書き出す…」を選ぶ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;対象のpdfファイルを開く（プレビュー.app）&lt;/li&gt;
  &lt;li&gt;ファイル &amp;gt; PDFとして書き出す… を選択&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この方法で保存したPDFだと多少ワーニングは出ますがアップロードすることが出来ます。&lt;/p&gt;

&lt;p&gt;プレビューから書き出すときに ファイル &amp;gt; 書き出す &amp;gt; PDF ではアップロードは失敗します。&lt;/p&gt;

&lt;p&gt;なお表示されるワーニングは推奨する方法でPDFを作成していないことによる情報消失リスクの提示です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-12-03-notebook-remote-work-web-letter/4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;基本的な操作方法について記載しない理由&quot;&gt;基本的な操作方法について記載しない理由&lt;/h2&gt;
&lt;p&gt;Webゆうびんのサイトに超丁寧な使い方が記載されているためです。&lt;/p&gt;

&lt;h2 id=&quot;品質は結果待ち&quot;&gt;品質は結果待ち&lt;/h2&gt;
&lt;p&gt;このWebレターですが、実際どのような品質で届くのはまだ未把握だったりします。
この方法で初めて試したので、もしかしたら文字が読めないほど粗いものが届く可能性もあり、現在確認待ちです。
そう感じたのはWeb内でのプレビューがウィンドウが小さかったり、ズームできなかったりと少し不安が残る状態だったからです。&lt;/p&gt;

&lt;p&gt;こちらは分かり次第追記します。&lt;/p&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;
&lt;p&gt;無事郵送され、印刷物にも問題ないことが分かりました。
これは便利ですね。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><summary type="html">フルリモートワークで仕事をしていると、オフィスに足を運ぶことがほとんどなく、理由がない限り行く時間やメリットもありません。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-12-03-notebook-remote-work-web-letter/0.png" /></entry><entry><title type="html">Railsを5.0.0から5.2.3に変更した</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update" rel="alternate" type="text/html" title="Railsを5.0.0から5.2.3に変更した" /><published>2019-11-14T00:00:00+09:00</published><updated>2019-11-14T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-rails-5_2_3-update">&lt;p&gt;個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。&lt;/p&gt;

&lt;p&gt;Gemfileのrailsを&lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;5.2.3&lt;/code&gt; に変更後、&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt;を実行&lt;/p&gt;

&lt;p&gt;gemインストールは成功したが末尾にメッセージが表示。&lt;/p&gt;

&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HEADS UP! i18n 1.1 changed fallbacks to exclude default locale.
But that may break your application.

Please check your Rails app for 'config.i18n.fallbacks = true'.
If you're using I18n (&amp;gt;= 1.1.0) and Rails (&amp;lt; 5.2.2), this should be
'config.i18n.fallbacks = [I18n.default_locale]'.
If not, fallbacks will be broken in your app by I18n 1.1.x.

For more info see:
https://github.com/svenfuchs/i18n/releases/tag/v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i18n の 1.1 では、デフォルトロケールが除外されました。&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;を確認して i18n が &amp;gt;= 1.1.0 および Rails &amp;lt; 5.2.2 の場合はこれを&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;に変更すべきです。&lt;/p&gt;

&lt;p&gt;そうしないとこれのせいでアプリが異常動作します。&lt;/p&gt;

&lt;h2 id=&quot;親が保存されないと子はcreateを呼び出せない&quot;&gt;親が保存されないと子はcreateを呼び出せない&lt;/h2&gt;

&lt;p&gt;ActiveRecordでは、親子関係のあるモデルで親より先に子を保存しようとするとエラーになるようになりました。&lt;/p&gt;

&lt;h3 id=&quot;原文-1&quot;&gt;原文&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotSaved:
You cannot call create unless the parent is saved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;説明&quot;&gt;説明&lt;/h3&gt;
&lt;p&gt;例えば 著者(Author) と 記事(Article) なら関連は次のようになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# カラムとして name: string がある&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# カラムとして title: string がある&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このとき Author を保存せずにArticleを保存しようとするとエラーになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ほげ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# エラー&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;対応策&quot;&gt;対応策&lt;/h3&gt;
&lt;p&gt;子を保存しないか先に親を保存させる必要があります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ほげ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-14-ruby-rails-rails-5_2_3-update.png" /></entry><entry><title type="html">Rails4.1からRails5.0.0.1に変更した</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update" rel="alternate" type="text/html" title="Rails4.1からRails5.0.0.1に変更した" /><published>2019-11-13T00:00:00+09:00</published><updated>2019-11-13T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-rails5_0_0-update">&lt;p&gt;個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。&lt;/p&gt;

&lt;h2 id=&quot;request-spec-では-キーワード引数が必要になりました&quot;&gt;Request spec では キーワード引数が必要になりました。&lt;/h2&gt;

&lt;p&gt;下記コードだと&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次のような警告が出る&lt;/p&gt;

&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEPRECATION WARNING: ActionDispatch::IntegrationTest HTTP request methods will accept only
the following keyword arguments in future Rails versions:
params, headers, env, xhr, as

Examples:

get '/profile',
  params: { id: 1 },
  headers: { 'X-Extra-Header' =&amp;gt; '123' },
  env: { 'action_dispatch.custom' =&amp;gt; 'custom' },
  xhr: true,
  as: :json
 (called from block (3 levels) in &amp;lt;top (required)&amp;gt; at /Users/mothule/workspace/organ/spec/requests/rooms_spec.rb:185)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;params, headers などキーワード指定が必要になりました。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;にすると警告が出なくなります。&lt;/p&gt;

&lt;h2 id=&quot;actioncontrollerparametersからmergeメソッドが51から使えなくなります&quot;&gt;ActionController::Parametersからmerge!メソッドが5.1から使えなくなります&lt;/h2&gt;

&lt;p&gt;セキュリティ観点によるメソッド廃止です。&lt;/p&gt;

&lt;p&gt;使い続けると潜在的なセキュリティ問題が顕在化しアプリの脆弱性が作成され悪性される可能性があります。
特に理由がなければ別メソッドで差し替えたほうがいいでしょう。
代用は非推奨ではないメソッドを&lt;a href=&quot;http://api.rubyonrails.org/v5.0.0.1/classes/ActionController/Parameters.html&quot;&gt;こちら&lt;/a&gt;から使うと確実です。&lt;/p&gt;

&lt;h3 id=&quot;原文-1&quot;&gt;原文&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEPRECATION WARNING: Method merge! is deprecated and will be removed in Rails 5.1, as `ActionController::Parameters` no longer inherits from hash. Using this deprecated behavior exposes potential security problems. If you continue to use this method you may be creating a security vulnerability in your app that can be exploited. Instead, consider using one of these documented methods which are not deprecated: http://api.rubyonrails.org/v5.0.0.1/classes/ActionController/Parameters.html (called from reposition_location_param at your/rails/controller/path.rb:67)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">個人アプリのRailsバージョンが結構古いことに気づいたので、バージョンを上げたときに躓いたポイントをまとめた記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-13-ruby-rails-rails5_0_0-update.png" /></entry><entry><title type="html">rails updateでgemバージョン依存を解決してみる</title><link href="https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version" rel="alternate" type="text/html" title="rails updateでgemバージョン依存を解決してみる" /><published>2019-11-13T00:00:00+09:00</published><updated>2019-11-13T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/ruby-rails-update-rails-version">&lt;p&gt;他愛もないネタですが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt;のバージョン依存の解決って最初見方を分からないと萎えるのでどう読み解くか1ケースとして記事にします。&lt;/p&gt;

&lt;p&gt;題材としてRailsのバージョンを4系から5系にアップデートします。&lt;/p&gt;

&lt;h2 id=&quot;バージョン衝突を再現する&quot;&gt;バージョン衝突を再現する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt; を実行すると&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle update rails
Fetching gem metadata from https://rubygems.org/.........
Fetching gem metadata from https://rubygems.org/.
Resolving dependencies....
Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;activesupport&quot;&lt;/span&gt;:
  In Gemfile:
    bullet was resolved to 5.9.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    haml-rails was resolved to 1.0.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    jbuilder &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 2.8.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 5.0.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rspec-rails was resolved to 3.8.1, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    spring was resolved to 2.0.2, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;rails&quot;&lt;/span&gt;:
  In Gemfile:
    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails-flog was resolved to 1.5.0, which depends on
      rails &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;railties&quot;&lt;/span&gt;:
  In Gemfile:
    devise was resolved to 4.5.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 6.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    factory_bot_rails was resolved to 4.11.1, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    haml-rails was resolved to 1.0.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    jquery-rails was resolved to 4.3.3, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 5.0.0, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 5.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    devise was resolved to 4.5.0, which depends on
      responders was resolved to 2.4.0, which depends on
        railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.3, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rspec-rails was resolved to 3.8.1, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    sass-rails &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 4.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 4.0.5, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とgem依存エラーが表示される。&lt;/p&gt;

&lt;p&gt;赤く大量に表示されてこの時点でやる気なくすが、何がをどう解決すればいいかを読み解いてみる。&lt;/p&gt;

&lt;h2 id=&quot;ログはgemの依存関係を表している&quot;&gt;ログはgemの依存関係を表している&lt;/h2&gt;

&lt;p&gt;このログはどの gem が どの gem に依存しているかを表してます。
一部抜粋します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;activesupport&quot;&lt;/span&gt;:
  In Gemfile:
    bullet was resolved to 5.9.0, which depends on
      activesupport &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 3.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合 &lt;code class=&quot;highlighter-rouge&quot;&gt;bullet&lt;/code&gt; gem が &lt;code class=&quot;highlighter-rouge&quot;&gt;activesupport&lt;/code&gt; gem に依存してることを表します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;activesupport&lt;/code&gt; のバージョンが &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0以上&lt;/code&gt; であれば問題ありません。&lt;br /&gt;
つまり問題ないライブラリ組み合わせです。&lt;/p&gt;

&lt;p&gt;他のライブラリもバージョン上問題ない組み合わせばかりです。&lt;/p&gt;

&lt;p&gt;つまり問題のない組み合わせもログとして出力されます。&lt;/p&gt;

&lt;h2 id=&quot;地道に見ていく&quot;&gt;地道に見ていく&lt;/h2&gt;

&lt;p&gt;最後まで見ると &lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; が怪しいです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sass-rails &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 4.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 4.0.5, which depends on
  railties &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;lt; 5.0, &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; 4.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;railties&lt;/code&gt; は 5.0未満でなければいけませんが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;rails&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; なので
&lt;code class=&quot;highlighter-rouge&quot;&gt;railties&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;5.0.0&lt;/code&gt; になります。
これは &lt;a href=&quot;https://rubygems.org/gems/rails/versions/5.0.0&quot;&gt;rubygems.org&lt;/a&gt; で確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; について調べてみると次のような記事を見つけます。
https://techracho.bpsinc.jp/hachi8833/2018_04_06/54793#2-1&lt;/p&gt;

&lt;p&gt;どうやら&lt;code class=&quot;highlighter-rouge&quot;&gt;sass&lt;/code&gt;は非推奨になるようです。つまり &lt;code class=&quot;highlighter-rouge&quot;&gt;rails&lt;/code&gt; では &lt;code class=&quot;highlighter-rouge&quot;&gt;sass-rails&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;sassc-rails&lt;/code&gt; に乗り換えないといけないようです。
Gemfile を次のように書き換えます。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-gem 'sass-rails', '~&amp;gt; 4.0.3'
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+gem 'sassc-rails', '~&amp;gt; 2.1.2'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで再度 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update rails&lt;/code&gt; を実行すると成功しました。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><summary type="html">他愛もないネタですが、 gemのバージョン依存の解決って最初見方を分からないと萎えるのでどう読み解くか1ケースとして記事にします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-11-13-ruby-rails-update-rails-version.png" /></entry></feed>