<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-04-16T03:52:23+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">RubyMineで条件付きブレイクポイントを使いこなす方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint" rel="alternate" type="text/html" title="RubyMineで条件付きブレイクポイントを使いこなす方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-04-01T00:40:47+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint">&lt;p&gt;みんな大好きRubyMineはRubyのIDEです。
IDEと言えばそのソフト一つで開発環境が整っている必要があります。
なんせ&lt;strong&gt;Integrated Development Envrionment&lt;/strong&gt;ですもんね。&lt;/p&gt;

&lt;p&gt;そんなIDEの重要機能としてデバッグがあります。
これが統合されていないIDEはIDEとは絶対に言えないです。&lt;/p&gt;

&lt;p&gt;その中でもブレイクポイントはデバッグにおいて要と言える機能です。
ブレイクポイントができないデバッグは何ができるのか？と疑問なほどです。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントとは&quot;&gt;条件付きブレイクポイントとは？&lt;/h2&gt;

&lt;p&gt;そんな便利なブレイクポイントですが、IDEとして用意されているブレイクポイントは一般的に単純なブレイクポイントだけでなく、一定の条件を満たした場合のみ止まってくれる&lt;strong&gt;「条件付きブレイクポイント」&lt;/strong&gt; はIDEならではの機能です。&lt;/p&gt;

&lt;p&gt;RubyMineにもきちんと用意されてます。今回はこれの使い方を説明します。&lt;/p&gt;

&lt;p&gt;コードは何でもいいです、今回はこれを使います。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;無条件ブレイクポイントをかける&quot;&gt;無条件ブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;行の横をクリックすると赤丸がついたらその行にブレイクポイントをつけたことになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineのエディタ画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Debug実行するとこの行で止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止まった画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これでもブレイクポイントがかかっているのでその時のコンテキストでRubyコードを実行したり変数評価したりできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止めた後のConsole画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ループ内のブレイクポイントは何回も止まる&quot;&gt;ループ内のブレイクポイントは何回も止まる&lt;/h3&gt;

&lt;p&gt;ただこの方法ではループや何回も呼ばれるメソッドなどではその都度止まります。
例えば決まったコンテキストだけデバッグしたい場合では何度も再開ボタンを連打して飛ばしてしまったりします。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントをかける&quot;&gt;条件付きブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;この無条件のブレイクポイントを右クリック押すとポップアップメニューが出ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集ポップアップ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enabled: 有効状態の設定&lt;/li&gt;
  &lt;li&gt;Suspend: 一時停止の設定&lt;/li&gt;
  &lt;li&gt;Condition: 条件の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enabled-有効状態の設定&quot;&gt;Enabled: 有効状態の設定&lt;/h3&gt;
&lt;p&gt;一時的に有効／無効を設定します。ブレイクポイント自体の削除はしません。
無効にすると穴のあいた赤丸になります。&lt;/p&gt;

&lt;h3 id=&quot;suspend-一時停止の設定&quot;&gt;Suspend: 一時停止の設定&lt;/h3&gt;
&lt;p&gt;一時停止とはつまるところ停止です。この行で止まります。
デフォルトではONになっており、これをOFFにするとオレンジ色になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集でSuspendOFF&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一時停止する代わりにログ出力のオプションが増えます。&lt;/p&gt;

&lt;h4 id=&quot;breakpoint-hit-発火をログ出力で通知&quot;&gt;“Breakpoint hit”: 発火をログ出力で通知&lt;/h4&gt;
&lt;p&gt;止まる代わりにログを出力します。
例えば次のコードでブレイクポイントを貼り、
“Breakpoint hit”をONにします。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ここでブレイクポイントを貼る&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
Breakpoint reached: main.rb:4
Breakpoint reached: main.rb:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;「&lt;strong&gt;“Breakpoint reached: main.rb:4”&lt;/strong&gt;」と通過したことをログ出力されてます。&lt;/p&gt;

&lt;h4 id=&quot;stack-trace-発火時のスタックトレース表示&quot;&gt;Stack trace: 発火時のスタックトレース表示&lt;/h4&gt;
&lt;p&gt;ブレイクポイントを通過して発火するとコールスタックを出力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with exit code 0
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;どこからこのメソッドが呼ばれてるのか知りたい場合に便利ですね。&lt;/p&gt;

&lt;h4 id=&quot;evaluate-and-log-発火時に独自ログを表示&quot;&gt;Evaluate and log: 発火時に独自ログを表示&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを通過して発火すると記載しておいたRubyコードが評価され結果を出力します。
例えばブレイクポイントに次のコードを仕込んで実行すると&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;String &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ブレイクポイント発火時に次のようにRubyコードの評価結果が出力されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
String 1
String 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;remove-once-hit-一度だけ止まる&quot;&gt;Remove once hit: 一度だけ止まる&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを一度発火するとそのブレイクポイントは削除されます。
&lt;strong&gt;このブレイクポイントはSuspendがONのときしか機能しません。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;disable-until-hitting-the-following-breakpoint-他のブレークポイント検知で有効化する&quot;&gt;Disable until hitting the following breakpoint: 他のブレークポイント検知で有効化する&lt;/h4&gt;
&lt;p&gt;このブレイクポイントは他のブレークポイントが発火したらそれをトリガーにブレークポイントが有効化します。&lt;/p&gt;

&lt;p&gt;ただシングルスレッドではこの機能は正しく動作していないように思えます。
対象のブレイクポイント発火時はたしかに有効化しているようなのですが、その後有効状態を継続してもブレイクポイントはヒットしません。
ここもし詳しく分かる方いたら教えてほしいです。&lt;/p&gt;

&lt;h3 id=&quot;condition-条件の設定&quot;&gt;Condition: 条件の設定&lt;/h3&gt;

&lt;p&gt;デフォルトはOFFになっておりONにすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;内をRubyとして評価し&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;になったら止まります。
条件付きブレイクポイントの場合は赤丸の右下に？マークがつきます。
次の図では、変数&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;になったら止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineの条件付きブレイクポイント&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例では単純な等価判定ですが、戻り値として&lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;を返せばいいだけなので
そのコンテキストで得られる情報を使った評価も可能です。
例えばActiveRecordがアクセスできるコンテキストであれば条件式に入れることも可能です。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;といったことも可能です。&lt;/p&gt;

&lt;h2 id=&quot;moreでブレイクポイント管理画面を表示&quot;&gt;Moreでブレイクポイント管理画面を表示&lt;/h2&gt;

&lt;p&gt;画面左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;More&lt;/code&gt;ラベルをタップするとブレイクポイント一覧と詳細ができる管理画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineブレイクポイント管理画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面でなくても指定したブレイクポイントの編集は可能です。&lt;/p&gt;

&lt;h2 id=&quot;rubymineにも条件付きブレイクポイントはつけれる&quot;&gt;RubyMineにも条件付きブレイクポイントはつけれる&lt;/h2&gt;

&lt;p&gt;他IDEと遜色ない条件付きブレイクポイント機能ですね。
ただ条件付きブレイクポイントのデメリットとしては、処理が重くなります。
通るたびに条件を満たしているか評価を行うためその分重くなります。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="rubymine" /><category term="ruby" /><summary type="html">みんな大好きRubyMineはRubyのIDEです。 IDEと言えばそのソフト一つで開発環境が整っている必要があります。 なんせIntegrated Development Envrionmentですもんね。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/0.png" /></entry><entry><title type="html">RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server" rel="alternate" type="text/html" title="RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-03-29T05:12:12+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server">&lt;p&gt;RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。
しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。
私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。&lt;/p&gt;

&lt;p&gt;今回はRubyMineを使ってUNIXドメインソケット通信で起動してるRailsアプリにブレイクポイントを仕込んだり、ブレイクポイントで止めたコンテキストからRubyを実行したり、変数をウォッチしたりするいわゆるデバッグする方法についてまとめます。&lt;/p&gt;

&lt;h2 id=&quot;環境&quot;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RubyMine&lt;/li&gt;
  &lt;li&gt;PumaにてUNIXドメインソケット通信中のRailsアプリ&lt;/li&gt;
  &lt;li&gt;Mac&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubymineから実行はunixドメインソケット通信による起動がない&quot;&gt;RubyMineから実行はUNIXドメインソケット通信による起動がない&lt;/h2&gt;

&lt;p&gt;通常ならRubyMineからRailsアプリを実行するには、メニューバーの &lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Run... &amp;gt; Development: app_name&lt;/code&gt; の順で実行できます。
もし設定を変更したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Edit Configurations...&lt;/code&gt;を選ぶことで登録された設定情報を変更できる画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼RubyMineのEdit Configurations…を開いた画面&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでIP addressとPortを指定して実行すればサーバが立ち上がります。
しかしこの方法はTCP/IPによるポートが開かれるタイプとなり、UNIXドメインソケットによる立ち上げとは異なります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;項目を見てもそれらしき項目は見当たりません。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼サーバーパラメータ一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面のServer一覧&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私が調べた限りでは直接UNIXドメインソケット通信として起動する方法はありませんでした。
これでは起動もデバッグもできずで、RubyMineが使い物にならなくなります。
しかし、実は少し手間ですがちゃんと手段はあります。&lt;/p&gt;

&lt;h2 id=&quot;unixドメインソケット通信はrubymineでrailsアプリをアタッチする&quot;&gt;UNIXドメインソケット通信はRubyMineでRailsアプリをアタッチする&lt;/h2&gt;

&lt;p&gt;それはメニューバーの&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Attach to Process...&lt;/code&gt;による&lt;strong&gt;既存プロセスにアタッチ&lt;/strong&gt;する方法です。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼メニューバーのRunにAttach to Process…はあります。&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのメニューバーのRunを開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使うことで起動中のRailsアプリに対してアタッチを試み、成功したらRubyMineが介入できる環境を構築してくれます。&lt;/p&gt;

&lt;p&gt;フローは次のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;デバッグしたいRailsアプリをシェルで起動&lt;/li&gt;
  &lt;li&gt;RubyMineからAttach to Processを実行&lt;/li&gt;
  &lt;li&gt;Attachが成功するのを待つ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;デバッグしたいrailsアプリをシェルで起動&quot;&gt;デバッグしたいRailsアプリをシェルで起動&lt;/h3&gt;
&lt;p&gt;ターミナルからRailsのServerコマンドを実行してRailsアプリを起動します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となっているのでUNIXドメインソケット通信として起動しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails s
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Booting Puma
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Rails 6.0.2.1 application starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;development
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more startup options
Puma starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;single mode...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version 4.3.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby 2.6.5-p114&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, codename: Mysterious Traveller
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Min threads: 5, max threads: 5
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Environment: development
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rubymineからattach-to-processを実行&quot;&gt;RubyMineからAttach to Process…を実行&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Attach to Process...&lt;/code&gt;を選ぶとRubyMineがRubyで起動してるプロセスを見つけて一覧として出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Rubyプロセス一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot; width=&quot;100%&quot; alt=&quot;Attach to Process...で出る一覧画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先程立ち上げたRailsアプリを見つけてくれます。賢いですね。&lt;/p&gt;

&lt;h3 id=&quot;attachが成功するのを待つ&quot;&gt;Attachが成功するのを待つ&lt;/h3&gt;

&lt;p&gt;次はこれを選ぶことでRubyMineがRailsアプリにアタッチをトライしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot; width=&quot;100%&quot; alt=&quot;接続中プログレス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RubyMineのDebug Toolbarにも次のようなログが流れます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;env RBENV_VERSION=2.6.5 /usr/local/Cellar/rbenv/1.1.2/libexec/rbenv exec ruby /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/gdb_wrapper --pid 15009 --ruby-path /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib -- --key-value --step-over-in-blocks --disable-int-handler --evaluation-timeout 20 --evaluation-control --time-limit 100 --memory-limit 0 --rubymine-protocol-extensions --port 61951 --host 0.0.0.0 --dispatcher-port 61952 --attach-mode&quot;&lt;/span&gt;
Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
executed &lt;span class=&quot;s1&quot;&gt;'lldb /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --no-lldbinit'&lt;/span&gt;
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;attach 15009&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
...
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;23&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; dlopen&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle&quot;&lt;/span&gt;, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_start_attach&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;breakpoint &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--shlib&lt;/span&gt; /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; __func_to_set_breakpoint_at&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
continuing
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_rb_eval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;require '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/../lib/ruby-debug-ide/attach/debugger_loader'; load_debugger(['/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib', '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib'], ['--key-value', '--step-over-in-blocks', '--disable-int-handler', '--evaluation-timeout', '20', '--evaluation-control', '--time-limit', '100', '--memory-limit', '0', '--rubymine-protocol-extensions', '--port', '61951', '--host', '0.0.0.0', '--dispatcher-port', '61952', '--attach-mode'])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功するとRailsアプリのログにも次のようなログが出力されます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; listens on 0.0.0.0:61951
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;失敗するときの3つの確認&quot;&gt;失敗するときの3つの確認&lt;/h3&gt;

&lt;p&gt;Attach to Processはアタッチ処理は安定とはいえないです。何回か試して成功するという状態です。
私がアタッチが失敗した場合にいつも試してることを教えます。
もし失敗する場合は次の4つを試してみてください。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;タイムアウトを伸ばす&lt;/li&gt;
  &lt;li&gt;Railsアプリを立ち上げ直す&lt;/li&gt;
  &lt;li&gt;アタッチトライ中にRailsアプリを動かしてみる&lt;/li&gt;
  &lt;li&gt;ブレイクポイントをつけてAttachを実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「タイムアウトを伸ばす」はRubyMineのPreferencesから出来ます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Debugger &amp;gt; Ruby &amp;gt; Debug connection timeout&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのSettingsからDebug connection timeを延長する&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rubymineでunixドメインソケット通信でもデバッグできるようになる&quot;&gt;RubyMineでUNIXドメインソケット通信でもデバッグできるようになる&lt;/h2&gt;
&lt;p&gt;通常ではRubyMineから起動したアプリしかデバッグができなかったり、ターミナル上でしかUNIXドメインソケット通信のRailsアプリを起動できなかったりしますが、この方法であれば既に立ち上がっているRubyプロセスでもアタッチすることでデバッグができるようになり便利ですね。&lt;/p&gt;</content><author><name></name></author><category term="mac" /><category term="rubymine" /><category term="nginx" /><category term="tools" /><category term="ruby" /><category term="rails" /><summary type="html">RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。 しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。 私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/0.png" /></entry><entry><title type="html">Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認</title><link href="https://blog.mothule.com/ruby/ruby-backslash" rel="alternate" type="text/html" title="Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認" /><published>2020-02-28T00:00:00+09:00</published><updated>2020-02-28T05:08:45+09:00</updated><id>https://blog.mothule.com/ruby/ruby-backslash</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-backslash">&lt;h2 id=&quot;バックスラッシュ記法とは&quot;&gt;バックスラッシュ記法とは？&lt;/h2&gt;
&lt;p&gt;文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。&lt;/p&gt;

&lt;h2 id=&quot;バックスラッシュ記法の一覧&quot;&gt;バックスラッシュ記法の一覧&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;バックスラッシュ記法&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;タブ(0x09)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;垂直タブ(0x0b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;改行(0x0a)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;キャリッジリターン(0x0d)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;改ページ(0x0c)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;バックスペース (0x08)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\a&lt;/td&gt;
      &lt;td&gt;ベル (0x07)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\e&lt;/td&gt;
      &lt;td&gt;エスケープ (0x1b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;空白 (0x20)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\nnn&lt;/td&gt;
      &lt;td&gt;8 進数表記 (n は 0-7)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xnn&lt;/td&gt;
      &lt;td&gt;16 進数表記 (n は 0-9,a-f)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cx or \C-x&lt;/td&gt;
      &lt;td&gt;コントロール文字 (x は ASCII 文字)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-x&lt;/td&gt;
      &lt;td&gt;メタ x (c | 0x80)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-\C-x&lt;/td&gt;
      &lt;td&gt;メタ コントロール x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\x&lt;/td&gt;
      &lt;td&gt;文字 x そのもの&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\unnnn&lt;/td&gt;
      &lt;td&gt;Unicode 文字(n は 0-9,a-f,A-F、16進数4桁で指定)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\u{nnnn}&lt;/td&gt;
      &lt;td&gt;Unicode 文字列(n は 0-9,a-f,A-F)。nnnnは16進数で1桁から6桁まで指定可能。スペースかタブ区切りで複数の Unicode 文字を指定できる。例: “\u{30eb 30d3 30fc a}” # =&amp;gt; “ルビー\n”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\改行&lt;/td&gt;
      &lt;td&gt;文字列中に改行を含めずに改行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#backslash&quot;&gt;Rubyリファレンスマニュアルより抜粋引用&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;タブt&quot;&gt;タブ(\t)&lt;/h3&gt;

&lt;p&gt;分かりにくいですが、fooとbarの間にスペースではなく、タブが入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;垂直タブv&quot;&gt;垂直タブ(\v)&lt;/h3&gt;
&lt;p&gt;真下に移動します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;バックスペースb&quot;&gt;バックスペース(\b)&lt;/h3&gt;

&lt;p&gt;キーボードのバックスペース同様、手前1文字を消します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベルa&quot;&gt;ベル(\a)&lt;/h3&gt;

&lt;p&gt;実行すると音がなります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;空白s&quot;&gt;空白(\s)&lt;/h3&gt;

&lt;p&gt;スペース1文字入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8進数表記-16進数表記-コントロール文字&quot;&gt;8進数表記, 16進数表記, コントロール文字&lt;/h3&gt;

&lt;p&gt;これらは直接制御文字を指定する方法です。
制御文字のコードと命令については&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%96%87%E5%AD%97&quot;&gt;Wikipedia&lt;/a&gt;が分かりやすいです。&lt;/p&gt;

&lt;p&gt;例えば前述したタブの場合は コントロール文字であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;^I&lt;/code&gt;16進数なら&lt;code class=&quot;highlighter-rouge&quot;&gt;09&lt;/code&gt;なので、
Rubyではこう書きます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Ibar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;unicode文字-unicode文字列&quot;&gt;Unicode文字, Unicode文字列&lt;/h3&gt;

&lt;p&gt;Unicodeを直接指定します。
例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0041&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041 0x0042 0x0043&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{0041 0042 0043}&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ABC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文字列中に改行を含めずに改行改行&quot;&gt;文字列中に改行を含めずに改行(\改行)&lt;/h3&gt;

&lt;p&gt;文字列を作成中に改行しても文字列作成中を継続する場合に使います。
これ意味わかりにくいですが、コード見ると何のことかすぐ分かります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo\
bar\
baz&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# foobarbaz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rubyのバックスラッシュ記法一覧確認したけど&quot;&gt;Rubyのバックスラッシュ記法一覧確認したけど&lt;/h2&gt;
&lt;p&gt;用途や効果の分からない記法もありました。長年実務でも見かけたことのないものなので特別なシステム開発でしか使われないかと思います。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">バックスラッシュ記法とは？ 文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-28-ruby-backslash.png" /></entry><entry><title type="html">Rubyの%w %s %i %Qなど%記法(パーセント記法)一覧を確認</title><link href="https://blog.mothule.com/ruby/ruby-percent-syntax" rel="alternate" type="text/html" title="Rubyの%w %s %i %Qなど%記法(パーセント記法)一覧を確認" /><published>2020-02-27T00:00:00+09:00</published><updated>2020-02-28T05:08:45+09:00</updated><id>https://blog.mothule.com/ruby/ruby-percent-syntax</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-percent-syntax">&lt;p&gt;気づいたら忘れてる%記法(パーセント記法)について一覧を確認しました。
%wと%iぐらいしか使うこと少ないですが、他にも色々ありますね。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の一覧&quot;&gt;%記法(パーセント記法)の一覧&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;%記法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;式展開&lt;/th&gt;
      &lt;th&gt;使用例&lt;/th&gt;
      &lt;th&gt;結果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%w&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%w(foo bar baz)&lt;/td&gt;
      &lt;td&gt;[“foo”, “bar”, “baz”]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%W&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%W(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;[“foo”, “bar”, “baz”]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%Q&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%q&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%(foo bar baz)&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%x(echo #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“baz\n”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%r&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%r(^#{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;}$) =~ baz&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%s(foo_bar_baz)&lt;/td&gt;
      &lt;td&gt;:foo_bar_baz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%i(foo bar baz)&lt;/td&gt;
      &lt;td&gt;[:foo, :bar, :baz]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%I&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%I(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;[:foo, :bar, :baz]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;は変数で&lt;code class=&quot;highlighter-rouge&quot;&gt;baz&lt;/code&gt;を代入してると仮定します。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の区切りに改行を使う&quot;&gt;%記法(パーセント記法)の区切りに改行を使う&lt;/h2&gt;

&lt;p&gt;区切り文字は空白文字(スペース)以外にも改行が使えます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(
foo
bar
baz
)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;記法パーセント記法の囲い文字を変更する&quot;&gt;%記法(パーセント記法)の囲い文字を変更する&lt;/h2&gt;
&lt;p&gt;%w&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;や%w&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;など括弧でも囲えますが、&lt;strong&gt;任意の非英数字&lt;/strong&gt; を使うことができます。&lt;br /&gt;
ただし、%w,%W,%i,%Iは区切り文字に&lt;strong&gt;空白文字(スペース)&lt;/strong&gt;と&lt;strong&gt;改行&lt;/strong&gt; を使うため、この２つは使えません。&lt;/p&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;(]&lt;/code&gt;のように始まりと終わり文字が異なるのは使えません。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の要素に空白文字スペースを入れる&quot;&gt;%記法(パーセント記法)の要素に空白文字(スペース)を入れる&lt;/h2&gt;

&lt;p&gt;%w, %W, %i, %Iは空白区切りの要素がそれぞれ評価されます。&lt;br /&gt;
しかしひとつの要素に空白文字を入れたいケースがあります。&lt;br /&gt;
その場合 スペースの前に\(バックスラッシュ)を入れると一つの要素にできます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sx&quot;&gt;%w(foo bar)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(foo\ bar)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;バックスラッシュ記法が有効な記法パーセント記法&quot;&gt;バックスラッシュ記法が有効な%記法(パーセント記法)&lt;/h2&gt;

&lt;p&gt;一部の%記法(パーセント記法)はバックスラッシュ記法が有効です。&lt;/p&gt;

&lt;p&gt;▼バックスラッシュ記法(\tなど)の詳細はこちらになります。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/ruby/ruby-backslash&quot;&gt;Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;バックスラッシュ記法が使える%記法(パーセント記法)は下記になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%W&lt;/li&gt;
  &lt;li&gt;%I&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubyのw-i以外にも色々ある記法パーセント記法&quot;&gt;Rubyの%w %i以外にも色々ある%記法(パーセント記法)&lt;/h2&gt;

&lt;p&gt;よく使うのは2つ3つですが、意外と多かったですね。&lt;br /&gt;
無理して使う必要はないですが、コードリーディングでは必要なので頭の片隅においときたいですね。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">気づいたら忘れてる%記法(パーセント記法)について一覧を確認しました。 %wと%iぐらいしか使うこと少ないですが、他にも色々ありますね。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-27-ruby-percent-syntax.png" /></entry><entry><title type="html">Mac上でnginxのセキュリティ最低限を確認する</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac" rel="alternate" type="text/html" title="Mac上でnginxのセキュリティ最低限を確認する" /><published>2020-02-26T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ5回目です。
今回を入門シリーズ最後とします。&lt;/p&gt;

&lt;p&gt;最後はMac上にnginxで立てたWebサーバを対象に最低限のセキュリティ項目について確認を行います。
また&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内の設定で分からないディレクティブが出たらそれの確認も行っていきます。&lt;/p&gt;

&lt;p&gt;▼前回は設定ファイルをドメイン別に分ける方法について説明しました。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-customize-on-mac&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回はnginx自体に関するセキュリティ対応であってその上に乗っかるlaravelやRailsアプリサーバに対するセキュリティに関しては記載していません。
また記載されたケース以外にも該当する脅威やシナリオはあることをさきに伝えておきます。&lt;/p&gt;

&lt;h2 id=&quot;nginxconfに設定したファイル全容&quot;&gt;nginx.confに設定したファイル全容&lt;/h2&gt;

&lt;p&gt;今回紹介する設定は次になります。
一つずつ調べてみます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server_tokens off;

add_header X-XSS-Protection &quot;1; mode=block&quot;;
add_header Content-Security-Policy &quot;default-src 'self'&quot;;
add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;
add_header X-Download-Options &quot;noopen&quot;;
add_header X-Frame-Options sameorigin;
add_header X-Content-Type-Options nosniff;

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
ssl_prefer_server_ciphers on;
ssl_dhparam /usr/local/etc/ssl/certs/dhparam.pem;

server {
  listen 80 default_server;
  server_name _;
  return 403;
}

server {
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /usr/local/etc/crypt/site.crt;
  ssl_certificate_key /usr/local/etc/crypt/site.key;
}

location = /xmlrpc.php {
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;httpヘッダー&quot;&gt;HTTPヘッダー&lt;/h2&gt;

&lt;p&gt;nginxには&lt;code class=&quot;highlighter-rouge&quot;&gt;add_header&lt;/code&gt;ディレクティブを使うことでHeaderを追加することが出来ます。&lt;/p&gt;

&lt;h3 id=&quot;nginxのバージョン情報を隠す&quot;&gt;nginxのバージョン情報を隠す&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginxで発見された脆弱性をついたゼロデイ攻撃から少しでも身を守る&lt;/p&gt;

&lt;p&gt;例：悪意あるユーザが事前にサイト毎のパッケージのバージョン情報を偵察
  脆弱性が公表されたら、その脆弱性をついた攻撃スクリプトが出回る
  蓄積されたサイト別情報から脆弱性を含むバージョンで動いているサイトを検索
  見つかったサイトに対してスクリプト実行&lt;/p&gt;

&lt;h3 id=&quot;クロスサイトスクリプティングxssフィルタリングを有効化する&quot;&gt;クロスサイトスクリプティング(XSS)フィルタリングを有効化する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-XSS-Protection &quot;1; mode=block&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;は有効化で&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;は無効化です。有効化したときの挙動として&lt;code class=&quot;highlighter-rouge&quot;&gt;mode=block&lt;/code&gt;を指定します。
有効化することでXSSフィルタリングを有効化します。これはデフォルト値となります。
XSS攻撃を検出したら、ブラウザはページをサニタイズ、安全でない部分を除去します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode=block&lt;/code&gt;がついてるとページ描画を止めます。&lt;/p&gt;

&lt;h3 id=&quot;コンテンツセキュリティポリシーcspでセキュリティ層を追加する&quot;&gt;コンテンツセキュリティポリシー(CSP)でセキュリティ層を追加する&lt;/h3&gt;
&lt;p&gt;CSPはXSS攻撃やデータインジェクション攻撃など一部攻撃を検知、軽減するセキュリティレイヤーです。
CSPを利用すると、サーバから許可されたドメインのスクリプトのみを実行します。
これによりXSSの発生箇所を抑えることができます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt;ではユーザーエージェントに読み込ませたいリソース情報と範囲を&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;セミコロン分割の列挙で指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Content-Security-Policy &quot;default-src 'self'&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合は全コンテンツをサイト自身のドメインから取得を許可します。ただしサブドメインは許可されません。
デフォルトでは無制限なのでこれを指定することで&lt;code class=&quot;highlighter-rouge&quot;&gt;-src&lt;/code&gt;で終わるもののデフォルトは全部この値になります。&lt;/p&gt;

&lt;h3 id=&quot;strict-transport-securityhstsでhttps通信を強制する&quot;&gt;Strict-Transport-Security(HSTS)でHTTPS通信を強制する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt;でサイトにHTTPS接続をすることをブラウザに記憶させます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;includeSubdomains&lt;/code&gt;で他のサブドメインにも適用させます。&lt;/p&gt;

&lt;h3 id=&quot;x-download-optionsで直接ファイル開くを禁止する&quot;&gt;X-Download-Optionsで直接ファイル開くを禁止する&lt;/h3&gt;
&lt;p&gt;IEがダウロードしたファイル直接開けないようにさせます。
ローカルにファイル化せずブラウザから直接URLを開くと、サイトのコンテキストで実行されるため
悪意あるスクリプトをこの方法で開くとインジェクション攻撃の脅威となります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Download-Options &quot;noopen&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;noopen&lt;/code&gt;とすることでそもそも「開く」ことができなくなります。&lt;/p&gt;

&lt;h3 id=&quot;x-frame-optionsで埋め込み表示を同ドメインに絞る&quot;&gt;X-Frame-Optionsで埋め込み表示を同ドメインに絞る&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;タグなどの中で表示許可を制限します。
他サイトで埋め込み表示させないことでクリックジャッキング攻撃を防止します。&lt;/p&gt;

&lt;p&gt;クリックジャッキングとはタップ可能なUIを隠しておいてユーザに意図せず押させる手法です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Frame-Options sameorigin;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sameorigin&lt;/code&gt;は表示許可を同じドメイン内にしぼります。&lt;/p&gt;

&lt;h3 id=&quot;x-content-type-optionsでcontent-type見るように強制する&quot;&gt;X-Content-Type-OptionsでContent-Type見るように強制する&lt;/h3&gt;

&lt;p&gt;MIMEタイプのスニッフィングの有効無効を指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Content-Type-Options nosniff;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nosniff&lt;/code&gt;でファイルの種類を内容ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;から判断させます。
無許可のファイル・タイプを処理させないようにします。&lt;/p&gt;

&lt;h3 id=&quot;mac上でのadd_header注意点&quot;&gt;mac上でのadd_header注意点&lt;/h3&gt;

&lt;p&gt;MacではHomebrewを使ってビルド済みバイナリーをダウンロードして使ってるかと思います。&lt;/p&gt;

&lt;p&gt;しかしデフォルトのnginxではheaderを上書きする方法がありません。
&lt;code class=&quot;highlighter-rouge&quot;&gt;add_header&lt;/code&gt;は文字通り追加であって上書きではありません。
そのためデフォルトで設定されているヘッダーを追加すると二つ並びどちらを実行するのかクライアントに依存する形となります。
拡張モジュールを使えば上書きが可能なので、Linuxなどであればソースからビルド時にモジュールを追加指定することでヘッダー上書きを可能にしています。&lt;/p&gt;

&lt;h2 id=&quot;ssltls&quot;&gt;SSL/TLS&lt;/h2&gt;

&lt;p&gt;今やHTTPS通信は当たり前で反対にHTTP通信では極端に言えば非常識な時代です。SEO目線でもHTTPSであることが評価の一つになってるくらいです。&lt;/p&gt;

&lt;p&gt;しかしながら単純にHTTPSをすれば良いというものでは有りません。
セキュリティ技術も時代の流れに合わせて進化しており、プロトコルも旧新多種多様になっています。
デフォルトではリスクのあるセキュリティプロトコルもあります。
ここで記載してる情報も数年後にはリスキーなものとなってる可能性も大いにあります。&lt;/p&gt;

&lt;h3 id=&quot;ssl_protocolsでssltlsプロトコルを指定する&quot;&gt;ssl_protocolsでSSL/TLSプロトコルを指定する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssl_protocols&lt;/code&gt;で使う暗号方式を指名できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;デフォルトでは 古くて非推奨なプロトコルも入っているので指定する。&lt;/p&gt;

&lt;h3 id=&quot;ssl_ciphersでセキュアな暗号化スイートを指定する&quot;&gt;ssl_ciphersでセキュアな暗号化スイートを指定する&lt;/h3&gt;

&lt;p&gt;サーバ側でセキュアな暗号化スイートを指定します。
無指定だとクライアント側が指定した方法で暗号化することになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;セミコロン(&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;)をデリミタに優先順位順に記載します。&lt;/p&gt;

&lt;h3 id=&quot;ssl_prefer_server_ciphersで優先利用させる&quot;&gt;ssl_prefer_server_ciphersで優先利用させる&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_prefer_server_ciphers on;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;とすることでサーバ側で指定した暗号を優先して使うように指示します。&lt;/p&gt;

&lt;h3 id=&quot;ssl_dhparamで鍵長を強化する&quot;&gt;ssl_dhparamで鍵長を強化する&lt;/h3&gt;

&lt;p&gt;デフォルトでは512bits, 1024bits以下になっておりDH鍵交換方式の脆弱性をついたLogjam攻撃リスクがあるため。
Logjam攻撃とはTLS接続の暗号強度を低下させ、計算可能な領域に下げ盗聴や改ざんのリスクを高める攻撃です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_dhparam /usr/local/etc/ssl/certs/dhparam.pem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;自前で2048や4096のpemを作り設定します。&lt;/p&gt;

&lt;p&gt;作成はOpenSSLで簡単につくれます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl dhparam &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;その他&quot;&gt;その他&lt;/h2&gt;

&lt;h3 id=&quot;ip直打ちアクセスを禁止する&quot;&gt;IP直打ちアクセスを禁止する&lt;/h3&gt;

&lt;p&gt;効果のあるセキュリティ対策は悪意あるユーザーにサイトの存在がばれない事です。&lt;/p&gt;

&lt;p&gt;しかし、ドメイン名は分からずともIPアドレスは数字なのでデタラメにアクセスするボットでもいつかは有効なアドレスにヒットします。
これで望んでいない悪意あるユーザーにサイトの存在がバレてしまうリスクがあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 80 default_server;
  server_name _;
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ドメインなしのアクセスがあればデフォルトでここがヒットするようにします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;接続も同じようにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /usr/local/etc/crypt/site.crt;
  ssl_certificate_key /usr/local/etc/crypt/site.key;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;一部デフォルトパスを無効化する&quot;&gt;一部デフォルトパスを無効化する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = /xmlrpc.php {
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;例えばwordpressでは外部からwpを操作する仕組みで&lt;code class=&quot;highlighter-rouge&quot;&gt;XML-RPC&lt;/code&gt;があり、それを使った脆弱性攻撃があります。
こういった有名フレームワークやライブラリを入れることで導入利便性を高めるためにデフォルトで用意されているページが脆弱性の対象となるので、こういったページは名称を変えるかそもそもアクセスを禁止させます。
今回はアクセスがあったら拒否します。&lt;/p&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;
&lt;p&gt;今回調べた項目は調べて必要だなと思った部分を設定として紹介しました。
実際はケースごとにもっと色々と設定が必要だなと思います。
この設定すれば100%安全を保証するものではありませんし、保証できません。
この設定によりインシデントが発生しても責任はおえません。
あくまでも自己責任でお願いします。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/hi-nakamura/items/fe07afbcfb61185c47f8&quot;&gt;参考&lt;/a&gt;
&lt;a href=&quot;http://cluex-developers.hateblo.jp/entry/secure-nginx-setting-for-2016&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;macでnginx入門シリーズ終了&quot;&gt;macでnginx入門シリーズ終了&lt;/h2&gt;

&lt;p&gt;この記事でmacでnginxに触れて慣れる入門記事は完了となります。
やはりボリュームとしては結構大きく上手にまとめられていない部分もあったかと思います。
一方でこのシリーズを通したことでnginxとはなんなのか？nginxでRailsアプリってどう立ち上がるのか？といったぼんやりとした全体像はつかめたのではないかなと思います。&lt;/p&gt;

&lt;p&gt;この記事を皮切りに今後nginxの理解がより深まればいいですね。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ5回目です。 今回を入門シリーズ最後とします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-26-web-nginx-getting-started-security-on-mac/0.png" /></entry><entry><title type="html">Mac上のnginx設定ファイルをドメイン毎に分ける</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac" rel="alternate" type="text/html" title="Mac上のnginx設定ファイルをドメイン毎に分ける" /><published>2020-02-26T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ4回目です。
今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;の設定内容をドメイン毎、つまりアプリ毎に分けます。
分かれてることで複数のアプリ開発を1つの&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.cnf&lt;/code&gt;に集約されなくなり管理しやすくなります。&lt;/p&gt;

&lt;p&gt;▼前回記事はこちらになります。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step3-on-mac&quot;&gt;Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;ドメイン毎に設定を分ける理由&quot;&gt;ドメイン毎に設定を分ける理由&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.cnf&lt;/code&gt;に直接記述せず、ドメイン毎に設定ファイルを用意する理由とは何でしょうか？
Macでnginxを使うケースは分けたほうが恩恵をえられます。
その理由について簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;macのnginxは開発用途がメイン&quot;&gt;Macのnginxは開発用途がメイン&lt;/h3&gt;
&lt;p&gt;Macを本番サーバとして使うことはありませんが、開発PCはMacかWindowsが主なOSだと思います。
そのため1つのMacに複数のアプリが含まれやすいです。
開発では複数アプリが同時に扱うこともあります。&lt;/p&gt;

&lt;h3 id=&quot;1macに複数ドメインを立ち上げることはよくある&quot;&gt;1Macに複数ドメインを立ち上げることはよくある&lt;/h3&gt;
&lt;p&gt;例えばMac1台で開発してると下記のように複数アプリが含まれることはよくあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプリA(Web)&lt;/li&gt;
  &lt;li&gt;アプリB(Web)&lt;/li&gt;
  &lt;li&gt;アプリB(Backend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかもアプリBだと、WebとBackend両方を立ち上げが必要なケースもあると思います。
これら各nginx設定は、特に工夫しなければすべて&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に書かれるかと思います。&lt;/p&gt;

&lt;h3 id=&quot;nginxconfに全ドメイン設定を記述できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に全ドメイン設定を記述できる&lt;/h3&gt;
&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;は複数ドメインの設定を&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;にまとめて全部記述することは可能です。
しかしそれによりなにかと長期的に面倒なことが続きます。
それは可読性と他ドメイン影響範囲に悪影響することです。&lt;/p&gt;

&lt;h3 id=&quot;長い設定ファイルはメンテナンスしにくい&quot;&gt;長い設定ファイルはメンテナンスしにくい&lt;/h3&gt;
&lt;p&gt;前述はドメイン3つですが、人によっては5~10個ドメインが入っているかと思います。
そうなってくると、&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;には10個の設定が全部記述されるためファイルがとても長くなります。
その長くて読みにくい設定ファイルから不要な項目を削除する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;開発不要になればそのドメイン設定は不要になる&quot;&gt;開発不要になればそのドメイン設定は不要になる&lt;/h3&gt;
&lt;p&gt;ドメイン開発が終了すればそのドメインの設定は不要となるため、削除すると思います。
それも放置すると&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;がとんでも長い行となるためです。&lt;/p&gt;

&lt;p&gt;削除するときにどの項目を削除するべきなのか一つ一つ読み解いて行く必要があります。
これは変更により他ドメインへの影響範囲内になりますし、誤って消してしまうと動かなくなります。
本番サーバはチューリング用途ですが、Macだと開発環境つど変更必要です。&lt;/p&gt;

&lt;h3 id=&quot;macのnginxconfは本番サーバと異なり変更頻度が高い&quot;&gt;Macの&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;は本番サーバと異なり変更頻度が高い&lt;/h3&gt;

&lt;p&gt;本番サーバのnginx.confは一度組み込んでしまえばパフォーマンス・チューニング用途以外で変えることは少ないです。
しかしMac上のnginxは開発用途がメインで、開発不要になれば削除作業が起きますし、新しくアプリ開発すれば追加作業が起きます。
本番サーバと異なり設定の大きく異なる複数のアプリを何度も消したり追加したりすることとなり、よりミスの可能性が上がります。
これらはドメインごとに設定ファイルとして分かれてることで望ましいです。&lt;/p&gt;

&lt;h3 id=&quot;ドメイン毎に設定ファイルが分かれていれば他のドメイン設定を消すリスクを回避できる&quot;&gt;ドメイン毎に設定ファイルが分かれていれば他のドメイン設定を消すリスクを回避できる&lt;/h3&gt;

&lt;p&gt;これらの問題を回避するためにドメイン毎に設定ファイルが用意されていれば解決できます。
新しくアプリが追加になればファイルごと追加で、アプリが不要になればドメイン設定ファイルを削除するだけで、
他ドメインの設定に影響を抑えられます。&lt;/p&gt;

&lt;p&gt;これはドメインごとの設定ファイルとシンボリックリンクで実現します。&lt;/p&gt;

&lt;h2 id=&quot;includeディレクティブでアプリ別設定ファイル構築する&quot;&gt;includeディレクティブでアプリ別設定ファイル構築する&lt;/h2&gt;
&lt;p&gt;では実際の構築方法について説明します。&lt;/p&gt;

&lt;p&gt;仕組みは単純で、ドメイン別の設定ファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;ディレクティブでロードしているだけです。
&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;ディレクティブには&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;でまとめてファイル指定もできるので、これを使います。&lt;/p&gt;

&lt;p&gt;流れは次の通りです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ドメイン別設定ファイル置き場を用意する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;でドメイン別設定ファイルをロードする&lt;/li&gt;
  &lt;li&gt;ドメイン別設定ファイルを用意する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ドメイン別設定ファイル置き場を用意する&quot;&gt;ドメイン別設定ファイル置き場を用意する&lt;/h3&gt;
&lt;p&gt;まずは設定ファイルを置く場所を用意します。場所といってもフォルダです。
フォルダの中に入れておくことで&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;でまとめてロードできて便利だからです。&lt;/p&gt;

&lt;p&gt;置き場となるフォルダ名は&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;とします。これは&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;で既にそういう記述があるためです。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /usr/local/etc/nginx/servers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginxconfにincludeでドメイン別設定ファイルをロードする&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;でドメイン別設定ファイルをロードする&lt;/h3&gt;

&lt;p&gt;次は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に先程用意したフォルダ内の設定ファイルを全てロードする処理を記述します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  # 全サーバ共通設定はここ

  # 各個別設定はここ
  include servers/*;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これにより&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダ内のファイルを全てロードするようになります。&lt;/p&gt;

&lt;h3 id=&quot;ドメイン別設定ファイルを用意する&quot;&gt;ドメイン別設定ファイルを用意する&lt;/h3&gt;

&lt;p&gt;最後はそれぞれドメイン毎の設定ファイルを用意します。
ファイル名はドメイン名と同じ方がわかりやすいです。
今回はローカルなので&lt;code class=&quot;highlighter-rouge&quot;&gt;api.localhost&lt;/code&gt;というファイル名を用意します。&lt;/p&gt;

&lt;p&gt;内容は動作確認できればいいので適当に用意しました。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 80;
  server_name api.localhost;
  root /usr/local/var/www;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上で設定は完了です、nginxを再起動するば反映されます。
 この設定ファイルであれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;http://api.localhost&lt;/code&gt; にアクセスすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/www&lt;/code&gt;フォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;のレスポンスを返すようになります。&lt;/p&gt;

&lt;h2 id=&quot;慣習に倣ったバーチャルホスト構築&quot;&gt;慣習に倣ったバーチャルホスト構築&lt;/h2&gt;
&lt;p&gt;今回紹介したドメイン毎に設定ファイルを分ける方法はnginxではバーチャルホスト構築時は少し慣習から外れた方法なので、Apacheなどからしたら少し分かりにくいかもしれません。目的はローカル上で複数ドメインをMacなど開発用とで立ち上げることなので、問題はないのですが、これが本番サーバの場合はこの方法ではなく次の方法で構築をしてください。&lt;/p&gt;

&lt;p&gt;大きく次のフローとなります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;sites-available フォルダ作成と個別設定ファイル配置&lt;/li&gt;
  &lt;li&gt;sites-enabled フォルダの作成と&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;フォルダ内の個別設定ファイルへのシンボリックリンク作成&lt;/li&gt;
  &lt;li&gt;nginx.conf に include ディレクティブで sites-enabled内ファイルをロード&lt;/li&gt;
  &lt;li&gt;nginx 再起動&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;フォルダが、先程の&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダとなります。
&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;で読み込む先は&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;フォルダにしてください。
直接実ファイルをロードするのではなく、&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;に用意されたシンボリックリンクをロードします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;が間に一つ入る形になっています。
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;unlink&lt;/code&gt;すること簡単にバーチャルホストを閉じることが可能となっています。
設定ファイルの削除や移動などは必要ありません。&lt;/p&gt;

&lt;h2 id=&quot;mac上のnginx設定ファイルをドメイン毎に分ける&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/h2&gt;
&lt;p&gt;今回は設定ファイルを別ファイルからロードすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をボリュームを抑え、変更影響を受けにくい仕組みの紹介でした。
直接書くより少し手間だったり慣れていないと確認が面倒だったりはしますが、目の前の手間から逃げ続けると将来一気に避けられない手間を対応するはめに会います。
可読性やメンテナンス性はエンジニアには重要指標なので、目の前の面倒から逃げずに将来のもっと大きな面倒をなくしていくことは大事ですね。&lt;/p&gt;

&lt;p&gt;次の記事は「&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-security-on-mac&quot;&gt;Mac上でnginxのセキュリティ最低限を確認する&lt;/a&gt;&lt;/span&gt;
」について説明します。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ4回目です。 今回はnginx.confの設定内容をドメイン毎、つまりアプリ毎に分けます。 分かれてることで複数のアプリ開発を1つのnginx.cnfに集約されなくなり管理しやすくなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-26-web-nginx-getting-started-customize-on-mac/0.png" /></entry><entry><title type="html">Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac" rel="alternate" type="text/html" title="Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる" /><published>2020-02-24T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ3回目です。&lt;/p&gt;

&lt;h2 id=&quot;ゼロからnginxconfを書いてアプリサーバを構築する&quot;&gt;ゼロから&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;を書いてアプリサーバを構築する&lt;/h2&gt;

&lt;p&gt;今回はアプリサーバ(APサーバ)をnginxで立てます。&lt;br /&gt;
前回の記事でゼロから作り上げた&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をベースに変更加える形で説明します。&lt;/p&gt;

&lt;p&gt;▼もし前回記事を見ていない場合は確認してください。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step2-on-mac&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;今回も使用ディレクティブを一つ一つ説明します。&lt;/strong&gt;&lt;br /&gt;
もし、途中で躓いた場合は最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;の全容を載せてます。確認してみてください。&lt;/p&gt;

&lt;h2 id=&quot;webサーバとapサーバアプリサーバの違い&quot;&gt;WebサーバとAPサーバ(アプリサーバ)の違い&lt;/h2&gt;

&lt;p&gt;まず事前知識としてWebサーバとAPサーバ(アプリサーバ)の違いについて説明します。&lt;/p&gt;

&lt;h3 id=&quot;webサーバとは&quot;&gt;Webサーバとは？&lt;/h3&gt;
&lt;p&gt;WebサーバはWebブラウザからのリクエストをハンドリングします。&lt;/p&gt;

&lt;p&gt;ブログであれば「先週の記事一覧を閲覧したい」というリクエストです。&lt;br /&gt;
Webサーバはリクエストを受け取るとレスポンスをWebブラウザに送信します。先程の「先週の記事一覧」であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;画像&lt;/code&gt;などを送信します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;はWebサーバになります。&lt;/p&gt;

&lt;h3 id=&quot;apサーバアプリサーバとは&quot;&gt;APサーバ(アプリサーバ)とは？&lt;/h3&gt;
&lt;p&gt;厳密にはWebアプリケーションサーバ(Web Application Server)です。APサーバやアプリサーバと略されることが多いです。&lt;br /&gt;
Webサーバが受け取ったリクエストを処理して、結果をWebサーバに返すサーバです。&lt;br /&gt;
APサーバではRubyやPHPなどプログラムを呼ぶことでリクエストを動的に処理して、Webサーバに分かる形で返しています。&lt;/p&gt;

&lt;h2 id=&quot;nginx--puma--railsを1つのmacで構想する&quot;&gt;nginx + puma + Railsを1つのMacで構想する&lt;/h2&gt;

&lt;p&gt;Ruby+Railsをベースに説明します。&lt;br /&gt;
今回のサーバ構成は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nginx&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puma/puma&quot;&gt;puma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3層構造となります。&lt;/p&gt;

&lt;h3 id=&quot;pumaとは&quot;&gt;pumaとは？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;並行性のために構築されたRuby/Rack Webサーバです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/puma/puma&quot;&gt;github/pumaより引用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pumaはWebサーバでRackにも対応しているため、puma単体でRailsなどRubyを動かすことができます。&lt;br /&gt;
そのため、開発時はpuma単体を使うことが多いです。&lt;/p&gt;

&lt;p&gt;しかしここで疑問が2つあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;なぜWebサーバが2つ使うのか？&lt;/li&gt;
  &lt;li&gt;Rackとは何か？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この２つを説明します。&lt;/p&gt;

&lt;h3 id=&quot;なぜwebサーバが2つ&quot;&gt;なぜWebサーバが2つ？&lt;/h3&gt;

&lt;p&gt;nginxはWebサーバですが、pumaもWeb/Rackサーバです。なぜ二つもWebサーバを使うのでしょうか？&lt;br /&gt;
&lt;strong&gt;それはnginxにはRackに直接つなげることができないためです。&lt;/strong&gt;&lt;br /&gt;
nginxがクライアントからリクエストを受け取ってもそれをRails/Rubyに渡す手段がありません。&lt;/p&gt;

&lt;h3 id=&quot;rackとは&quot;&gt;Rackとは？&lt;/h3&gt;

&lt;p&gt;ではRackとは一体何でしょうか。&lt;br /&gt;
&lt;strong&gt;RackとはRailsなどWebサーバからRubyプログラムを操作するための統一インターフェイスです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;▼Rackの詳細はこちらで説明しています。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/ruby/rails/rack/rails-rack-middleware-extension&quot;&gt;RackとRack Middlewareを知ることでRailsの一部仕組みを理解する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;なぜnginxが必要なのか&quot;&gt;なぜnginxが必要なのか？&lt;/h3&gt;

&lt;p&gt;ではそもそも何故nginxを使うのでしょうか？役割は何でしょうか？&lt;br /&gt;
rack接続できないnginxを使わずとも、pumaで完結したほうが構成がシンプルになります。&lt;br /&gt;
しかしそれでもnginxを使っている理由は、&lt;strong&gt;パフォーマンスの違いにあります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pumaはRubyで書かれてますが、nginxはCで書かれています。速度差は圧倒的にnginxが高速で多機能です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;処理性能・高い並行性・メモリ使用量の小ささに焦点を当てて開発されており、HTTP, HTTPS, SMTP, POP3, IMAPのリバースプロキシの機能や、ロードバランサ、HTTPキャッシュなどの機能も持つ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/Nginx&quot;&gt;Wikipedia&lt;/a&gt;より引用&lt;/p&gt;

&lt;p&gt;静的ファイルや画像など単純処理の場合にもRailsに渡さずnginxが処理したほうが高速で、CPUリソースも他の動的処理に回せるので全体として効率よく運用できます。&lt;/p&gt;

&lt;h3 id=&quot;今回のリクエストフローを図にする&quot;&gt;今回のリクエストフローを図にする&lt;/h3&gt;

&lt;p&gt;では今回作り上げるサーバ構成を前述した知識を使うと下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/1.png&quot; width=&quot;100%&quot; alt=&quot;nginxとpumaとRailsを使ったサーバ構成図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一番左側の層はクライアント層で、ブラウザだったりアプリになります。&lt;br /&gt;
左から右にリクエストフローを箇条書きすると次のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;クライアントがnginxにHTTPリクエストを渡す&lt;/li&gt;
  &lt;li&gt;nginxはHTTPリクエストを分析してRailsに渡すためpumaに渡す&lt;/li&gt;
  &lt;li&gt;pumaは受け取ったリクエストをRackが分かるデータ形式で渡す&lt;/li&gt;
  &lt;li&gt;Rackはルールに基づいてRailsを呼び出す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで補足すると、pumaとrackとRailsは説明都合で過分解してます。&lt;br /&gt;
実際はこれらは同じサーバにのり、呼び出しも通常のRubyによるコールスタックです。&lt;/p&gt;

&lt;h3 id=&quot;rackの役割は疎結合&quot;&gt;Rackの役割は疎結合&lt;/h3&gt;
&lt;p&gt;Rails自体にHTTPサーバ機能はなく、Rackという規約を通してHTTPリクエストを捌ける機能を提供しています。&lt;br /&gt;
pumaはHTTPサーバ機能を持ち、Rackの規約に基づいてRackへHTTPリクエストを渡しているのです。&lt;br /&gt;
つまりRackを通すことでpumaとRailsの疎結合が守られています。&lt;/p&gt;

&lt;h3 id=&quot;nginxはリバースプロキシ&quot;&gt;nginxはリバースプロキシ&lt;/h3&gt;
&lt;p&gt;nginxの立ち位置はリバースプロキシです。&lt;br /&gt;
これは前述したnginxの存在理由と一致します。&lt;br /&gt;
つまり簡単なHTTPリクエストはnginxが担い、難しいリクエストはPuma+Railsに任せるということです。&lt;/p&gt;

&lt;p&gt;そしてnginxからpumaへのデータ伝達テクノロジーとしてUNIXドメインソケットを使います。&lt;/p&gt;

&lt;h3 id=&quot;unixドメインソケットとはプロセス間通信機能&quot;&gt;UNIXドメインソケットとはプロセス間通信機能&lt;/h3&gt;
&lt;p&gt;1つのOS内部でのプロセス間通信でしか使えないですが、高速に通信できます。&lt;br /&gt;
UNIXドメインソケットを使うには、ファイルシステムのパス指定するとファイルが作成されます。&lt;br /&gt;
このファイルはソケットファイルと呼ばれるファイルで、通常ファイルのように実体は存在しません。&lt;br /&gt;
システムを使ったプロセス間の通信手段としてファイルを使います。&lt;br /&gt;
nginxがソケットファイルを作成し、Pumaは作成されたソケットファイルに接続します。&lt;/p&gt;

&lt;h2 id=&quot;macにnginxでwebリバースプロキシサーバを立ち上げる&quot;&gt;MacにnginxでWebリバースプロキシサーバを立ち上げる&lt;/h2&gt;

&lt;p&gt;それでは実際にサーバを構築していきます。まずはメインであるnginxでWebサーバを構築します。&lt;br /&gt;
冒頭でも説明したように前回の記事でゼロから作り上げた&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をベースに変更加える形で説明します。&lt;/p&gt;

&lt;p&gt;▼もし前回記事を見ていない場合は確認してください。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step2-on-mac&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;工程は大きく分けて2つです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;nginxにリバースプロキシ設定する&lt;/li&gt;
  &lt;li&gt;pumaの設定をRails側で設定する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;どちらも共通してUNIXドメインソケットのパス指定です。&lt;/p&gt;

&lt;h3 id=&quot;nginxにリバースプロキシ設定する&quot;&gt;nginxにリバースプロキシ設定する&lt;/h3&gt;

&lt;p&gt;前回ではlocationに対してどのフォルダを見るのかrootを設定しました。&lt;br /&gt;
静的処理の場合はそれで良かったのですが、動的処理は、処理を委任する必要があります。&lt;/p&gt;

&lt;p&gt;次のように&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt;ディレクティブが重要になってます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
  }

  server {
    location / {
      proxy_pass http://puma;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このnginx.confの各ディレクティブを一つずつ見ていきます。必要であれば関連ディレクティブも見ていきます。&lt;/p&gt;

&lt;h2 id=&quot;upstreamコンテキスト&quot;&gt;upstreamコンテキスト&lt;/h2&gt;

&lt;p&gt;サーバグループを定義します。異なるポートや通信方式のサーバ群を混在できます。
サーバグループの中のサーバは、リクエストをバランシングして渡されます。&lt;br /&gt;
ここでの&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;とはネットワークで下流から上流の通信機器へデータが流れることを指してます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream name { ... }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;次の例は4つのサーバを混在させたサーバグループです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstraem backend {
  server backend1.example.com weight=5; # ①
  server 127.0.0.1:8080 maxfails=3 fail_timeout=30s; # ②
  server unix:/tmp/backend3; # ③

  server backup1.example.com backup; # ④
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;サーバ間の分散方式は、デフォルトでは加重ラウンドロビンバランシング方式(weighted round-robin balancing method)で分散されます。
これはサーバに対するリクエストをサーバ負荷に無関係に、ローテーションでウェイトに従い各サーバに振り分ける方式です。
上記サーバグループに7つのリクエストがあったら次のように配信されます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;5つのリクエストが①サーバに送信される&lt;/li&gt;
  &lt;li&gt;1つのリクエストが②と③サーバにそれぞれ送信される&lt;/li&gt;
  &lt;li&gt;サーバ通信中にエラー発生したら、リクエストは次のサーバに渡される&lt;/li&gt;
  &lt;li&gt;機能してる全サーバが試行されるまで続く&lt;/li&gt;
  &lt;li&gt;どのサーバからも正常応答を取得できない場合は、最後に通信したサーバの結果を受け取る&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;serverディレクティブ&quot;&gt;serverディレクティブ&lt;/h3&gt;

&lt;p&gt;アドレスとサーバパラメータを定義します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;server address [parameters];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;アドレスはドメインかIPアドレスとポート、または&lt;code class=&quot;highlighter-rouge&quot;&gt;unix:&lt;/code&gt;プレフィックスの後に指定されたUNIXドメインソケットパスを指定できます。
ポート未指定はポート80が使用されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fuga.example.com&lt;/li&gt;
  &lt;li&gt;127.0.0.1:8080&lt;/li&gt;
  &lt;li&gt;unix:/usr/local/var/run/nginx/nginx.sock&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;パラメータ名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;weight&lt;/td&gt;
      &lt;td&gt;サーバウェイト。デフォルトは1。加重ラウンドロビンバランシングで使います&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_conns&lt;/td&gt;
      &lt;td&gt;プロキシされるサーバへの同時アクティブ接続最大数を制限。デフォルトは０で無制限。サーバグループが共有メモリ※にない場合はこの制限はワーカープロセス毎に機能&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_fails&lt;/td&gt;
      &lt;td&gt;デフォルトは1回。ヘルスモニタで後述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_timeout&lt;/td&gt;
      &lt;td&gt;デフォルトは10秒。ヘルスモニタで後述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;backup&lt;/td&gt;
      &lt;td&gt;サーバをバックアップサーバとして設定。プライマリサーバが利用不可時にリクエストが渡る。&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ip_hash&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;random&lt;/code&gt;ロードバランシング方式時は利用不可&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;down&lt;/td&gt;
      &lt;td&gt;サーバを永続的に使用不可として設定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resolve&lt;/td&gt;
      &lt;td&gt;サーバのドメイン名に対応するIPアドレスの変更を監視し、再起動なくupstream構成を自動変更できます。サーバグループは共有メモリに存在する必要がある&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;route&lt;/td&gt;
      &lt;td&gt;サーバのルート名を設定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;service&lt;/td&gt;
      &lt;td&gt;DNS SRVレコードの解決を有効にし、サービス名を設定。これを使うにはサーバの解決パラメタを指定し、ポート番号なしホスト名指定が必要&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slow_start&lt;/td&gt;
      &lt;td&gt;サーバ不可から回復後にサーバのウェイトをゼロから公称値に回復する時間を設定。デフォルトは0、つまりスロースタートは無効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;drain&lt;/td&gt;
      &lt;td&gt;ドレインモードに設定する。このモードはサーバにバインドされた要求のみがプロキシされる&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※共有メモリに関しては後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;zone&lt;/code&gt;ディレクティブを確認してください。&lt;br /&gt;
グループにサーバ一つの場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;max_fails&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;max_timeout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slow_start&lt;/code&gt;は無視される。&lt;/p&gt;

&lt;p&gt;今回はUNIXドメインソケット通信1つしかないため、次のようにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ソケットファイルのパスにはアプリ名を入れるのが良いでしょう。
まだアプリ(Railsアプリ)は用意していないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;app-name&lt;/code&gt;と仮置してます。&lt;/p&gt;

&lt;h4 id=&quot;ヘルスモニタ&quot;&gt;ヘルスモニタ&lt;/h4&gt;
&lt;p&gt;max_timeoutパラメータの指定期間内にmax_failsパラメータ指定回数失敗すると、&lt;strong&gt;サーバ利用不可&lt;/strong&gt; とみなします。
そしてmax_timeoutパラメータの期間、サーバ利用不可となります。&lt;/p&gt;

&lt;p&gt;サーバとの通信試行が指定回数失敗したらサーバ利用不可と判断する時間、もしくはサーバが利用できないとみなされる期間。デフォルトは10秒&lt;/p&gt;

&lt;h4 id=&quot;注意max_connsを超えるケース&quot;&gt;注意：max_connsを超えるケース&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;アイドル状態のkeepalive接続&lt;/li&gt;
  &lt;li&gt;複数のワーカー&lt;/li&gt;
  &lt;li&gt;共有メモリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が有効になっている場合、プロキシサーバへのアクティブ状態またはアイドル状態の接続総数が&lt;code class=&quot;highlighter-rouge&quot;&gt;max_conns&lt;/code&gt;値を超える場合があります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive&lt;/code&gt;接続に関しては、後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive&lt;/code&gt;ディレクティブを確認してください。&lt;/p&gt;

&lt;h3 id=&quot;zoneディレクティブ&quot;&gt;zoneディレクティブ&lt;/h3&gt;
&lt;p&gt;「ワーカプロセス間で共有されるグループ構成」と「実行状態」を保持する共有メモリゾーンの名前とサイズを定義します。
この設定は複数グループが同じゾーンを共有するケースがあります。その場合はサイズを1回指定で十分です。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;zone name [size];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;商用サブスクリプションの場合は、nginx再起動せずグループメンバーシップ変更できたり、特定サーバの設定変更できます。&lt;/p&gt;

&lt;p&gt;共有メモリを使わない場合は、各ワーカプロセスはサーバグループ設定のそれぞれのコピーを保持し、関連するカウンターのそれぞれのセットを保存します。
カウンターにはグループ内のそれぞれのサーバへの現在の接続数が含まれ、サーバへリクエスト送信の失敗数が含まれます。
サーバグループの設定は変更不可です。
共有メモリが有効な場合、個別でもっているサーバグループ設定全てを共有メモリで扱います。&lt;/p&gt;

&lt;p&gt;また共有メモリが有効な場合、あるプロセスがサーバ利用不可と判断したら、別プロセスにも共有されます。
無効な場合は、それぞれがサーバ利用不可と判断されるまでサーバへリクエストを送信し続けます。&lt;/p&gt;

&lt;p&gt;今回はワーカープロセスは複数個あるので、設定しておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream puma {
  zone nginx 64k;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;keepaliveディレクティブ&quot;&gt;keepaliveディレクティブ&lt;/h3&gt;

&lt;p&gt;Keep-Aliveを有効にします。
&lt;code class=&quot;highlighter-rouge&quot;&gt;connections&lt;/code&gt;パラメータは、Keep-alive接続の最大数を設定します。
数を超えると使用頻度が低い接続が閉じます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive connections;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;この接続最大数はnginxワーカプロセスが開くことができるサーバの接続数の総数を超えてはいけません。&lt;/strong&gt;
超えてしまうと、ワーカプロセスが開ける接続数を超えるリクエストが来てもkeepaliveの期限切れするまで接続できません。&lt;/p&gt;

&lt;p&gt;keepalive接続数で処理するリクエストの最大数は &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests&lt;/code&gt;ディレクティブで設定できて、
タイムアウトは&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout&lt;/code&gt;ディレクティブで設定できます。&lt;/p&gt;

&lt;p&gt;今回はMac上ということで主に開発色が強いので1にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream puma {
  keepalive 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;keepalive_requestsディレクティブ&quot;&gt;keepalive_requestsディレクティブ&lt;/h3&gt;

&lt;p&gt;1つのkeepalive接続を介して処理するリクエスト最大数を設定します。
最大数のリクエストが処理された後、接続が閉じます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests number;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests 100;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回はデフォルト値でいこうと思います。&lt;/p&gt;

&lt;h4 id=&quot;なぜ接続数が決められてるのか&quot;&gt;なぜ接続数が決められてるのか？&lt;/h4&gt;
&lt;p&gt;無制限ではダメな理由は、接続毎にメモリ割り当てが行われているため、定期的に接続を閉じてメモリ解放を行わないと、要求が高すぎるとメモリ使用量が高くなり推奨されません。&lt;/p&gt;

&lt;h3 id=&quot;keepalive_timeoutディレクティブ&quot;&gt;keepalive_timeoutディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシサーバーへのkeepalive接続のタイムアウトを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout timeout;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout 60s;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回はデフォルト値でいこうと思います。&lt;/p&gt;

&lt;h3 id=&quot;proxy_passディレクティブ&quot;&gt;proxy_passディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシするサーバのプロトコルとアドレス、場所となるURIをオプションで設定します。
プロトコルは&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;を指定できます。アドレスはドメイン名、IPアドレスとオプションでポートを指定できます。
UNIXドメインソケットの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;unix:&lt;/code&gt;をつけます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass URL;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例1： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass http://localhost:8080/uri/;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;例2： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass https://backend.example.com;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;例3： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass http://unix:/tmp/backend.socket:/uri/;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ドメイン名が複数アドレスに解決する場合はラウンドロビン方式で使用します。さらにアドレスをサーバグループとして指定できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;パラメータには変数が使えます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /name/ {
  proxy_pass http://127.0.0.1 $request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この場合ディレクティブでURIを指定すると、元のリクエストURIを置き換えてそのままサーバに渡します。&lt;/p&gt;

&lt;p&gt;変数を使うと、アドレスがドメイン名なら名前解決はサーバグループ間で検索され、
見つからない場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;resolver&lt;/code&gt;ディレクティブを使用します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resolver&lt;/code&gt;ディレクティブとはネームサーバを設定するディレクティブです。&lt;/p&gt;

&lt;p&gt;今回はUNIXドメインソケットなので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;で設定した名前を使います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  location / {
    proxy_pass http://puma;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy_set_headerディレクティブ&quot;&gt;proxy_set_headerディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシサーバからパス先サーバにheader情報を追加で渡します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_set_header field value;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回は次のヘッダーをパス先サーバに送ります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
  proxy_set_header    Host    $host;
  proxy_set_header    X-Real-IP    $remote_addr;
  proxy_set_header    X-Forwarded-Host       $host;
  proxy_set_header    X-Forwarded-Server    $host;
  proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header    X-Forwarded-Proto $scheme;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy_hide_headerディレクティブ&quot;&gt;proxy_hide_headerディレクティブ&lt;/h3&gt;

&lt;p&gt;クライアントに渡さないヘッダーフィールドを設定する。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_hide_header field;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;デフォルトでは下記のヘッダーフィールドは渡しません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Date&lt;/li&gt;
  &lt;li&gt;Server&lt;/li&gt;
  &lt;li&gt;X-Pad&lt;/li&gt;
  &lt;li&gt;X-Accel-*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに逆に許可は、&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass_header&lt;/code&gt;ディレクティブを使用します。&lt;/p&gt;

&lt;p&gt;今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Powered-By&lt;/code&gt;を隠します。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
  proxy_hide_header   X-Powered-By;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Powered-By&lt;/code&gt;フィールドは一部のFWではFW情報やバージョンをこのフィールドに乗せてクライアントに送ります。
使ってるFWバージョンに脆弱性が見つかると攻撃手段を教えているようなもので、通常利用ならクライアント側に教える目的もないため隠します。&lt;/p&gt;

&lt;h3 id=&quot;proxy_redirectディレクティブ&quot;&gt;proxy_redirectディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシ先の応答の&lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;Refresh&lt;/code&gt;ヘッダーフィールドで変更が必要か設定します。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect default;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect off;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect redirect replacement;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect default;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例：
&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect http://localhost:8000/two/ http://frontend/one/;&lt;/code&gt;と設定した場合&lt;br /&gt;
プロキシ先から&lt;code class=&quot;highlighter-rouge&quot;&gt;Location: http://localhost:8000/two/some/uri&lt;/code&gt;が返ってきたら
クライアントには&lt;code class=&quot;highlighter-rouge&quot;&gt;Location: http://frontend/one/some/uri/&lt;/code&gt;を返す&lt;/p&gt;

&lt;p&gt;パラメータ値が&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;では次の２つの設定は同じになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /one/ {
  proxy_pass     http://upstream:port/two/;
  proxy_redirect default;
}
location /one/ {
  proxy_pass     http://upstream:port/two/;
  proxy_redirect http://upstream:port/two/ /one/;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回はプロキシ先にドメインが正しくを伝えるためにoffにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  location / {
    proxy_redirect off;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;出来上がった設定ファイルnginxconf&quot;&gt;出来上がった設定ファイル(nginx.conf)&lt;/h2&gt;

&lt;p&gt;この記事を通して出来上がった設定ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;)になります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_processes  4;

error_log /usr/local/var/log/nginx/error.log error;

worker_rlimit_nofile 2048;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                    '$status $body_bytes_sent &quot;$http_referer&quot; '
                    '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

  access_log /usr/local/var/log/nginx/access.log main;

  sendfile on;
  tcp_nopush on;

  keepalive_timeout 60;

  gzip on;
  gzip_min_length 1024;
  gzip_types text/css text/javascript application/json;

  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
    zone nginx 64k;
    keepalive 1;
  }

  server {
    listen 8080;
    server_name localhost;

    charset utf-8;

    access_log /usr/local/var/log/nginx/localhost.access.log  main;

    error_page 404 /404.html;

    location / {
      proxy_pass http://puma;
      proxy_set_header    Host    $host;
      proxy_set_header    X-Real-IP    $remote_addr;
      proxy_set_header    X-Forwarded-Host       $host;
      proxy_set_header    X-Forwarded-Server    $host;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_hide_header   X-Powered-By;
    }


    location ~* \.(gif|jpg|jpeg|png)$ {
      root /usr/local/var/www/images;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pumaの設定をrails側で設定する&quot;&gt;pumaの設定をRails側で設定する&lt;/h2&gt;
&lt;p&gt;puma単体で動かしても動作確認しにくいのでサンプル用のRailsアプリを用意します。&lt;/p&gt;

&lt;p&gt;下記環境でRailsアプリを用意します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby 2.6.5&lt;/li&gt;
  &lt;li&gt;Rails 6.0.2.1&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails new nginx-puma-rails &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql &lt;span class=&quot;nt&quot;&gt;--skip-git&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-javascript&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-spring&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-bundle&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;nginx-puma-rails
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rake db:create db:migrate db:seed
Created database &lt;span class=&quot;s1&quot;&gt;'nginx_puma_rails_development'&lt;/span&gt;
Created database &lt;span class=&quot;s1&quot;&gt;'nginx_puma_rails_test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次にpumaの設定ファイルでポートlistenではなくUNIXドメインソケットの変更します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx-puma-rails/config/puma.rb&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Specifies the `port` that Puma will listen on to receive requests; default is 3000.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# port        ENV.fetch(&quot;PORT&quot;) { 3000 }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ↑ portコマンドはコメントで動かないようにする&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unix://var/local/work/nginx-puma-rails/tmp/sockets/puma.sock&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt; ではアプリ名を仮(app-name)にしてたいので、ここも合わせます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nginxとrailsアプリを起動して疎通する&quot;&gt;nginxとRailsアプリを起動して疎通する&lt;/h2&gt;

&lt;p&gt;UNIXドメインソケットのパスをpumaとnginxそれぞれ合わせたら、Railsアプリを起動します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails s
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Booting Puma
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Rails 6.0.2.1 application starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;development
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more startup options
Puma starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;single mode...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version 4.3.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby 2.6.5-p114&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, codename: Mysterious Traveller
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Min threads: 5, max threads: 5
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Environment: development
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先程指定したパスにあるUNIXドメインソケットファイルをListenするようになります。&lt;/p&gt;

&lt;p&gt;ではnginxの開いてるlistenからアクセスして、railsにログが流れるか疎通確認してみます。
nginxが未起動なら起動してください。&lt;/p&gt;

&lt;p&gt;ブラウザで&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;にアクセスします。&lt;br /&gt;
Railsアプリに次のようなアクセスログが流れたら疎通成功です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started GET &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;127.0.0.1 at 2020-03-02 00:54:43 +0900
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.6ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SET NAMES utf8mb4,  @@SESSION.sql_mode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CONCAT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CONCAT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@@sql_mode, &lt;span class=&quot;s1&quot;&gt;',STRICT_ALL_TABLES'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;',NO_AUTO_VALUE_ON_ZERO'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,  @@SESSION.sql_auto_is_null &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, @@SESSION.wait_timeout &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2147483
Processing by Rails::WelcomeController#index as &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  Rendering vendor/bundle/ruby/2.6.0/gems/railties-6.0.2.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/2.6.0/gems/railties-6.0.2.1/lib/rails/templates/rails/welcome/index.html.erb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Duration: 7.3ms | Allocations: 311&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Completed 200 OK &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;13ms &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Views: 10.0ms | ActiveRecord: 0.0ms | Allocations: 1670&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ファイルディスクリプタの罠&quot;&gt;ファイルディスクリプタの罠&lt;/h3&gt;
&lt;p&gt;ここで一つ注意点があります。
前回の記事で1プロセスあたりが扱えるファイルディスクリプタ上限について設定しました。
1ワーカープロセス32個のファイルを扱える設定にしてあります。
この32とは1プロセスですが、一つのプロセスにスレッドを複数持つことができるため、スレッドが多すぎるとアプリによっては簡単に32個を超えてしまいます。
pumaのスレッド数は性能だけでなく上限も考慮が必要です。&lt;/p&gt;

&lt;p&gt;現在のpuma設定では最小スレッド5,最大スレッド5、つまり常時5スレッド稼働しています。
つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;32 ÷ 5 ≒ 6&lt;/code&gt; 1スレッドあたり6個以上のファイル操作を行うと上限エラーが発生します。&lt;/p&gt;

&lt;h3 id=&quot;nginxのプロセス数とpumaのプロセス数&quot;&gt;nginxのプロセス数とpumaのプロセス数&lt;/h3&gt;

&lt;p&gt;nginxはリバースプロキシサーバとして立てているため、プロセス数は単純化すれば窓口の数になります。
窓口の数が多すぎて、実際の作業場となるpumaのプロセス数が少ないとpumaサーバがボトルネックになります。
nginxとpumaのプロセス数のバランスが重要になってきます。&lt;/p&gt;

&lt;h2 id=&quot;mac1台にnginxでwebサーバとpumaでアプリサーバを立てた&quot;&gt;Mac1台にnginxでWebサーバとPumaでアプリサーバを立てた&lt;/h2&gt;

&lt;p&gt;実際にMac1台にnginxでWebリバースプロキシサーバとPumaアプリサーバ立てることができました。&lt;br /&gt;
Railsアプリを弄っているだけだとWebアプリがどういう仕組みで、そのうちRailsアプリはどこに配置されるのかイメージできなかったりします。
Mac1台でnginxでWebサーバとPumaでアプリサーバを立てることで、nginxからリバースプロキシで送信されたリクエストをpumaWebサーバが受信してRack通じてRailsアプリに処理を渡していることが分かります。&lt;/p&gt;

&lt;p&gt;「Mac上でnginx」という本番では無意味な環境でも理解する上ではとても効率の良い環境です。&lt;/p&gt;

&lt;p&gt;次の記事は「&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-customize-on-mac&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/a&gt;&lt;/span&gt;
」について説明します。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><category term="ruby" /><category term="rails" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ3回目です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/0.png" /></entry><entry><title type="html">Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step2-on-mac" rel="alternate" type="text/html" title="Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる" /><published>2020-02-22T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-step2-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step2-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ2回目です。&lt;/p&gt;

&lt;h2 id=&quot;ゼロからnginxconfを書いてhttpサーバを構築します&quot;&gt;ゼロから&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;を書いてHTTPサーバを構築します&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;を一行ずつ読み解いて有無を決めながら簡易な&lt;strong&gt;静的ブログ向け設定ファイルを作り上げていきます。&lt;/strong&gt;&lt;br /&gt;
また、&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;にはないけど関連するものも取り上げます。&lt;/p&gt;

&lt;p&gt;上から一つずつ設定しており、それぞれの段階で実行が出来る状態になってありますが、&lt;strong&gt;もし途中で躓いた場合は&lt;/strong&gt;
最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;の全容を載せてます。確認してみてください。&lt;/p&gt;

&lt;h3 id=&quot;インストールや起動方法などが分からない方は過去記事を&quot;&gt;インストールや起動方法などが分からない方は過去記事を&lt;/h3&gt;
&lt;p&gt;前回はWebサーバの簡単な基礎とnginxのインストールから立ち上げるまでを説明しました。&lt;br /&gt;
▼前回の記事はこちらになります。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step1-on-mac&quot;&gt;Macでnginxをインストールして起動する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;最小設定でnginxのhttpサーバを構築する&quot;&gt;最小設定でnginxのHTTPサーバを構築する&lt;/h2&gt;

&lt;p&gt;デフォルトで用意された&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;には色々と書かれてて、やる気が萎えるのし分かりにくいです。&lt;br /&gt;
なので、まずはこの雛形を削りながら最少設定でHTTPサーバを構築します。&lt;/p&gt;

&lt;p&gt;削りきった最少でHTTPサーバを構築する設定ファイルは下記になります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;events &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;events&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; の３つのブロックディレクティブだけでいけました。&lt;br /&gt;
それ以外はデフォルト値として動いているようです。&lt;br /&gt;
当然何も機能を設定していないので、ほぼ何もできないHTTPサーバです。&lt;br /&gt;
ここまで削れればとっかかりやすいですね。&lt;/p&gt;

&lt;p&gt;なおこれらブロックディレクティブのことはコンテキストと呼ぶようです。
&lt;strong&gt;これらブロックディレクティブに1つも囲まれていない部分(インデントなし部分)をmainコンテキストと呼ぶようです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;次は、デフォルト設定ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;)から一つずつ確認しながら先程の最少設定ファイルを埋めていきます。&lt;/p&gt;

&lt;h2 id=&quot;mainコンテキスト&quot;&gt;mainコンテキスト&lt;/h2&gt;

&lt;p&gt;前述したどのブロックディレクティブにも囲まれていない部分から見ていきます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;ファイルの冒頭部分です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;userディレクティブ&quot;&gt;userディレクティブ&lt;/h3&gt;
&lt;p&gt;workerプロセスを実行するユーザーとグループを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;user user [group];&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;nobody nobody&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;デフォルトでもコメントアウトされてるように必須項目ではありません。&lt;/p&gt;

&lt;h3 id=&quot;worker_processesディレクティブ&quot;&gt;worker_processesディレクティブ&lt;/h3&gt;
&lt;p&gt;workerのプロセス数を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_processes *number*|auto;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_processes 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最適値はCPUコア数、ストレージ数、負荷パターンなど多岐に渡ります。&lt;br /&gt;
悩ましい場合はCPUコア数を推奨します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;はそれを自動検出します。&lt;/p&gt;

&lt;p&gt;今回はCPUコア数と同じ値にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_processes 4;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手元のMacのコア数はシステムレポートのハードウェア概要で確認できます。　　
システムレポートは &lt;code class=&quot;highlighter-rouge&quot;&gt;Spotlight検索&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;このMacについて.app&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;システムレポート&lt;/code&gt; でたどり着けます。&lt;/p&gt;

&lt;h3 id=&quot;error_logディレクティブ&quot;&gt;error_logディレクティブ&lt;/h3&gt;
&lt;p&gt;エラーログ出力先の設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;error_log file [level];&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;error_log logs/error.log error;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;出力パスとログレベルを設定します。&lt;br /&gt;
ログレベルは&lt;code class=&quot;highlighter-rouge&quot;&gt;debug, info, notice, warn, error, crit, alert, emerg&lt;/code&gt;の8個です。&lt;br /&gt;
例えばログレベルを&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;にすると&lt;code class=&quot;highlighter-rouge&quot;&gt;error, crit, alert, emerg&lt;/code&gt;のレベルのログが出力されます。&lt;/p&gt;

&lt;p&gt;エラーログは欲しいのでログレベルerrorでログを取ろうと思います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error_log /usr/local/var/log/nginx/error.log error;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pidディレクティブ&quot;&gt;pidディレクティブ&lt;/h3&gt;
&lt;p&gt;メインプロセスのプロセスIDの保存先を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;pid file;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;pid logs/nginx.pid;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;公式のデフォルト値は↑ですが、Macだと &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/run/nginx.pid&lt;/code&gt; にあります。&lt;br /&gt;
デフォルト値でも問題ない場所にあるので特に指定はしないでいきます。&lt;/p&gt;

&lt;h2 id=&quot;eventsコンテキスト&quot;&gt;eventsコンテキスト&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;events {
    worker_connections  10;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接続処理に影響するブロックディレクティブです。&lt;/p&gt;

&lt;h3 id=&quot;worker_connectionsディレクティブ&quot;&gt;worker_connectionsディレクティブ&lt;/h3&gt;

&lt;p&gt;ワーカープロセスで開くことができる同時接続の最大数を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_connections number;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_connections 512;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;この接続とは、クライアントだけでなくすべての接続（プロキシサーバとの接続など）も含まれます。&lt;br /&gt;
また、同時接続の実際の数が、&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_rlimit_nofile&lt;/code&gt; に依存します。&lt;br /&gt;
せっかくなので &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_rlimit_nofile&lt;/code&gt; についても取り上げます。&lt;/p&gt;

&lt;h3 id=&quot;worker_rlimit_nofileディレクティブ&quot;&gt;worker_rlimit_nofileディレクティブ&lt;/h3&gt;
&lt;p&gt;ワーカープロセスが開けるファイルの最大数(&lt;code class=&quot;highlighter-rouge&quot;&gt;RLIMIT_NOFILE&lt;/code&gt;)の制限を設定します。&lt;br /&gt;
メインプロセスを再起動せずに制限を増やすために使います。&lt;/p&gt;

&lt;p&gt;通常1プロセスは&lt;code class=&quot;highlighter-rouge&quot;&gt;RLIMIT_NOFILE&lt;/code&gt;の数以上のファイルは開けませんが、&lt;br /&gt;
この値を設定することでその上限を超えたファイル数を処理できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なおworker_rlimit_nofileディレクティブはmainコンテキスト&lt;/strong&gt;で使えるディレクティブです。**&lt;/p&gt;

&lt;h4 id=&quot;rlimit_nofileとは&quot;&gt;RLIMIT_NOFILEとは？&lt;/h4&gt;
&lt;p&gt;1プロセスが開けるファイルの上限です。&lt;br /&gt;
確認するには&lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -n&lt;/code&gt; で取れます。Macだとデフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt;しかないようです。&lt;/p&gt;

&lt;h2 id=&quot;同時接続に関するパラメータを整理する&quot;&gt;同時接続に関するパラメータを整理する&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_rlimit_nofile&lt;/code&gt;はworkerプロセスが扱えるファイル上限数(&lt;code class=&quot;highlighter-rouge&quot;&gt;RLIMIT_NOFILE&lt;/code&gt;)を設定する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RLIMIT_NOFILE&lt;/code&gt;は1プロセスが開けるファイル上限で&lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -n&lt;/code&gt;で確認できる。デフォルトでは&lt;strong&gt;256&lt;/strong&gt;しかないようです。&lt;/li&gt;
  &lt;li&gt;OS全体で扱えるファイル数は&lt;code class=&quot;highlighter-rouge&quot;&gt;launchctl limit maxfiles&lt;/code&gt;で確認できる。デフォルトでは&lt;strong&gt;256&lt;/strong&gt;しかないようです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launchctl limit maxfiles&lt;/code&gt;を変更は可能ですが、今回は目的ではないのでデフォルトのままにします。
ちなみに変えたい場合は「launchctl limit maxfiles」で検索するとたくさん出てくるのでそちらを参考にしてください。&lt;/p&gt;

&lt;h3 id=&quot;worker_rlimit_nofileの算出式&quot;&gt;worker_rlimit_nofileの算出式&lt;/h3&gt;
&lt;p&gt;OS全体ファイル上限、プロセスファイル上限、workerプロセス数の３つからworkerプロセスの同時接続数を算出できそうです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workerプロセス数(worker_processes) * プロセスファイル上限(worker_rlimit_nofile) &amp;lt; OS全体ファイル上限(maxfiles)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;この式からプロセスファイル上限(worker_rlimit_nofile)を求めます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プロセスファイル上限(&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_rlimit_nofile&lt;/code&gt;) = OS全体ファイル上限(&lt;code class=&quot;highlighter-rouge&quot;&gt;maxfiles&lt;/code&gt;) / workerプロセス数(&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_processes&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この式に実際の値を当てはめます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;256 / 4 = 64&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ただしMacでnginxを使う目的は学習や開発版で、nginx以外にも様々なアプリでファイルを開いていると思うので、その分を考慮します。
今回は半分にします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;64 * 0.5 = 32&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_rlimit_nofile 32;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ということですね。&lt;/p&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_connections&lt;/code&gt;ですが、1接続1ファイルオープンではなく少なくとも2つは消耗するようです。&lt;a href=&quot;https://qiita.com/mikene_koko/items/85fbe6a342f89bf53e89#%E4%BD%95%E6%95%85-worker_connections-%E3%81%AE2%E5%80%8D%E3%81%AE%E5%80%A4%E3%81%8C-worker_rlimit_nofile-%E4%BB%A5%E4%B8%8B%E3%81%A7%E3%81%82%E3%82%8C%E3%81%B0ok&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記記事からして &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_connections&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;worker_rlimit_nofile&lt;/code&gt; の 1/3 にしておけば余裕だと思います。&lt;/p&gt;

&lt;p&gt;32 の 1/3 は10.6 きりよく10にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;events {
  worker_connections 10;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同時接続は4*10で大体40といったところでしょうか。&lt;/p&gt;

&lt;p&gt;実際のサーバ(Linux)では上限を結構あげたりすると思いますが、上限が上がったからといってその上限まで同時接続を捌けるとは限りません。あくまでもファイルオープンの限界値が増えただけであって、それ以外のCPU負荷やネットワーク負荷、DB負荷、メモリ負荷の問題は以前変わらずです。&lt;/p&gt;

&lt;h2 id=&quot;httpコンテキスト&quot;&gt;httpコンテキスト&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  include       mime.types;
  default_type  application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
  #                  '$status $body_bytes_sent &quot;$http_referer&quot; '
  #                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;
  server {

  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;HTTPサーバに関するブロックディレクティブです。&lt;/p&gt;

&lt;h3 id=&quot;includeディレクティブ&quot;&gt;includeディレクティブ&lt;/h3&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;include file|mask;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;なし&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;別ファイルや一致するファイル群を設定として読み込みます。&lt;br /&gt;
取り込むファイルは、構文やディレクティブなども見てくれます。&lt;/p&gt;

&lt;p&gt;デフォルトnginx.confの &lt;code class=&quot;highlighter-rouge&quot;&gt;include mime.types;&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;minem.types&lt;/code&gt; という別ファイルをロードしているようです。&lt;/p&gt;

&lt;p&gt;このファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/nginx/&lt;/code&gt;ディレクトリにあります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;mime.types
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 mothule  admin  5170  7  1  2018 mime.types
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 mothule  admin  5231  2 20 03:07 mime.types.default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;中身は &lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt; コンテキスト１つにたくさんのファイル・タイプの列挙がされてます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;の行末付近にも&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;は使われています。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include servers/*;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは、サーバー毎の設定ファイルを外部ファイル化し、それをロードする場合に使います。&lt;/p&gt;

&lt;p&gt;▼詳しくは同シリーズの記事をご確認ください。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-customize-on-mac&quot;&gt;ドメイン別設定ファイル置き場を用意する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;typesコンテキスト&quot;&gt;typesコンテキスト&lt;/h3&gt;

&lt;p&gt;レスポンスのMIMEタイプと拡張子名のマッパーです。&lt;br /&gt;
追加時は小文字で必須です。&lt;/p&gt;

&lt;p&gt;デフォルトでほとんどのMIMEタイプをカバーできているのでこれはロードしたほうが良いです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  include mime.types;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;default_typesディレクティブ&quot;&gt;default_typesディレクティブ&lt;/h3&gt;

&lt;p&gt;レスポンスのデフォルトMIMEタイプを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;default_types mime-type;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;default_types text/plain;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt;コンテキストで設定したMIMEタイプに当てはまらない場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;text/plain&lt;/code&gt; になり、レスポンスによってはやばいものもあると思うので、デフォルトenginx.conf同様&lt;code class=&quot;highlighter-rouge&quot;&gt;application/octet-stream&lt;/code&gt; にしておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  default_type  application/octet-stream;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;access_logディレクティブ&quot;&gt;access_logディレクティブ&lt;/h3&gt;
&lt;p&gt;アクセスログ出力先の設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;access_log file [format [buffer=size][gzip[=level]][flush=time][if=condition]]&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;access_log logs/access.log combined;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;構文内の[]について説明すると、[]内の文字列や値は任意を表します。&lt;br /&gt;
例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;[buffer=size]&lt;/code&gt; は無指定でも問題ありません。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;[gzip[=level]]&lt;/code&gt;だと無指定, gzip, gzip=level の3つとなります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;引数&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;file&lt;/td&gt;
      &lt;td&gt;出力先パス&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;format&lt;/td&gt;
      &lt;td&gt;1行ログの形式. 複雑な場合は後述するlog_formatの名前を指定します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;buffer=size&lt;/td&gt;
      &lt;td&gt;ファイルに書き込む前のバッファサイズ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gzip[=level]&lt;/td&gt;
      &lt;td&gt;圧縮して書き込む.levelは1~9で最大は9,デフォルトは1,ログは&lt;code class=&quot;highlighter-rouge&quot;&gt;zcat&lt;/code&gt;で圧縮解除や読み取り可能です&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;flush=time&lt;/td&gt;
      &lt;td&gt;バッファをファイルに書き込むインターバル. この時間経過するとバッファをファイルに書き込みます&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;if=condition&lt;/td&gt;
      &lt;td&gt;条件付きログ. 条件が0または空文字列なら書き込まない&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;ifcondition例&quot;&gt;if=condition例&lt;/h4&gt;
&lt;p&gt;次の例は$statusつまりHTTPコードが200番台,300番台ならログに書き込まない。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map $status $loggable {
    ~^[23]  0;
    default 1;
}

access_log /path/to/access.log combined if=$loggable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;log_formatディレクティブ&quot;&gt;log_formatディレクティブ&lt;/h3&gt;
&lt;p&gt;ログのフォーマットを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;log_fomat name [escape=deafult|json|none] string ...;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;log_format combined &quot;...&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;構文内の|について説明すると、|で区切られた値のみを設定できることを表します。&lt;br /&gt;
例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;escape=default&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;escape=json&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;escape=none&lt;/code&gt; の3パターンのみとなります。&lt;/p&gt;

&lt;p&gt;string には通常変数とログ書き込み時のみ存在する変数を含めたフォーマットを設定できます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;変数名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$bytes_sent&lt;/td&gt;
      &lt;td&gt;クライアントへ送信したバイト数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$connection&lt;/td&gt;
      &lt;td&gt;接続シリアルNo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$connection_requests&lt;/td&gt;
      &lt;td&gt;接続を介した現在のリクエスト数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$msec&lt;/td&gt;
      &lt;td&gt;ログ書き込み時間(ミリ秒)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$pipe&lt;/td&gt;
      &lt;td&gt;リクエストがパイプライン化されたら&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;が書き込まれ、それ以外は&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;が書き込まれます。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$request_length&lt;/td&gt;
      &lt;td&gt;リクエスト行、ヘッダー、本文含むリクエストの長さ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$request_time&lt;/td&gt;
      &lt;td&gt;リクエスト処理時間(ミリ秒).リクエストを受けてから返すまでの時間&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$status&lt;/td&gt;
      &lt;td&gt;HTTPステータス&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$time_iso8601&lt;/td&gt;
      &lt;td&gt;ISO8601フォーマットに沿ったローカル時間&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$time_local&lt;/td&gt;
      &lt;td&gt;一般的なログフォーマットに沿ったローカル時間&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ログのデフォルトは &lt;code class=&quot;highlighter-rouge&quot;&gt;$combined&lt;/code&gt; が指定されており、これは次の形式になっています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log_format combined '$remote_addr - $remote_user [$time_local] '
                    '&quot;$request&quot; $status $body_bytes_sent '
                    '&quot;$http_referer&quot; &quot;$http_user_agent&quot;';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;実際にnginxサーバにアクセスして&lt;code class=&quot;highlighter-rouge&quot;&gt;access.log&lt;/code&gt;を覗いてみると下記形式でログが書き込まれます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1 - - [21/Feb/2020:18:43:21 +0900] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;デフォルト設定はテストすると落ちる&quot;&gt;デフォルト設定はテストすると落ちる&lt;/h3&gt;
&lt;p&gt;前述したnginx.confだとテストが落ちます。&lt;br /&gt;
理由はログのパスがnginxの場所からの相対パスとなっており、そこにフォルダが存在しないためです。&lt;br /&gt;
また場所もhomebrewの管理下になり、一般的なログ場所とは異なります。&lt;br /&gt;
ログのパスは下記のように絶対パスで指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  access_log  /usr/local/var/log/access.log  main;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sendfileディレクティブ&quot;&gt;sendfileディレクティブ&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sendfile()&lt;/code&gt; の仕様有無を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;sendfile on|off;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;sendfile off;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;sendfileとは&quot;&gt;sendfileとは？&lt;/h4&gt;
&lt;p&gt;ファイルディスクリプター間のデータ転送関数。read/write組み合わせより効率が良い。&lt;br /&gt;
ただ、動作不安定や静的ファイルが更新不備など不安定な評判もある。&lt;/p&gt;

&lt;p&gt;とりあえず使ってみて動作不安定な気があればここを無効化します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  sendfile on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tcp_nopushディレクティブ&quot;&gt;tcp_nopushディレクティブ&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_NOPUSH&lt;/code&gt;ソケットオプション または &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_CORK&lt;/code&gt;オプションの使用有無を設定します。&lt;br /&gt;
FreeBSDでは&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_NOPUSH&lt;/code&gt;でLinuxでは&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_CORK&lt;/code&gt;を使います。&lt;br /&gt;
このディレクティブは&lt;code class=&quot;highlighter-rouge&quot;&gt;sendfile&lt;/code&gt;が有効時のみ働きます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;tcp_nopush on|off;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;tcp_nopush off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これが有効だと、レスポンスヘッダーとファイルをまとめて送信するため、パケット数を抑え効率よくなります。&lt;/p&gt;

&lt;p&gt;今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;sendfile&lt;/code&gt;を有効化しており、&lt;code class=&quot;highlighter-rouge&quot;&gt;tcp_nopush&lt;/code&gt;により高速化が見込めるので、ここも有効化します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  tcp_nopush on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;keepalive_timeoutディレクティブ&quot;&gt;keepalive_timeoutディレクティブ&lt;/h3&gt;
&lt;p&gt;keep-aliveによる接続時間を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout timeout [header_timeout];&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout 75s;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[header_timeout]&lt;/code&gt;は任意オプションです。&lt;br /&gt;
これはMozillaおよびKonquerorによって認識されます。 MSIEは約60秒でキープアライブ接続を自動的に閉じます。&lt;/p&gt;

&lt;h4 id=&quot;keep-aliveとは&quot;&gt;keep-aliveとは？&lt;/h4&gt;

&lt;p&gt;簡易説明すると、HTTPはリクエスト毎にサーバ／クライアント間で接続を確立し、レスポンスを返します。
レスポンスを返したら接続を切るため、リクエストが大量にあれば、たとえ同じクライアントだとしてもそれだけ接続／切断を繰り返すことになります。  &lt;br /&gt;
これでは無駄なので、レスポンス送信後すぐに切断せずにしばらく待つことで、次リクエストの接続処理スキップすることで効率よくなります。&lt;/p&gt;

&lt;p&gt;詳細は&lt;a href=&quot;https://www.atmarkit.co.jp/ait/articles/1605/11/news030_3.html&quot;&gt;こちら&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;p&gt;keep-aliveはタイムアウト値が適切であれば通信処理を効率良く出来るため、入れておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  keepalive_timeout: 60s;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gzipディレクティブ&quot;&gt;gzipディレクティブ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;コマンドで圧縮の使用有無を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip on|off;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;圧縮することで通信量を減らせます。しかしトレードオフとして圧縮に必要なCPUリソースを消費します。また解凍(=展開)が必要になり解凍はクライアント側が行います。つまりクライアント側にも解凍に必要なCPUリソースを消費します。&lt;/p&gt;

&lt;p&gt;今回はonにしてみます。&lt;br /&gt;
ただし、gzipはon/offの二択ではなく、onの場合に細かいパラメータ設定が可能となっています。&lt;br /&gt;
せっかくなのでgzipのパラメータ設定用ディレクティブもまとめます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  gzip on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gzip_buffersディレクティブ&quot;&gt;gzip_buffersディレクティブ&lt;/h3&gt;

&lt;p&gt;レスポンス圧縮に使うバッファサイズと数を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_buffers number size;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_buffers 32 4k|16 8k;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;デフォルトは1メモリページと同等になってます。そのためプラットフォームに応じて &lt;strong&gt;32個 4kBytes&lt;/strong&gt; か &lt;strong&gt;16個 8kBytes&lt;/strong&gt; のいずれかです。&lt;/p&gt;

&lt;p&gt;ここはバッファサイズがメモリページを横断すると、メモリ操作によるコストがかさむのでデフォルトのままでよいと思います。&lt;/p&gt;

&lt;h3 id=&quot;gzip_comp_levelディレクティブ&quot;&gt;gzip_comp_levelディレクティブ&lt;/h3&gt;
&lt;p&gt;圧縮レベル(1~9)を設定します。小さいほど圧縮率は下がります。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_comp_level level;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_comp_level 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;圧縮は線形比例ではありません。なので&lt;strong&gt;9が1より9倍圧縮率が高くなることはありません。&lt;/strong&gt;&lt;br /&gt;
圧縮レベル別のパフォーマンスは&lt;a href=&quot;https://qiita.com/nmatayoshi/items/9884eea9b0633c1c1f6c&quot;&gt;こちらの記事&lt;/a&gt;が参考になります。&lt;/p&gt;

&lt;p&gt;ここは1か2がコスパよいのでデフォルトと同じ1のままにします。&lt;/p&gt;

&lt;h3 id=&quot;gzip_disableディレクティブ&quot;&gt;gzip_disableディレクティブ&lt;/h3&gt;

&lt;p&gt;いずれかの正規表現に一致する&lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;圧縮を無効に設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_disable regex ...;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回は特に除外はしないので、未設定にします。&lt;/p&gt;

&lt;h3 id=&quot;gzip_http_versionディレクティブ&quot;&gt;gzip_http_versionディレクティブ&lt;/h3&gt;

&lt;p&gt;レスポンス圧縮に必要な最小HTTPバージョンを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_http_version 1.0 | 1.1;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_http_version 1.1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最近は1.1は当たり前なので、これはデフォルトのままにします。&lt;/p&gt;

&lt;h3 id=&quot;gzip_min_lengthディレクティブ&quot;&gt;gzip_min_lengthディレクティブ&lt;/h3&gt;

&lt;p&gt;レスポンスを圧縮する最小サイズを設定します。この最小サイズは&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;が使われます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_min_length length;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_min_length 20;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これは無圧縮のほうがコスパ良いサイズについて設定します。&lt;/p&gt;

&lt;p&gt;ここの値は通信帯域やパケットサイズに関係します。デフォルトは小さすぎるので1k(1024)にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  gzip_min_length 1024;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gzip_proxiedディレクティブ&quot;&gt;gzip_proxiedディレクティブ&lt;/h3&gt;

&lt;p&gt;リクエスト／レスポンスに応じてプロキシされたリクエストのレスポンスも圧縮するかを設定します。&lt;br /&gt;
つまり、プロキシから来たリクエストの結果(レスポンス)を圧縮するかどうかを設定します。&lt;/p&gt;

&lt;p&gt;パラメータは複数指定が可能です。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_proxied off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any ...;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_proxied off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nginxはリバースプロキシ機能を持っており、そこで圧縮したレスポンスを内部ネットワークに応答することもできます。&lt;br /&gt;
その場合は既に圧縮したレスポンスに関しては何もする必要がありません。&lt;/p&gt;

&lt;p&gt;プロキシ経由かどうかは&lt;code class=&quot;highlighter-rouge&quot;&gt;Via&lt;/code&gt;ヘッダーフィールドの存在で確認できます。&lt;/p&gt;

&lt;p&gt;パラメータが多いので表にします。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;パラメータ&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;off&lt;/td&gt;
      &lt;td&gt;プロキシされたリクエストのレスポンスの圧縮を無効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;expired&lt;/td&gt;
      &lt;td&gt;期限切れ&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;があれば有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-cache&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;no-cache&lt;/code&gt;があれば有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-store&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;no-store&lt;/code&gt;があれば有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;があれば有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no_last_modified&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt;が&lt;strong&gt;なければ&lt;/strong&gt;有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no_etag&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt;が&lt;strong&gt;なければ&lt;/strong&gt;有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;auth&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt;があれば有効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;any&lt;/td&gt;
      &lt;td&gt;プロキシされたリクエストのレスポンスの圧縮を有効&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;複数指定は、スペース区切りで設定します。&lt;/p&gt;

&lt;p&gt;今回はリバースプロキシは介さないのでデフォルト(&lt;code class=&quot;highlighter-rouge&quot;&gt;off&lt;/code&gt;)のままにします。&lt;/p&gt;

&lt;h3 id=&quot;gzip_typesディレクティブ&quot;&gt;gzip_typesディレクティブ&lt;/h3&gt;

&lt;p&gt;圧縮対象となるMIMEタイプを設定します。&lt;br /&gt;
なお&lt;code class=&quot;highlighter-rouge&quot;&gt;text/html&lt;/code&gt;は常に圧縮されます。また &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;を指定すると全てのMIMEに一致します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_types mime-type ...;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_types text/html;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回は、CSSやJavascript、JSONも圧縮対象にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  gzip_types text/css text/javascript application/json;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gzip_varyディレクティブ&quot;&gt;gzip_varyディレクティブ&lt;/h3&gt;
&lt;p&gt;圧縮ディレクティブ(&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_static&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gunzip&lt;/code&gt;)が有効であれば、
&lt;code class=&quot;highlighter-rouge&quot;&gt;Vary: Accept-Encoding&lt;/code&gt;ヘッダの挿入の有無を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_vary on | off;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip_vary off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これは圧縮可能と不可能の２クライアントから同一リソースにアクセスがあった場合に起きる問題の回避として使います。
詳しくは&lt;a href=&quot;https://qiita.com/cubicdaiya/items/09c8f23891bfc07b14d3&quot;&gt;こちらの記事&lt;/a&gt;が参考になります。&lt;/p&gt;

&lt;h2 id=&quot;serverコンテキスト&quot;&gt;serverコンテキスト&lt;/h2&gt;
&lt;p&gt;バーチャルサーバの設定をします。&lt;/p&gt;

&lt;p&gt;少し長いですが&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.cnf.default&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt;を抜粋したものが下記です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen       8080;
  server_name  localhost;

  #charset koi8-r;

  #access_log  logs/host.access.log  main;

  location / {
      root   html;
      index  index.html index.htm;
  }

  #error_page  404              /404.html;

  # redirect server error pages to the static page /50x.html
  #
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
      root   html;
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  #location ~ \.php$ {
  #    proxy_pass   http://127.0.0.1;
  #}

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht {
  #    deny  all;
  #}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;listenディレクティブ&quot;&gt;listenディレクティブ&lt;/h3&gt;
&lt;p&gt;サーバがリクエストを受け付けるか設定します。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;listen address
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen address[:port] [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number]
 [fastopen=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter]
 [deferred] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;listen port
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen port [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number] [fastopen=number]
 [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind]
 [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;listen unix:path
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen unix:path [default_server] [ssl] [http2 | spdy] [proxy_protocol] [backlog=number]
[rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [bind]
[so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;listen *:80 | *:8000;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;パターンは大きく3つに分かれており、オプションも膨大です。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;パラメータ&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;address&lt;/td&gt;
      &lt;td&gt;IPまたはホストネーム&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:port&lt;/td&gt;
      &lt;td&gt;ポート番号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default_server&lt;/td&gt;
      &lt;td&gt;どのserverにもマッチしない場合はこのオプションがついたサーバに振り向けます&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ssl&lt;/td&gt;
      &lt;td&gt;SSL接続必須指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;http2&lt;/td&gt;
      &lt;td&gt;HTTP/2接続 spdyと同時指定はできません&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spdy&lt;/td&gt;
      &lt;td&gt;SPDY接続 http2と同時指定はできません&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;proxy_protocol&lt;/td&gt;
      &lt;td&gt;PROXY protocol必須指定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;setfib=number&lt;/td&gt;
      &lt;td&gt;FIB(SO_SETFIB)を設定,FreeBSD限定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fastopen=number&lt;/td&gt;
      &lt;td&gt;TCP Fast Openを有効にし、3ウェイハンドシェイク未完了の接続キューの最大長&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;backlog=number&lt;/td&gt;
      &lt;td&gt;保留中接続キューの最大長.接続要求が最大長超えると&lt;code class=&quot;highlighter-rouge&quot;&gt;ECONNREFUSED&lt;/code&gt;エラーが起きる.FreeBSD,DragonFly BSD, macOSは-1、その他は511.詳細は&lt;a href=&quot;https://kazuhira-r.hatenablog.com/entry/2019/07/10/015733&quot;&gt;こちら&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rcvbuf=size&lt;/td&gt;
      &lt;td&gt;受信バッファサイズ(&lt;code class=&quot;highlighter-rouge&quot;&gt;SO_RCVBUF&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sndbuf=size&lt;/td&gt;
      &lt;td&gt;送信バッファサイズ(&lt;code class=&quot;highlighter-rouge&quot;&gt;SO_SNDBUF&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;accept_filter=filter&lt;/td&gt;
      &lt;td&gt;受信フィルタ(SO_ACCEPTFILTER)の名前。FreeBSDとNetBSD5.0+のみ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;deferred&lt;/td&gt;
      &lt;td&gt;Linuxで遅延accept()&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_DEFER_ACCEPT&lt;/code&gt;を使用有無.詳細は&lt;a href=&quot;https://blog.yuuk.io/entry/2013/07/21/022859&quot;&gt;こちら&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bind&lt;/td&gt;
      &lt;td&gt;指定された&lt;code class=&quot;highlighter-rouge&quot;&gt;address:port&lt;/code&gt;ペアに個別で&lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt;する。hoge:80,fuga:80,&lt;em&gt;:80の3つlistenがあったら,&lt;/em&gt;:80にだけ&lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt;する。注意点は接続受付先アドレスの決定に&lt;code class=&quot;highlighter-rouge&quot;&gt;getsockname()&lt;/code&gt;がが使われる。&lt;code class=&quot;highlighter-rouge&quot;&gt;setfib&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;backlog&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;rcvbuf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sndbuf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accept_fileter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;deferred&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ipv6only&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;so_keepalive&lt;/code&gt;が使われたら、渡された&lt;code class=&quot;highlighter-rouge&quot;&gt;address:port&lt;/code&gt;は個々に常に&lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt;する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ipv6only=&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IPV6_V6ONLY&lt;/code&gt;を経由してワイルドカードアドレス[::]でlistenしてるIPv6ソケットがIPv6接続だけかIPv4接続の両方を受け付けるかを決める。パラメータは&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;off&lt;/code&gt;でデフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reuseport&lt;/td&gt;
      &lt;td&gt;カーネルが接続をワーカープロセス間に分散して、各ワーカープロセスに&lt;code class=&quot;highlighter-rouge&quot;&gt;SO_REUSEPORT&lt;/code&gt;を使って個々のlistenソケットを生成指示する。Linux3.9+とDragonFly BSDのみ。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]]&lt;/td&gt;
      &lt;td&gt;TCP keepaliveの挙動設定する。パラメタ省略するとOS値が設定される。&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;だと&lt;code class=&quot;highlighter-rouge&quot;&gt;SO_KEEPALIVE&lt;/code&gt;がソケットに対し&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;になる。 &lt;code class=&quot;highlighter-rouge&quot;&gt;off&lt;/code&gt;だと&lt;code class=&quot;highlighter-rouge&quot;&gt;SO_KEEPALIVE&lt;/code&gt;に対し&lt;code class=&quot;highlighter-rouge&quot;&gt;off&lt;/code&gt;となる。Linux2.4+, NetBSD 5+ FreeBSD 9.0-Stableでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_KEEPIDLE&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_KEEPINTVL&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;TCP_KEEPCNT&lt;/code&gt;を使ってkeepaliveをサポートする。省略した場合はOSのデフォルト値が使われる。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;今回はその他のパラメータは今回は使わず、3030ポートを開こうと思います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 3030;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;もし既にポートが使われている場合&lt;/strong&gt;
次のエラーが出力されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;emerg] &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; to 127.0.0.1:8080 failed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;48: Address already &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;use&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
nginx: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;emerg] &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::1]:8080 failed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;48: Address already &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;use&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;server_nameディレクティブ&quot;&gt;server_nameディレクティブ&lt;/h3&gt;
&lt;p&gt;バーチャルサーバの名前を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;server_name name ...;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;server_name &quot;&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;ワイルドカード&quot;&gt;ワイルドカード&lt;/h4&gt;
&lt;p&gt;サーバ名には最初と最後の名前にワイルドカード(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)が使えます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server_name example.com *.example.com api.example.*;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;*.example.com&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;.example.com&lt;/code&gt;に結合できます。&lt;/p&gt;

&lt;h4 id=&quot;正規表現&quot;&gt;正規表現&lt;/h4&gt;
&lt;p&gt;名前の前にチルダ(&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;)をつけて&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;servername www.exmaple.com ~^www\d+\.example\.com$;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように正規表現を使えます。&lt;/p&gt;

&lt;p&gt;またキャプチャも使えます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  server_name ~^(www\.)?(.+)$;
  location / {
    root /sites/$2;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;名前付きキャプチャは変数として使えます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  server_name ~^(www\.)?(?&amp;lt;domain&amp;gt;.+)$;

  location / {
    root /sites/$domain;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;$hostname&lt;/code&gt;にはマシンのホスト名が入ります。&lt;/p&gt;

&lt;p&gt;今回はローカルホストにサーバを立てるのでlocalhostを使います。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  server_name localhost;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;charsetディレクティブ&quot;&gt;charsetディレクティブ&lt;/h3&gt;
&lt;p&gt;指定した文字セットを&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;レスポンスヘッダフィールドに追加します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;charset charset | off;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;charset off;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意点：&lt;code class=&quot;highlighter-rouge&quot;&gt;source_charset&lt;/code&gt; と違うと変換が発生する。&lt;/p&gt;

&lt;p&gt;今回は無難に&lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;で行きます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  charset utf-8;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;access_logディレクティブ-1&quot;&gt;access_logディレクティブ&lt;/h3&gt;

&lt;p&gt;このディレクティブは前述しているため基本説明は省略します。&lt;/p&gt;

&lt;p&gt;追記としては、このサーバに対するアクセスのみログが記録されます。&lt;/p&gt;

&lt;p&gt;今回はこのサーバだけのアクセスログを残しておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  access_log /usr/local/var/log/nginx/localhost.access.log  main;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;formatは既に定義済みの&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;を使います。&lt;/p&gt;

&lt;h4 id=&quot;open-2-no-such-file-or-directory-が出る場合&quot;&gt;open() 2: No such file or directory が出る場合&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx: [emerg] open() &quot;/usr/local/var/log/enginx/localhost.access.log&quot; failed (2: No such file or directory)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;よく見ると分かりますが、パスが間違ってます。&lt;/p&gt;

&lt;h3 id=&quot;error_pageディレクティブ&quot;&gt;error_pageディレクティブ&lt;/h3&gt;

&lt;p&gt;エラーページとエラーコードのマッピングを設定します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt;には変数を使えます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;error_page code ... [=[response]] uri;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例えば404と500番台でエラーページを用意してるなら&lt;/p&gt;

&lt;h4 id=&quot;getに変更してリダイレクト&quot;&gt;GETに変更してリダイレクト&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と設定すると、ステータスコードと一致するページにHEAD以外のリクエストを全て&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;に変更して、内部的にリダイレクトします。&lt;/p&gt;

&lt;h4 id=&quot;応答コードの変更&quot;&gt;応答コードの変更&lt;/h4&gt;
&lt;p&gt;例えば404ではなく200にしてEmtpy pageを出したいなら&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  error_page 404 = 200 /empty.html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように、応答コードを変更できます。&lt;/p&gt;

&lt;h4 id=&quot;応答ページを別サーバに渡す&quot;&gt;応答ページを別サーバに渡す&lt;/h4&gt;
&lt;p&gt;例えばPHPなどで404を返すページがある場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  error_page 404 = 404php;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように設定できます。&lt;/p&gt;

&lt;h4 id=&quot;別locationコンテキストにエラー処理を渡す&quot;&gt;別locationコンテキストにエラー処理を渡す&lt;/h4&gt;
&lt;p&gt;内部リダイレクトでURIとメソッド変更させない場合は&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  location / {
    error_page 404 = @fallback;
  }
  location @fallback {
    proxy_pass http://backend;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように別locationに移すことができます。&lt;/p&gt;

&lt;p&gt;今回は404は専用ページを用意する設定にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  error_page 404 /404.html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;locationコンテキスト&quot;&gt;locationコンテキスト&lt;/h2&gt;

&lt;p&gt;リクエストURIに応じて構成を設定する。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;location [ = | ~ | ~* | ^~ ] uri { ... }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;location @name {... }&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;“%XX”形式エンコードされてテキストはデコード&lt;/li&gt;
  &lt;li&gt;相対パス&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt;の参照は解決&lt;/li&gt;
  &lt;li&gt;２つ以上続くスラッシュ&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;は1つに差し替え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その後、正規化されたURIに対してマッチングが実施される。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プリフィック文字&lt;/strong&gt;と&lt;strong&gt;正規表現&lt;/strong&gt; の２つで定義できる&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正規表現のオプション&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先頭文字が&lt;code class=&quot;highlighter-rouge&quot;&gt;~*&lt;/code&gt;修飾子なら大文字小文字を区別しないマッチング&lt;/li&gt;
  &lt;li&gt;先頭文字が&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;修飾子なら大文字小文字を区別するマッチング&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;locationの検索フロー&quot;&gt;locationの検索フロー&lt;/h3&gt;

&lt;p&gt;指定されたリクエストに合致するlocationを見つけるために、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;nginxはまずプリフィックス文字列を使って定義されるlcoationを調べます&lt;/li&gt;
  &lt;li&gt;それらの中で、一番長くマッチするプリフィックスlocationが選択され記憶されます
    &lt;ul&gt;
      &lt;li&gt;記憶したプリフィックスlocationに&lt;code class=&quot;highlighter-rouge&quot;&gt;^~&lt;/code&gt;修飾子があれば以降の正規表現チェックはしません。&lt;/li&gt;
      &lt;li&gt;完全一致&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;修飾子で一致したら検索は終了します&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;設定ファイルの中に現れる順番で正規表現を調べます
    &lt;ol&gt;
      &lt;li&gt;正規表現の検索は一番最初にマッチした時点で終了します&lt;/li&gt;
      &lt;li&gt;正規表現にマッチしなかったら、前に記憶されたプリフィックスlocationが使われます&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完全一致は指定URIのアクセスが高頻度の場合に適用すると高速化します。&lt;/p&gt;

&lt;h3 id=&quot;検索フロー例&quot;&gt;検索フロー例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = / {
  # A
}
location / {
  # B
}
location /documents/ {
  # C
}
location ^= /images/ {
  # D
}
location ~* \.(gif|jpeg|jpg|png)$ {
  # E
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;というlocationがあった場合、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; はAにマッチ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/index.html&lt;/code&gt; はBにマッチ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/documents/document.html&lt;/code&gt; はCにマッチ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/images/1.gif&lt;/code&gt; はDにマッチ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/documents/1.jpg&lt;/code&gt; はEにマッチ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というマッチング結果となります。&lt;/p&gt;

&lt;h3 id=&quot;名前付きlocation&quot;&gt;名前付きlocation&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;プレフィックスをつけることで名前付きとして定義できます。&lt;br /&gt;
リクエストのリダイレクトに使います。&lt;/p&gt;

&lt;h3 id=&quot;パーマネントリダイレクト&quot;&gt;パーマネントリダイレクト&lt;/h3&gt;
&lt;p&gt;locationが末尾が&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;で終わる定義で、設定が &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fastcgi_pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi_pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scgi_pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;memcached_pass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc_pass&lt;/code&gt;の1つで処理された場合は、特別処理がされます。
同じURIだが最後の&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;がないリクエストの応答は、&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;がリクエストのURIに追加されて301として返される。&lt;/p&gt;

&lt;h3 id=&quot;rootディレクティブ&quot;&gt;rootディレクティブ&lt;/h3&gt;

&lt;p&gt;ルートディレクトリを設定する。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;root path;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;root html;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例えば次の設定の場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /i/ {
  root /data/wwww;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/i/top.png&lt;/code&gt;リクエストは、&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/www/i/top.png&lt;/code&gt;が応答します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; には &lt;code class=&quot;highlighter-rouge&quot;&gt;$document_root&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;$realpath_root&lt;/code&gt;を除く変数が使えます。&lt;/p&gt;

&lt;p&gt;ルートディレクトリの値にURIを追加するだけでファイルパスが構築されます。
URIを変更する場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;ディレクティブを使います。&lt;/p&gt;

&lt;p&gt;今回はトップページ、記事ページ、画像の3locationを用意します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = / {
  root /usr/local/var/www;
}
location /articles/ {
  root /usr/local/var/www;
}
location ~* \.(gif|jpg|jpeg|png)$ {
  root /usr/local/var/www/images;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aliasディレクティブ&quot;&gt;aliasディレクティブ&lt;/h3&gt;
&lt;p&gt;指定locationの置き換えを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;alias path;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例えば次の設定の場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /i/ {
  alias /data/www/images/;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/i/top.png&lt;/code&gt;リクエストは、&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/www/images/top.png&lt;/code&gt;が応答します。&lt;/p&gt;

&lt;p&gt;もしlocationがディレクティブの最後の場所に一致する場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /images/ {
  alias /data/www/images/;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;ディレクティブを使ったほうがいいです。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /images/ {
  root /data/www;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indexディレクティブ&quot;&gt;indexディレクティブ&lt;/h3&gt;

&lt;p&gt;indexとして使われるファイル定義を設定します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;には変数を使えます。
ファイルは設定順でチェックします。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;index file ...;&lt;/code&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;index index.html;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意点:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;を使うと内部リダイレクトが発生し、想定外のlocationで処理されることがあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = / {
  index index.html;
}
location / {
  # B
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; リクエストは&lt;code class=&quot;highlighter-rouge&quot;&gt;/index.html&lt;/code&gt;として、2番目のlocation(B)で処理されます。&lt;/p&gt;

&lt;p&gt;今回はトップページのみ指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = / {
  root /usr/local/var/www;
  index index.html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;denyディレクティブ&quot;&gt;denyディレクティブ&lt;/h3&gt;
&lt;p&gt;指定ネットワークやアドレスのアクエス拒否を設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;deny address | CIDR | unix: | all;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unix:&lt;/code&gt;の場合は全てのUNIXドメインソケットのアクセス拒否になります。&lt;/p&gt;

&lt;p&gt;特定のファイルに対してアクセス拒否したい場合などに使います。&lt;br /&gt;
今回は特に拒否したいファイルなどはないため設定しません。&lt;/p&gt;

&lt;h2 id=&quot;出来上がった設定ファイルnginxconf&quot;&gt;出来上がった設定ファイル(nginx.conf)&lt;/h2&gt;

&lt;p&gt;この記事を通して&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;から必要なディレクティブのみを設定したものになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_processes  4;

error_log /usr/local/var/log/nginx/error.log error;

worker_rlimit_nofile 32;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                    '$status $body_bytes_sent &quot;$http_referer&quot; '
                    '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

  access_log /usr/local/var/log/nginx/access.log main;

  sendfile on;
  tcp_nopush on;

  keepalive_timeout 60;

  gzip on;
  gzip_min_length 1024;
  gzip_types text/css text/javascript application/json;


  server {
    listen 8080;
    server_name localhost;

    charset utf-8;

    access_log /usr/local/var/log/nginx/localhost.access.log  main;

    error_page 404 /404.html;

    location = / {
      root /usr/local/var/www;
    }

    location /articles/ {
      root /usr/local/var/www;
    }

    location ~* \.(gif|jpg|jpeg|png)$ {
      root /usr/local/var/www/images;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ファイル配置図&quot;&gt;ファイル配置図&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;/usr/local/var/www&lt;/em&gt; 配下は次のように配置してます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ tree
.
├── 404.html
├── articles
│   └── 1.html
├── images
│   └── nginx.png
└── index.html
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;にアクセスすると &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;が返ってきます。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/articles/1.html&lt;/code&gt; にアクセスすると &lt;code class=&quot;highlighter-rouge&quot;&gt;1.html&lt;/code&gt; が返ってきます。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/nginx.png&lt;/code&gt;にアクセスすると &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.png&lt;/code&gt;が返ってきます。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/hoge&lt;/code&gt;にアクセスすると &lt;code class=&quot;highlighter-rouge&quot;&gt;404.html&lt;/code&gt;が返ってきます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macにnginxでゼロから丁寧に簡易なhttpサーバを立てる&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/h2&gt;

&lt;p&gt;今回は、とても単純なブログサーバをnginxで立ち上げました。前回と違い結構なボリュームでした。&lt;br /&gt;
一つずつディレクティブを確認したためこのボリュームになりました。&lt;br /&gt;
しかしこの部分がnginxでもっとも基礎の中でも重要な基礎となります。&lt;br /&gt;
ここを理解することで次の記事「&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step3-on-mac&quot;&gt;Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる&lt;/a&gt;&lt;/span&gt;
」へと繋げられます。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ2回目です。 [so_keepalive=on off [keepidle]:[keepintvl]:[keepcnt]];</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-22-web-nginx-getting-started-step2-on-mac/0.png" /></entry><entry><title type="html">lsofでプロセスが開いてるポートやファイルを確認する方法</title><link href="https://blog.mothule.com/tools/lsof/tools-lsof-basic" rel="alternate" type="text/html" title="lsofでプロセスが開いてるポートやファイルを確認する方法" /><published>2020-02-21T00:00:00+09:00</published><updated>2020-02-21T16:42:46+09:00</updated><id>https://blog.mothule.com/tools/lsof/tools-lsof-basic</id><content type="html" xml:base="https://blog.mothule.com/tools/lsof/tools-lsof-basic">&lt;p&gt;lsofを使ってプロセスが使っているポートを確認したり、指定したファイルをどのプロセスが開いているかを確認したり、指定プロセスが開いてるファイルを確認する方法をまとめました。&lt;/p&gt;

&lt;h2 id=&quot;lsofとは&quot;&gt;lsofとは？&lt;/h2&gt;
&lt;p&gt;lsof(for &lt;strong&gt;L&lt;/strong&gt;i&lt;strong&gt;S&lt;/strong&gt;t &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;F&lt;/strong&gt; ile)&lt;br /&gt;
UNIXプロセスに対して開かれているファイルに関する情報を表示します。&lt;/p&gt;

&lt;p&gt;ファイルは様々なタイプをサポートしてます。
↓ &lt;code class=&quot;highlighter-rouge&quot;&gt;man lsof&lt;/code&gt; より引用&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An open file may be a regular file, a directory, a block special file, a character special file, an executing text reference, a library, a stream or a net-
work file (Internet socket, NFS file or UNIX domain socket.)  A specific file or all the files in a file system may be selected by path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回はこの中の &lt;code class=&quot;highlighter-rouge&quot;&gt;a stream or a net-work file (Internet socket, NFS file or UNIX domain socket.)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;指定ポートを開いてるプロセスを確認&quot;&gt;指定ポートを開いてるプロセスを確認&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -i:[ポート番号]&lt;/code&gt;で確認できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsof &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;:4000,3000,8080 &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;LISTEN
nginx     97024 mothule    6u  IPv4 0x9e21b4cd1c187225      0t0  TCP &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8080 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
nginx     97025 mothule    6u  IPv4 0x9e21b4cd1c187225      0t0  TCP &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8080 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ruby      98474 mothule    9u  IPv4 0x9e21b4cd1e91bba5      0t0  TCP localhost:4000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i:&lt;/code&gt;の後にカンマ区切りでポート番号を指定します。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;でwell-known portを自動置換を無効化します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;grepで LISTENしてる理由は、CLOSEDが混じらせないため。&lt;/p&gt;

&lt;h2 id=&quot;指定ファイルを開いているプロセスを確認&quot;&gt;指定ファイルを開いているプロセスを確認&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof [path]&lt;/code&gt; で確認できます。&lt;/p&gt;

&lt;p&gt;例えばnginxのアクセスログを開いているプロセスを知りたい場合は&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsof /usr/local/var/log/nginx/access.log
COMMAND   PID    USER   FD   TYPE DEVICE SIZE/OFF       NODE NAME
nginx   97024 mothule    4w   REG    1,4    37496 8599850676 /usr/local/var/log/nginx/access.log
nginx   97025 mothule    4w   REG    1,4    37496 8599850676 /usr/local/var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;指定プロセスidpidが開いてるファイルを確認&quot;&gt;指定プロセスID(PID)が開いてるファイルを確認&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -p [PID]&lt;/code&gt;で確認できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsof &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 97024
COMMAND   PID    USER   FD   TYPE             DEVICE SIZE/OFF       NODE NAME
nginx   97024 mothule  cwd    DIR                1,4      512 8639303448 /Users/mothule/workspace/blog
nginx   97024 mothule  txt    REG                1,4  1180300 8665868994 /usr/local/Cellar/nginx/1.17.8/bin/nginx
nginx   97024 mothule  txt    REG                1,4   448496 8665868586 /usr/local/Cellar/pcre/8.44/lib/libpcre.1.dylib
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;指定プロセスが開いてるファイルを確認&quot;&gt;指定プロセスが開いてるファイルを確認&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -c [COMMAND]&lt;/code&gt;で確認できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsof &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; nginx
COMMAND   PID    USER   FD     TYPE             DEVICE SIZE/OFF       NODE NAME
nginx   97024 mothule  cwd      DIR                1,4      512 8639303448 /Users/mothule/workspace/blog
nginx   97024 mothule  txt      REG                1,4  1180300 8665868994 /usr/local/Cellar/nginx/1.17.8/bin/nginx
nginx   97024 mothule  txt      REG                1,4   448496 8665868586 /usr/local/Cellar/pcre/8.44/lib/libpcre.1.dylib
nginx   97024 mothule  txt      REG                1,4   485860 8665963276 /usr/local/Cellar/openssl@1.1/1.1.1d/lib/libssl.1.1.dylib
nginx   97024 mothule  txt      REG                1,4  2265596 8665963282 /usr/local/Cellar/openssl@1.1/1.1.1d/lib/libcrypto.1.1.dylib
nginx   97024 mothule  txt      REG                1,4   973824 8628277556 /usr/lib/dyld
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;コマンド&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -i:[ポート番号]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;指定ポートを開いてるプロセスを確認&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof [path]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;指定ファイルを開いているプロセスを確認&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -p [PID]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;指定プロセスID(PID)が開いてるファイルを確認&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -c [COMMAND]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;指定プロセスが開いてるファイルを確認&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも細かい指定はできるのですが、そこまで覚えなくとも上記だけでも便利です。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="lsof" /><summary type="html">lsofを使ってプロセスが使っているポートを確認したり、指定したファイルをどのプロセスが開いているかを確認したり、指定プロセスが開いてるファイルを確認する方法をまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-21-tools-lsof-basic.png" /></entry><entry><title type="html">Macでnginxをインストールして起動する</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step1-on-mac" rel="alternate" type="text/html" title="Macでnginxをインストールして起動する" /><published>2020-02-21T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-step1-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step1-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ初回です。
Webサーバとしての基礎知識、Macにnginxのインストール、基本構成や基本動作や設定など初期知識に必要な情報をまとめました。&lt;/p&gt;

&lt;h2 id=&quot;nginxはwebサーバ&quot;&gt;nginxはWebサーバ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/Nginx&quot;&gt;nginx - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginxとはフリーかつオープンソースなWebサーバである。
処理性能・高い並行性・メモリ使用量の小ささに焦点を当てて開発
HTTP, HTTPS, SMTP, POP3, IMAPのリバースプロキシの機能や、ロードバランサ、HTTPキャッシュなどの機能も持つ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;いろんな通信プロトコルや通信機能をカバーした &lt;strong&gt;Webサーバ&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;nginxは1つのマスタープロセスと複数のワーカープロセスで構成されてます。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;マスタープロセス：nginx.confを読み取り、ワーカープロセスを維持する。&lt;/li&gt;
  &lt;li&gt;ワーカープロセス：リクエスト処理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イベントベースのモデルとOS依存メカニズムを使用して、ワーカプロセス間でのリクエストを効率よく分散します。&lt;br /&gt;
ワーカープロセス数は構成ファイルで定義され、固定値か使用可能なCPUコア数に自動調整します。&lt;/p&gt;

&lt;h3 id=&quot;webサーバとは&quot;&gt;Webサーバとは？&lt;/h3&gt;
&lt;p&gt;粒度荒く単純に説明するなら&lt;br /&gt;
ブラウザに、静的コンテンツ(HTMLや画像など)を配信するソフトウェア＋ハードです。&lt;/p&gt;

&lt;p&gt;nginxを使うことでmacOSにポートを開き、ポートからのHTTPリクエストが来たらドキュメントルート内の一致するパス(ファイル)を返すようになります。&lt;br /&gt;
つまり静的コンテンツなブログのようなサービスを立ち上げることができるということです。&lt;/p&gt;

&lt;h3 id=&quot;ポートとは&quot;&gt;ポートとは？&lt;/h3&gt;
&lt;p&gt;噛み砕いて説明すると、コンピュータ通信における窓口です。&lt;br /&gt;
外のコンピュータはこの窓口を通して中のコンピュータに情報を送っています。&lt;br /&gt;
普段このポートは使わない場合は閉じてあります。
またポートには番号が割り振られており、ポートは655356個あります。
一部ポートには用途が予め決められています。
例えばブラウザが通信で使っているプロトコルHTTPは80番ポートです。&lt;/p&gt;

&lt;h3 id=&quot;ドキュメントルートとは&quot;&gt;ドキュメントルートとは？&lt;/h3&gt;
&lt;p&gt;Webサーバが外部に公開するためのディレクトリです。
このディレクトリにファイルを配置することで、パスと名前が一致していればWebサーバはブラウザに一致したファイルを返します。&lt;/p&gt;

&lt;h2 id=&quot;なぜmacでnginxなのか&quot;&gt;なぜMacでnginxなのか？&lt;/h2&gt;
&lt;p&gt;nginxはWebサーバであり、大抵のサーバOSはLinuxなので、nginxはLinux上で使うことが多いです。&lt;br /&gt;
MacとLinuxではコマンドやパス構成が異なることから、Mac上で得た知識を完全移行はできません。&lt;/p&gt;

&lt;p&gt;しかし、&lt;strong&gt;nginxの基礎理解のために慣れたOSを手元で試行錯誤することは全体像の理解を促進します。&lt;/strong&gt;&lt;br /&gt;
また、VirtualBoxなど仮想OSでLinuxをMac上で構築することもできますが、ブリッジなど仮想OS自体の知識が必要だったり純粋にnginxの把握には不向きだったりします。&lt;/p&gt;

&lt;p&gt;加えて、アプリサーバ開発中にWebサーバをnginxで動作確認したいケースもありえます。&lt;/p&gt;

&lt;h2 id=&quot;macにnginxをhomebrewでインストール&quot;&gt;Macにnginxをhomebrewでインストール&lt;/h2&gt;
&lt;p&gt;Macのパッケージ管理ソフトウェアHomebrewを使ってnginxをインストールします。&lt;/p&gt;

&lt;h3 id=&quot;homebrewでインストール&quot;&gt;homebrewでインストール&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginxが入ってるか確認&quot;&gt;nginxが入ってるか確認&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
nginx version: nginx/1.17.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginxを起動する&quot;&gt;nginxを起動する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launchd&lt;/code&gt;として起動すれば、ログイン時に自動でサービス起動します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew services start nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;単純起動は &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; を実行するだけです。&lt;/p&gt;

&lt;p&gt;どのポートを開いてるかは&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof&lt;/code&gt;で確認できます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsof &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; nginx &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;LISTEN
nginx   97024 mothule    6u    IPv4 0x9e21b4cd1c187225      0t0        TCP &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8080 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
nginx   97025 mothule    6u    IPv4 0x9e21b4cd1c187225      0t0        TCP &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8080 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この場合は8080が開いてるので、 http://localhost:8080 にアクセスすると表示されます。&lt;/p&gt;

&lt;p&gt;▼&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof&lt;/code&gt;に関しては以下のの記事で説明してます。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/tools/lsof/tools-lsof-basic&quot;&gt;lsofでプロセスが使用中のポートやファイルを確認&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;設定に問題なければ、デフォルトで用意されているhtmlページが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-21-web-nginx-getting-started-step1-on-mac/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-21-web-nginx-getting-started-step1-on-mac/1.png&quot; width=&quot;75%&quot; alt=&quot;nginx起動初期画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginxを停止する&quot;&gt;nginxを停止する&lt;/h3&gt;
&lt;p&gt;stopシグナルを送ります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nginx -s stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;その他シグナル&quot;&gt;その他シグナル&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;シグナル名&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;nginx -s stop&lt;/td&gt;
      &lt;td&gt;nginxを停止する。処理中のリクエスト待たずに終了する。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nginx -s quit&lt;/td&gt;
      &lt;td&gt;nginxを停止する。処理を待つ。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nginx -s reopen&lt;/td&gt;
      &lt;td&gt;ログファイルを開き直す&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nignx -s reload&lt;/td&gt;
      &lt;td&gt;nginxの設定ファイルを再読み込みする&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;nginxの構成&quot;&gt;nginxの構成&lt;/h2&gt;

&lt;p&gt;nginxの内部構成をざっくり分けると次のようになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;設定
    &lt;ul&gt;
      &lt;li&gt;/usr/local/etc/nginx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ドキュメントルート(ディレクトリ)&lt;/li&gt;
  &lt;li&gt;追加モジュール&lt;/li&gt;
  &lt;li&gt;ログ&lt;/li&gt;
  &lt;li&gt;ログローテーション&lt;/li&gt;
  &lt;li&gt;キャッシュ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nginxの設定ファイル&quot;&gt;nginxの設定ファイル&lt;/h2&gt;
&lt;p&gt;nginxには細かな動作やパラメータを設定するファイル（設定ファイル）があります。&lt;br /&gt;
設定ファイルを変更してnginxをチューニングできます。&lt;/p&gt;

&lt;h3 id=&quot;nginxの設定ファイルの場所&quot;&gt;nginxの設定ファイルの場所&lt;/h3&gt;
&lt;p&gt;Macの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;になります。
フォルダ上に&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;だけでなく&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内部でincludeされている設定ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;mime.types&lt;/code&gt;など)が配置されてあります。&lt;/p&gt;

&lt;h4 id=&quot;補足-brew-info-の-usrlocaletcnginxservers&quot;&gt;補足: brew info の /usr/local/etc/nginx/servers/&lt;/h4&gt;
&lt;p&gt;ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;brew info nginx&lt;/code&gt;で&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx will load all files &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/local/etc/nginx/servers/.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;とは記述されているのは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内で&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include servers/*;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;と記述されてるためです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダ内にファイルを置くことで設定ファイルとして読み込んでくれるということです。&lt;br /&gt;
なお、&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダは存在しないため自分で作成が必要です。&lt;/p&gt;

&lt;h3 id=&quot;ドキュメントルートの確認と変更&quot;&gt;ドキュメントルートの確認と変更&lt;/h3&gt;
&lt;p&gt;ドキュメントルートは&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内に定義されてます。&lt;/p&gt;

&lt;p&gt;↓は抜粋したものです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  server {
    location / {
      root  /usr/local/var/www;
      index index.html index.hml;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ポートの確認と変更&quot;&gt;ポートの確認と変更&lt;/h3&gt;

&lt;p&gt;現在のポート番号は &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内に定義されてます。&lt;/p&gt;

&lt;p&gt;↓は抜粋したものです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  server {
    listen  8080;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この場合は8080ポート番号を開いています。&lt;/p&gt;

&lt;h3 id=&quot;nginxの設定ファイルのテスト&quot;&gt;nginxの設定ファイルのテスト&lt;/h3&gt;

&lt;p&gt;設定ファイルの書き方に問題がないかテストする方法があります。
方法は２つあり、&lt;/p&gt;

&lt;h4 id=&quot;-nginx--tでテスト結果を表示&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ nginx -t&lt;/code&gt;でテスト結果を表示&lt;/h4&gt;
&lt;p&gt;設定ファイルをテストして結果を表示する。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;
nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok
nginx: configuration file /usr/local/etc/nginx/nginx.conf &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;is successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;-nginx--tで設定ファイルも表示&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ nginx -T&lt;/code&gt;で設定ファイルも表示&lt;/h4&gt;
&lt;p&gt;設定ファイルをテストして、設定ファイルinclude含め一つの設定ファイルとして表示する。&lt;/p&gt;

&lt;h2 id=&quot;nginxのログファイル&quot;&gt;nginxのログファイル&lt;/h2&gt;
&lt;p&gt;ログはアクセスログとエラーログの２酒類です。&lt;br /&gt;
ログの出力先は設定ファイルで変更できます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error_log  logs/error.log;

...

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                    '$status $body_bytes_sent &quot;$http_referer&quot; '
                    '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

  access_log  logs/accss.log main;

  ...

  server {
    access_log logs/host.access.log main;
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;httpブロック内のアクセスログでもいいですが、絞りたい場合は serverブロック内のアクセスログもあります。
log_formatを使わず直接access_log にformatを書いても大丈夫です。&lt;/p&gt;

&lt;p&gt;上記の構文を次の記事となる&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step2-on-mac&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/a&gt;&lt;/span&gt;
で説明します。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ初回です。 Webサーバとしての基礎知識、Macにnginxのインストール、基本構成や基本動作や設定など初期知識に必要な情報をまとめました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-21-web-nginx-getting-started-step1-on-mac/0.png" /></entry></feed>