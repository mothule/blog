<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2020-04-28T01:24:45+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">iOSエンジニアは動画を無料で簡単にSlackやGitHubに上げれる環境を構築しよう</title><link href="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg" rel="alternate" type="text/html" title="iOSエンジニアは動画を無料で簡単にSlackやGitHubに上げれる環境を構築しよう" /><published>2020-04-27T00:00:00+09:00</published><updated>2020-04-28T01:24:40+09:00</updated><id>https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg</id><content type="html" xml:base="https://blog.mothule.com/notebook/remote-work/notebook-remote-work-improve-communication-using-ffmpeg">&lt;p&gt;&lt;strong&gt;動画は最強の情報伝達手段です&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;iosエンジニアの動画欲しいあるある&quot;&gt;iOSエンジニアの動画欲しいあるある&lt;/h2&gt;

&lt;p&gt;iOSエンジニアがXcodeを使ってxibやstoryboard、SwiftUIで画面作成をしたら次のケースで作成画面を共有します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デザインレビュー
    &lt;ul&gt;
      &lt;li&gt;デザイナーや他エンジニア、POといった他の人に見てもらう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;説明
    &lt;ul&gt;
      &lt;li&gt;他の人に説明するときスマホ画面やPC画面をスクショしてSlackにアップロードする&lt;/li&gt;
      &lt;li&gt;GitHubのPRやIssueで変更画面や不具合発生中の画面を載せる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;進捗
    &lt;ul&gt;
      &lt;li&gt;お昼や打刻前に進捗として開発中の画面をSlackにアップロードする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このとき、静止画より動画の方がより確実に多くの情報を短時間に伝えられます。&lt;/p&gt;

&lt;p&gt;しかし、「動画を撮ろう！」と思っては見たものの…&lt;strong&gt;「無料」で「手軽」&lt;/strong&gt; に録画してアップロードできる環境でないと、有料だと諦めたり、面倒だとたまにしかアップロードしなくなります。&lt;/p&gt;

&lt;p&gt;この記事は、そんな手っ取り早く手軽にPC画面やiPhone画面を録画してアップロードしたいワガママiOSエンジニア向けに&lt;br /&gt;
&lt;strong&gt;「無料」で「簡単」にiPhone画面やPC画面を録画し、見る側もすぐに再生される軽量な動画の録画環境の構築方法について説明します。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;なおiOSエンジニア限らずAndroidエンジニアもフロントエンドWebエンジニアやデザイナーでも構築できます！&lt;/li&gt;
  &lt;li&gt;なおMac限定記事となります。Windows, Linux残念！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;軽量録画環境で必要なもの&quot;&gt;軽量録画環境で必要なもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac&lt;/li&gt;
  &lt;li&gt;QuickTime Player.app&lt;/li&gt;
  &lt;li&gt;ffmpeg&lt;/li&gt;
  &lt;li&gt;ひと手間かけたシェルスクリプト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac以外を簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerapp&quot;&gt;QuickTime Player.app&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;iPhone画面やPC画面の録画に使います&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Macに付属する動画再生プレイヤーです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.png&quot; width=&quot;240px&quot; alt=&quot;QuickTimePlayerのロゴ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;違います。&lt;strong&gt;録画機能を備えてます。&lt;/strong&gt; 「プレイヤー」って名前物凄く紛らわしいですね…&lt;/p&gt;

&lt;h3 id=&quot;ffmpeg&quot;&gt;FFmpeg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;動画の軽量化に使います&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wikipediaより引用&lt;/em&gt; した説明です。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;動画と音声を記録・変換・再生するためのフリーソフトウェアです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コマンドラインで使用できる動画と音声の変換として使います。&lt;br /&gt;
インストール方法は後で説明します。&lt;/p&gt;

&lt;h3 id=&quot;ひと手間かけたシェルスクリプト&quot;&gt;ひと手間かけたシェルスクリプト&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ちょっとした小さく単純なシェルスクリプトファイルです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これが無くても仕組みは動きますが、あるだけで後で説明する仕組みがスムーズになります。&lt;/p&gt;

&lt;p&gt;非エンジニアの方は「シェル」「スクリプト」って聞くと身構えるかもしれませんが、今回説明するシェルスクリプトは極めて単純で言ってしまえば中身を理解せずとも環境を構築できます。&lt;br /&gt;
iOSエンジニアの方でシェルについて分からない方は「&lt;span&gt;&lt;a href=&quot;/tools/shellscript/shellscript-basic-for-mobile-enginner&quot;&gt;iOSエンジニアが開発効率のために最低限知るべきシェルスクリプト入門&lt;/a&gt;&lt;/span&gt;
」を見て是非ともシェルを理解しましょう。&lt;/p&gt;

&lt;h2 id=&quot;大まかな仕組みについて&quot;&gt;大まかな仕組みについて&lt;/h2&gt;
&lt;p&gt;ここで環境構築前にざっくりと録画の仕組みについて説明します。&lt;br /&gt;
大まかな流れとしては次の通りになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;録画したいiPhoneをUSBで接続&lt;/li&gt;
  &lt;li&gt;QuickTime Playerで録画&lt;/li&gt;
  &lt;li&gt;FFmpegで動画を圧縮&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なんと、たった3工程で済みます。&lt;/p&gt;

&lt;h3 id=&quot;録画したいiphoneをusbで接続&quot;&gt;録画したいiPhoneをUSBで接続&lt;/h3&gt;

&lt;p&gt;キャプチャしたいiPhoneをUSBでMacに接続します。&lt;br /&gt;
PC画面の場合はこの作業は不要です。&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerで録画&quot;&gt;QuickTime Playerで録画&lt;/h3&gt;

&lt;p&gt;QuickTime Player.appを立ち上げて録画を開始します。&lt;br /&gt;
録画終了後は保存して完了です。&lt;/p&gt;

&lt;h3 id=&quot;ffmpegで動画を圧縮&quot;&gt;FFmpegで動画を圧縮&lt;/h3&gt;

&lt;p&gt;保存した動画ファイルは無圧縮で重いのでFFmpegで圧縮します。&lt;br /&gt;
このときにシェルスクリプトがあると大変便利です。&lt;/p&gt;

&lt;h2 id=&quot;手軽な動画環境を構築する&quot;&gt;手軽な動画環境を構築する&lt;/h2&gt;
&lt;p&gt;簡単な録画環境を構築するには、事前に仕掛けがあるから動きます。
&lt;strong&gt;今からその仕掛けを構築します。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FFmepgをインストール&lt;/li&gt;
  &lt;li&gt;シェルスクリプトを用意&lt;/li&gt;
  &lt;li&gt;シェルのパスを通す&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ffmepgをインストール&quot;&gt;FFmepgをインストール&lt;/h3&gt;
&lt;p&gt;FFmepgをHomebrewでインストールします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストールが完了したらインストールされたかを確認します。成功してたら次のような結果になるかと思います。(バージョンは時期で異なります）&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ffmpeg
ffmpeg version 3.3.4 Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000-2017 the FFmpeg developers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;もし異なる場合は下記の可能性を検討してみてください&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インストールが失敗した&lt;/li&gt;
  &lt;li&gt;homebrewでインストールしたコマンドのパスが通っていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;シェルスクリプトを用意&quot;&gt;シェルスクリプトを用意&lt;/h3&gt;

&lt;p&gt;このシェルスクリプトを説明する前に、前提情報を知っておく必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;QuickTime Playerは録画の保存を選ぶと、開かれる保存先は前回保存先になります。&lt;/li&gt;
  &lt;li&gt;保存のデフォルトファイル名は&lt;code class=&quot;highlighter-rouge&quot;&gt;名称未設定.mov&lt;/code&gt;です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このシェルスクリプトは次の動きをします。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;カレントディレクトリを決められた場所に移動します&lt;/li&gt;
  &lt;li&gt;FFmpegで「名称未設定.mov」を「dest.mp4」にMP4変換します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下記はその動きをするシェルスクリプトになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 名称未設定.mov dest.mp4 &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;たったこれだけです。非常に短く単純なシェルスクリプトです。&lt;br /&gt;
これをファイルとして適当な場所に保存してください。&lt;/p&gt;

&lt;p&gt;ここでは説明便宜上、下記パスに保存します。&lt;br /&gt;
「&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh/encode_movie.sh&lt;/code&gt;」&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt;フォルダが無い方は作っておいてください。&lt;/p&gt;

&lt;h4 id=&quot;chmodで実行可能にする&quot;&gt;chmodで実行可能にする&lt;/h4&gt;
&lt;p&gt;次に保存したシェルスクリプトを誰でも実行可能にするためにchmodで実行権限を編集します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 711 ~/sh/encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt;コマンドを使わず実行できます。これをしておかないとやはりスムーズとは言えません。&lt;/p&gt;

&lt;h4 id=&quot;分からない方向け-全部をまとめて用意するシェルコマンド&quot;&gt;分からない方向け: 全部をまとめて用意するシェルコマンド&lt;/h4&gt;

&lt;p&gt;次のシェルコマンドをターミナルにコピペして実行すれば先程説明した内容をまとめてやってくれます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#!/bin/bash&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd ~/Downloads&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ffmpeg -i 名称未設定.mov dest.mp4 -y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/sh/encode_movie.sh
chmod 711 ~/sh/encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このシェルコマンドらは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のホームディレクトリにshディレクトリを作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;ファイルを作成&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;の実行権限を変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をやってくれます。&lt;/p&gt;

&lt;h3 id=&quot;シェルのパスを通す&quot;&gt;シェルのパスを通す&lt;/h3&gt;
&lt;p&gt;用意したシェルスクリプトは、同じ名前と場所で保存していれば「&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh/encode_movie.sh&lt;/code&gt;」にあると思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;しかし、このままでは動画を作成後に、スクリプトを呼ぶためにわざわざパスを指定しなければいけません。&lt;/strong&gt;&lt;br /&gt;
それだと面倒なのでどこのディレクトリからでも呼べるようにパスを通します。&lt;/p&gt;

&lt;p&gt;PATH環境変数に&lt;code class=&quot;highlighter-rouge&quot;&gt;~/sh&lt;/code&gt;のパスを通すことで、ターミナル上からどこでも呼べるようになります。
ターミナルのデフォルトシェルがbashであれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;にPATH環境変数にパスを追加する処理を書きます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim ~/.bash_profile&lt;/code&gt;で次の処理を追加します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:~/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存終わったら&lt;code class=&quot;highlighter-rouge&quot;&gt;$ source ~/.bash_profile&lt;/code&gt;でリロードしておきましょう。&lt;/p&gt;

&lt;h2 id=&quot;実際に動画を撮る&quot;&gt;実際に動画を撮る&lt;/h2&gt;
&lt;p&gt;動画環境は整いました。それでは実際にiPhone画面の録画とMac画面の録画をしてみます。&lt;/p&gt;

&lt;h3 id=&quot;iphoneとmacをusbで接続&quot;&gt;iPhoneとMacをUSBで接続&lt;/h3&gt;

&lt;p&gt;録画したいiPhoneをMacにUSBで接続します。&lt;/p&gt;

&lt;p&gt;もしiPhoneをMacに初めて接続する場合は、次のような確認がiPhoneに表示されるので「信頼」を選んでください。&lt;br /&gt;
そうしないと、次工程のQuickTime Playerで端末を認識しなくなります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/2.jpg&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/2.jpg&quot; width=&quot;50%&quot; alt=&quot;iPhone信頼確認画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;quicktime-playerappを立ち上げる&quot;&gt;QuickTime Player.appを立ち上げる&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spotlight検索&lt;/code&gt;で「QuickTime」と入力すれば見つけられます。&lt;br /&gt;
起動したらメニューバーからファイル&amp;gt;新規ムービー収録を選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/3.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービー収録&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新規ムービー週力を選ぶと、Macやモニターに付属するカメラやiPhone画面の映像が画面に写ります。&lt;br /&gt;
もしiPhone画面になっていない場合は、ウィンドウ下の赤いボタンの右側を押すと撮影先が並ぶので、そこでiPhoneを選んでください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/4.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービーの映像ソース選択&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;赤いボタンを押すと、録画が始まります。録画を止める場合はもう一度赤いボタンを押すと終了します。&lt;br /&gt;
試しに自分のブログを閲覧してるSafariを録画してます。&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;/assets/videos/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/1.mp4&quot; width=&quot;100%&quot; height=&quot;400px&quot;&gt;うまく読み込めない場合はリロード&lt;/video&gt;

&lt;p&gt;録画が終わると、編集画面になります。&lt;strong&gt;この段階ではまだ保存されていないです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/5.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規ムービ収録編集画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面で保存(&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+s&lt;/code&gt;)を押すと保存先の選択が出ます。&lt;/p&gt;

&lt;p&gt;ここでファイル名はそのままの「&lt;strong&gt;名称未設定.mov&lt;/strong&gt;」にしてください。&lt;br /&gt;
&lt;strong&gt;ファイル名を変更してしまうと、次工程のシェルスクリプトが動きません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;また保存先（場所）は「&lt;strong&gt;ダウンロード&lt;/strong&gt;」にしてください。&lt;br /&gt;
&lt;strong&gt;ここも変更するとシェルスクリプトが動きません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;つまり保存先を&lt;strong&gt;Donwloads&lt;/strong&gt; に一度しておくことで、この部分は何も気にせず保存するだけになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/6.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayerファイル保存確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ターミナルでシェルスクリプトを実行する&quot;&gt;ターミナルでシェルスクリプトを実行する&lt;/h3&gt;

&lt;p&gt;ターミナルを開いて、保存してパスを通しておいたシェルスクリプトファイルを実行します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encode_movie.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;パスが通っているので、シェルスクリプトファイル名を指定するだけでいいです。&lt;br /&gt;
実行すると&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/dest.mp4&lt;/code&gt;にファイルが作成されます。&lt;/p&gt;

&lt;h2 id=&quot;なぜffmpegが必要なのか&quot;&gt;なぜFFmpegが必要なのか？&lt;/h2&gt;
&lt;p&gt;FFmpegやそれを実行するシェルスクリプトが必要な理由は、ファイルサイズにあります。&lt;/p&gt;

&lt;p&gt;下記は、QuickTime Playerで作成したファイル「名称未設定.mov」のファイルサイズと&lt;br /&gt;
FFmpegで圧縮したファイル「dest.mp4」のファイルサイズを比較した表です&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ファイル名&lt;/th&gt;
      &lt;th&gt;サイズ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;名称未設定.mov&lt;/td&gt;
      &lt;td&gt;28.3MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dest.mp4&lt;/td&gt;
      &lt;td&gt;2.1MB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;圧倒的に圧縮したことでサイズが小さくなりました。約1/14です。&lt;/p&gt;

&lt;h3 id=&quot;このファイルサイズが何に影響するのか&quot;&gt;このファイルサイズが何に影響するのか&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;アップロード時間とダウンロード時間に影響します&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;まずSlackにアップロードするのに時間がかかります。これはまだ自分だけにしか影響を与えません。&lt;br /&gt;
しかし、この動画を見る閲覧者はダウンロードに影響します。&lt;br /&gt;
Slackで再生ボタンを押してもなかなか再生されなかったり、ストリーミングダウロードが間に合わずカクつきます。&lt;br /&gt;
またファイルの大きすぎる動画ファイルはサムネが表示されないケースが多いです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;読み手のことや動画で伝えたい目的を考えると、閲覧側のストレスを抑えるのは自然なことです。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mac画面の録画も簡単&quot;&gt;Mac画面の録画も簡単&lt;/h3&gt;

&lt;p&gt;PC画面内のキャプチャも簡単です。
QuickTime Playerで「&lt;strong&gt;新規画面収録&lt;/strong&gt;」を選ぶだけです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/7.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規画面収録メニュー&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新規画面収録を選ぶとキャプチャ領域を選ぶ設定になります。
全画面まるごとと指定範囲の２タイプが選べます。&lt;/p&gt;

&lt;p&gt;この画像は指定範囲で選んば場合です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/8.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/8.png&quot; width=&quot;50%&quot; alt=&quot;QuickTimePlayer新規画面収録指定範囲&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;収録を開始&lt;/strong&gt; ボタンを押すことで録画開始になります。&lt;/p&gt;

&lt;p&gt;録画停止は、Macのツールバーにボタンがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/9.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/9.png&quot; width=&quot;50px&quot; alt=&quot;QuickTimePlayer新規画面収録停止ボタン&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もしくはTouch BarのあるMacの場合は、タッチバーにもボタンがあります。&lt;/p&gt;

&lt;h2 id=&quot;githubはmp4はアップロードできない&quot;&gt;GitHubはmp4はアップロードできない&lt;/h2&gt;
&lt;p&gt;先程説明したのはmp4の動画でした。しかしGitHubではIssueやPRではmp4の動画ファイルをアップロードすることができません。&lt;/p&gt;

&lt;p&gt;しかしgifは対応しています。そしてFFmpegはgif変換も対応しています。&lt;br /&gt;
なので今度は動画をgifに変換すれば良さそうです。&lt;/p&gt;

&lt;p&gt;そしてその方法は非常に簡単に実現できます。&lt;/p&gt;

&lt;h3 id=&quot;gifに変換するシェルスクリプト&quot;&gt;gifに変換するシェルスクリプト&lt;/h3&gt;
&lt;p&gt;このシェルスクリプトはQuickTime Playerで作成した動画ファイルに対し、　　
30FPSのサイズ320でgifファイルを作成します。&lt;/p&gt;

&lt;p&gt;このファイルには一度mp4に変換してからgifに変換しています。　　
そしてそのmp4に変換する処理は前述で説明したmp4に変換するシェルスクリプト「&lt;code class=&quot;highlighter-rouge&quot;&gt;encode_movie.sh&lt;/code&gt;」を呼んで変換しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Downloads

&lt;span class=&quot;nv&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30
&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;320
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;sh encode_movie.sh
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; dest.mp4 &lt;span class=&quot;nt&quot;&gt;-vf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scale&lt;/span&gt;:-1 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rate&lt;/span&gt; dest.gif &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;またこのスクリプトは引数でスケールを変更することができます。例えばスケールをデフォルトの倍にする場合は&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encode_gif.sh 640
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;とすることでスケールが320から640になります。&lt;/p&gt;

&lt;h2 id=&quot;iosエンジニアなら画面共有に慣れよう&quot;&gt;iOSエンジニアなら画面共有に慣れよう&lt;/h2&gt;
&lt;p&gt;iOSエンジニアは画面デザインがある限り、デザイナーやPOに画面の動きを見せることは非常に多いです。&lt;br /&gt;
Slackでやり取りを円滑にするために、動画で画面の動き共有が気軽にできる環境は非常にコミュニケーションを円滑に進められます。&lt;/p&gt;

&lt;p&gt;今回説明した内容は、一度環境を構築しておくだけでよくて、その後は特に弄らずともずっと使い続けられます。
しかもシェルスクリプトの内容自体も非常にシンプルで、長く見ても短く見てもコスパの良い環境です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="remote-work" /><category term="ffmpeg" /><category term="quicktime-player" /><category term="mac" /><summary type="html">動画は最強の情報伝達手段です</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-27-notebook-remote-work-improve-communication-using-ffmpeg/0.png" /></entry><entry><title type="html">crontabの書き方や確認、仕組みや落とし穴を理解する</title><link href="https://blog.mothule.com/tools/how-to-use-cron" rel="alternate" type="text/html" title="crontabの書き方や確認、仕組みや落とし穴を理解する" /><published>2020-04-26T00:00:00+09:00</published><updated>2020-04-26T07:55:19+09:00</updated><id>https://blog.mothule.com/tools/how-to-use-cron</id><content type="html" xml:base="https://blog.mothule.com/tools/how-to-use-cron">&lt;p&gt;定期実行といえばcron、それらスケジュールを制御するコマンドがcrontabです。&lt;/p&gt;

&lt;p&gt;でも、たまにしか触らないのでスケジュールの書き方をよく忘れます。&lt;br /&gt;
それどころかコマンドの使い方すら忘れるほど触れない時期が長いコマンドですね。&lt;br /&gt;
そして「cronは定期実行」というコマンドとしては比較的理解しやすい役割をもつため、きちんと仕組みについて理解せずとも使えたりします。&lt;/p&gt;

&lt;p&gt;この記事では書き方や今登録されているスケジュールの確認方法だけでなく、そもそもの動作仕組みや慣れてないとよくハマる落とし穴について、普段のメモ的な確認から基礎理解までまとめました。&lt;/p&gt;

&lt;h2 id=&quot;cronとcrontabの違い&quot;&gt;cronとcrontabの違い&lt;/h2&gt;

&lt;p&gt;cron、crontab、crontabファイルと似た言葉があるので、まずは超ざっくり用語整理します。&lt;/p&gt;

&lt;h3 id=&quot;cronとは&quot;&gt;cronとは？&lt;/h3&gt;
&lt;p&gt;crontabにスケジュールされたコマンドを実行する&lt;strong&gt;デーモン&lt;/strong&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;crontabとは&quot;&gt;crontabとは？&lt;/h3&gt;
&lt;p&gt;個々のユーザのcrontabファイルをメンテナンスする&lt;strong&gt;コマンド&lt;/strong&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルとは&quot;&gt;crontabファイルとは？&lt;/h3&gt;
&lt;p&gt;crontabコマンドによって作成された&lt;strong&gt;ファイル&lt;/strong&gt;です。&lt;br /&gt;
中身はcronが解釈可能な記法で記載されたスケジュールが並んでいます。&lt;/p&gt;

&lt;h4 id=&quot;crontabファイルを覗いてみる&quot;&gt;crontabファイルを覗いてみる&lt;/h4&gt;
&lt;p&gt;実際ファイルを覗いてみるとこんな感じです。&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;はコメント行です。&lt;br /&gt;
コメントに書いてるように&lt;strong&gt;このファイルを直接編集してはいけません。&lt;/strong&gt;&lt;br /&gt;
この場合では1つスケジュールが登録されています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.S21fXH5GxY installed on Sat Jun  2 23:14:39 2018)
# (Cron version -- $FreeBSD: src/usr.sbin/cron/crontab/crontab.c,v 1.24 2006/09/03 17:52:19 ru Exp $)
*/10 5-22 * * 1-5 ~/cron/sh/hoge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cronの動きを理解する&quot;&gt;cronの動きを理解する&lt;/h2&gt;
&lt;p&gt;crontabにスケジュールされたコマンドを実行するデーモンです。&lt;/p&gt;

&lt;h3 id=&quot;誰がcronを起動するのか&quot;&gt;誰がcronを起動するのか？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;デーモン起動は自動です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にファイル存在を検知すると起動します。&lt;br /&gt;
ユーザは手動でcronデーモンを起動する必要ありません。&lt;/p&gt;

&lt;h3 id=&quot;どこからcrontabファイルをロードするのか&quot;&gt;どこからcrontabファイルをロードするのか？&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;のアカウント名にちなんで名付けられたcrontabファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;から検索します。&lt;br /&gt;
見つけたcrontabはメモリ上にロードされます。&lt;br /&gt;
また異なる形式の&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;も検索対象です。&lt;/p&gt;

&lt;h3 id=&quot;指定時間にコマンド実行する仕組み&quot;&gt;指定時間にコマンド実行する仕組み&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;cronは毎分起動してます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cronは毎分起動し保存されてるcrontabを調べ現在の分で実行する必要があるか確認します。&lt;br /&gt;
コマンドを実行すると、出力はcrontab所有者またはMAILTO環境変数で指定されたユーザーにメールで送信されます。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルを反映する方法&quot;&gt;crontabファイルを反映する方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;crontabの変更は自動更新です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cronはcrontabが変更されたかどうかを毎分チェックしており、変更されていればcrontabファイルを再ロードします。&lt;br /&gt;
そのためにcrontabで変更してもcron再起動は不要です。&lt;/p&gt;

&lt;h2 id=&quot;crontabを理解する&quot;&gt;crontabを理解する&lt;/h2&gt;
&lt;p&gt;crontabコマンドはcrontabファイルを編集したり現在のスケジュールを確認するためのコマンドです。&lt;br /&gt;
crontabでスケジュール追加や変更することでcronが自動で起動またはリロードします。&lt;/p&gt;

&lt;h3 id=&quot;crontabのtabとは&quot;&gt;crontabのtabとは？&lt;/h3&gt;
&lt;p&gt;明確な情報はありませんが、tableのtabだと思います。&lt;br /&gt;
crontabは行毎が1情報となっており、何個もcronがスケジュールされていると表(table)のようになるからだと思います。&lt;/p&gt;

&lt;h3 id=&quot;crontabファイルの場所&quot;&gt;crontabファイルの場所&lt;/h3&gt;
&lt;p&gt;crontabファイルは、&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にあります。&lt;br /&gt;
ファイル名はユーザー名になっています。&lt;/p&gt;

&lt;p&gt;私のMac環境では&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/tabs&lt;/code&gt;内にありました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ls /usr/lib/cron/tabs
mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;crontabの形式&quot;&gt;crontabの形式&lt;/h3&gt;
&lt;p&gt;crontabファイルはフォーマットに従わなければいけません。&lt;br /&gt;
1行毎にスケジュールが並んでおり、1行で実行時間と実行内容が並びます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分 時 日 月 曜日 コマンド
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この順番で並んでいるなければいけません。&lt;/p&gt;

&lt;h2 id=&quot;crontabコマンドの使い方&quot;&gt;crontabコマンドの使い方&lt;/h2&gt;
&lt;p&gt;使用方法は次のようになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab [-u user] file
crontab [-u user] { -l | -r | -e }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;オプションそれぞれについて説明します。&lt;/p&gt;

&lt;h3 id=&quot;-u-ユーザ名の指定&quot;&gt;-u: ユーザ名の指定&lt;/h3&gt;

&lt;p&gt;crontabを調整するユーザを指定します。&lt;br /&gt;
&lt;strong&gt;未指定の場合は、実行中ユーザ&lt;/strong&gt; のcrontabを調整します。&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt;コマンド中にcrontabを実行するとどのユーザで実行するか不安定になるため、安全のために&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;オプションが必要です。&lt;/p&gt;

&lt;h3 id=&quot;-l-現在のスケジュールを確認&quot;&gt;-l: 現在のスケジュールを確認&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;オプションをつけることで、現在ロードされてるcrontabファイルを確認できます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 5-22 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1-5 ~/cron/sh/hoge.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-r-現在のスケジュールを全て削除&quot;&gt;-r: 現在のスケジュールを全て削除&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;オプションをつけることで、crontabファイルを削除します。&lt;/p&gt;

&lt;p&gt;次のシェルは実際にcrontabファイルを削除したあとに確認してます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 5-22 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1-5 ~/cron/sh/hoge.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
crontab: no crontab &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-e-現在のスケジュールを編集&quot;&gt;-e: 現在のスケジュールを編集&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;オプションをつけることで、スケジュールを編集します。&lt;br /&gt;
VISUAL環境変数またはEDITOR環境変数で指定されたエディタアプリで編集します。&lt;br /&gt;
エディタ終了すると自動的に適用されます。&lt;/p&gt;

&lt;p&gt;次のシェルは空の状態から新しくスケジュールを登録してます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
crontab: no crontab &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;mothule - using an empty one
crontab: installing new crontab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;注意-1&quot;&gt;注意&lt;/h4&gt;
&lt;p&gt;ファイルを直接編集する必要があるため、ファイルのリンクを解除して再生成するエディタは使えません。&lt;/p&gt;

&lt;h2 id=&quot;crontabの実行権限を制御する&quot;&gt;crontabの実行権限を制御する&lt;/h2&gt;
&lt;p&gt;crontabは定期実行のスケジュールを編集できるコマンドです。&lt;br /&gt;
実行されるコマンドによっては重要な処理だったりします。&lt;br /&gt;
誰でも編集できる状態だと、悪意なくとも人為的なミスが起きるリスクが存在し続けます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;このリスクヘッジとして、cron.allowとcron.denyを使うことでcrontabの実行権限を制御できます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.allow&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.deny&lt;/code&gt;ファイルはそれぞれ、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/cron.allow&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/cron/cron.deny&lt;/code&gt;として配置することで有効化されます。&lt;/p&gt;

&lt;p&gt;それぞれの中身は行ごとに1ユーザーの名前が並びます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.allow&lt;/code&gt;ファイルが存在する場合は、その中に記載されたユーザーのみが使えます。つまりホワイトリストですね。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.deny&lt;/code&gt;ファイルが存在する場合は、その中に記載されたユーザーは使えません。つまりブラックリストですね。&lt;/p&gt;

&lt;h2 id=&quot;crontabの書き方&quot;&gt;crontabの書き方&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;crontabの書き方は覚えにくいです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;特性上何度も書くこともないし、他コマンドなどで同じフォーマットがないためです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分 時 日 月 曜日 コマンド
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;日時の範囲&quot;&gt;日時の範囲&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;値範囲&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;分&lt;/td&gt;
      &lt;td&gt;0~59&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;時&lt;/td&gt;
      &lt;td&gt;0~23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;日&lt;/td&gt;
      &lt;td&gt;1~31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;月&lt;/td&gt;
      &lt;td&gt;1~12 or jan~dec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;曜日&lt;/td&gt;
      &lt;td&gt;0~7 or sun ~ sat&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;アスタリスクはどの値にも当てはまる&quot;&gt;アスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)はどの値にも当てはまる&lt;/h3&gt;
&lt;p&gt;例えば次のスケジュールは毎分実行されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;項目となる部分をアスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)とすることで、その項目はどの値であってもパスするようになります。&lt;/p&gt;

&lt;h3 id=&quot;-で区切ると複数時間を指定できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; で区切ると複数時間を指定できる&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;月曜と水曜のみ実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1,3 &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-で挟むと範囲時間を指定できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;で挟むと範囲時間を指定できる&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;9時〜22時のみ実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 9-22 * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-を--で割ると一定時間おきに実行する&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; で割ると一定時間おきに実行する&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3時間置きに実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/3 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;※ この記法は Linux だと動かないかも&lt;/p&gt;

&lt;h2 id=&quot;ケース別crontabの書き例&quot;&gt;ケース別crontabの書き例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1分毎に実行&lt;/li&gt;
  &lt;li&gt;15分毎に実行&lt;/li&gt;
  &lt;li&gt;1時間毎に実行&lt;/li&gt;
  &lt;li&gt;毎日21時に実行&lt;/li&gt;
  &lt;li&gt;毎週日曜の9時と21時に実行&lt;/li&gt;
  &lt;li&gt;12月の平日の9時から22時までの間10分毎に実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1分毎に実行&quot;&gt;1分毎に実行&lt;/h3&gt;

&lt;p&gt;これは特に説明不要ですね。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;15分毎に実行&quot;&gt;15分毎に実行&lt;/h3&gt;

&lt;p&gt;分を15で割ることで15分毎になります&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/15 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1時間毎に実行&quot;&gt;1時間毎に実行&lt;/h3&gt;

&lt;p&gt;分を固定値にすることで1時間毎になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;毎時0分に実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;毎時27分に実行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;27 * * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;毎日21時に実行&quot;&gt;毎日21時に実行&lt;/h3&gt;

&lt;p&gt;時を固定値にすることで毎日21時に実行します&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 21 * * * command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分をアスタリスク(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)だと21時00分〜21時59分の60回実行されてしまうので注意です。&lt;/p&gt;

&lt;h3 id=&quot;毎週日曜の9時と21時に実行&quot;&gt;毎週日曜の9時と21時に実行&lt;/h3&gt;

&lt;p&gt;曜日で日にちを縛って、カンマで9時と21時を指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 9,21 * * sun command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;曜日は数字でも英字でも指定できます。日曜日は数字だと0です&lt;/p&gt;

&lt;h3 id=&quot;9月の平日の9時から22時までの間10分毎に実行&quot;&gt;9月の平日の9時から22時までの間10分毎に実行&lt;/h3&gt;

&lt;p&gt;ハイフン(&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;)で月を範囲指定し、曜日で平日に制限します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/10 9-22 * 9 1-5 command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cronローカル活用術&quot;&gt;cronローカル活用術&lt;/h2&gt;

&lt;p&gt;cronはサーバーでバッチ処理のイメージが強いですが、個人のPCでも十分使いこなすことができます。&lt;br /&gt;
crontabに記載するコマンドはシェルコマンドであれば何でもいいので、外部シェルやRubyスクリプトを実行することもできます。&lt;/p&gt;

&lt;p&gt;例えば次のスケジュールをMac上のcrontabで登録すると毎分通知をすることができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * * * * /Users/mothule/.rbenv/shims/terminal-notifier -message '1分経過'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-04-26-how-to-use-cron/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-04-26-how-to-use-cron/1.png&quot; width=&quot;100%&quot; alt=&quot;terminal-notifierによるMac通知&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記例だと単純に1分毎に決められた文言が通知されるだけですが、&lt;strong&gt;Rubyスクリプトなどで25分/5分のポモドーロ・テクニックを使って通知させたりもできます。&lt;/strong&gt; また通信して変更があればslackに通知といったこともできます。&lt;/p&gt;

&lt;h2 id=&quot;cronの実行時エラーをログで確認する&quot;&gt;cronの実行時エラーをログで確認する&lt;/h2&gt;
&lt;p&gt;crontabに並ぶコマンドを実行してエラーが発生したらログとして残ります。&lt;/p&gt;

&lt;p&gt;ログが更新されたかどうかはターミナルを弄ってると通知されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$
You have mail in /var/mail/mothule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このパスがログとなっています。&lt;/p&gt;

&lt;h2 id=&quot;cronだとcommand-not-foundが出る場合&quot;&gt;cronだとcommand not foundが出る場合&lt;/h2&gt;
&lt;p&gt;ターミナル上では動くコマンドでもcron実行だと&lt;code class=&quot;highlighter-rouge&quot;&gt;command not found&lt;/code&gt;と出て実行されない場合があります。&lt;br /&gt;
cronが実行される環境では、コマンドへのPATHが通っていないことが考えられます。&lt;br /&gt;
シェルとターミナルの関係性を理解してると分かりますが、ターミナルが立ち上がるときにPATH設定など事前準備後にターミナルが立ち上がります。&lt;/p&gt;

&lt;p&gt;cronはターミナルを通していないため、PATH環境変数が異なります。&lt;/p&gt;

&lt;p&gt;この場合の解決方法は２つあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コマンドを絶対パスで指定&lt;/li&gt;
  &lt;li&gt;PATH環境変数を設定してコマンド実行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;コマンドを絶対パスで指定&quot;&gt;コマンドを絶対パスで指定&lt;/h3&gt;

&lt;p&gt;例えば前述した&lt;code class=&quot;highlighter-rouge&quot;&gt;terminal-notifier&lt;/code&gt;コマンドであれば、私の環境での絶対パスは&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/mothule/.rbenv/shims/terminal-notifier&lt;/code&gt;です。
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt;コマンドで調べることができます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which terminal-notifier
/Users/mothule/.rbenv/shims/terminal-notifier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;path環境変数を設定してコマンド実行&quot;&gt;PATH環境変数を設定してコマンド実行&lt;/h3&gt;

&lt;p&gt;シェルコマンドは環境変数を設定してから実行することが可能です。
この仕組を使って、crontabに設定するコマンドの手前に、PATHにコマンドのパスを追加することで、コマンドだけの実行でもパスが通っていることで実行可能となります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/Users/mothule/.rbenv/shims terminal-notifier &lt;span class=&quot;nt&quot;&gt;-message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;crontabで色々な理解を深める&quot;&gt;crontabで色々な理解を深める&lt;/h2&gt;
&lt;p&gt;ただ決まった時間に実行するスケジューラーでもcronの仕組みやcronとcrontabとの関係を知ることで、理解が深まります。
落とし穴を知ることで、シェルやターミナルも少し理解が進みます。&lt;/p&gt;

&lt;p&gt;以上がcrontabの記事でした。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="cron" /><summary type="html">定期実行といえばcron、それらスケジュールを制御するコマンドがcrontabです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-26-how-to-use-cron/0.png" /></entry><entry><title type="html">アジャイル開発を勘違いしてる企画職やPMがいる会社は苦労する</title><link href="https://blog.mothule.com/notebook/engineers-are-hating-they" rel="alternate" type="text/html" title="アジャイル開発を勘違いしてる企画職やPMがいる会社は苦労する" /><published>2020-04-22T00:00:00+09:00</published><updated>2020-04-22T02:22:15+09:00</updated><id>https://blog.mothule.com/notebook/engineers-are-hating-they</id><content type="html" xml:base="https://blog.mothule.com/notebook/engineers-are-hating-they">&lt;p&gt;Web界隈では開発手法はウォーターフォールからアジャイル開発へとシフトしていると思います。
従来のウォーターフォール方式では完成した頃には既に二番手三番手、既に古いと思われるほど求められるニーズの変化速度が速くなっているからです。&lt;/p&gt;

&lt;p&gt;この変化に柔軟に対応できる開発方法がアジャイル開発でした。正しく理解し運用することで安定した開発が可能になります。
また上位レイヤーのリーン開発との相性もよくリーン＋アジャイルでのフットワーク軽い開発スタイルは見かけます。
しかしこのアジャイル開発を浅く知って勘違いした企画職やPMがアジャイルでもウォーターフォールでもないどちらのメリットもない形に崩すのは典型例です&lt;/p&gt;

&lt;p&gt;この記事はアジャイル開発を5年近く続けて経験した苦労話です。&lt;/p&gt;

&lt;p&gt;なお私が経験したのはアジャイル開発はスクラム＋XPです。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発は細かくリリースしやすい&quot;&gt;アジャイル開発は細かくリリースしやすい&lt;/h2&gt;

&lt;p&gt;Webの特徴であるリリースを何回もできることを前提とした、数機能ずつリリースを繰り返すサイクルです。
実装する機能はスプリント初期に構築したプロダクトバックログのストーリーと呼ばれる機能をシナリオ化した物が並び順になっており、
1~2週間を1スプリント(SP)と称し1SP内にそのストーリーを対応して、SP終わりにプロダクトオーナー(PO)と呼ばれるプロダクト成長を責務とする人が
ストーリーを満たしているか受入判定を行います。そしてSP頭になればまた次の優先度のストーリーを進めます。
プロダクトはSP毎に常にリリース可能な状態となっていなければならず、それにより期限が予定より短くなったり開発が遅れたりすることで優先度の低い未対応ストーリーはそのままで
リリースすることでプロダクトにとって最も重要な順に対応された機能がユーザーに届けられます。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発が非開発者に勘違いされがちなこと&quot;&gt;アジャイル開発が非開発者に勘違いされがちなこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;柔軟に仕様を変更できる&lt;/li&gt;
  &lt;li&gt;細かい仕様書が不要&lt;/li&gt;
  &lt;li&gt;開発やデザイナーだけで開発が回る&lt;/li&gt;
  &lt;li&gt;人員増やせばより開発が加速・安定する&lt;/li&gt;
  &lt;li&gt;ウォーターフォールより早い&lt;/li&gt;
  &lt;li&gt;立て続けに機能追加できる&lt;/li&gt;
  &lt;li&gt;プロダクトオーナーは若手でもできる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;柔軟に仕様を変更できる&quot;&gt;柔軟に仕様を変更できる&lt;/h3&gt;

&lt;p&gt;アジャイル開発の利点を概要部分だけ読んだ企画がよく勘違いします。
そんな夢物語があるわけないです。&lt;/p&gt;

&lt;p&gt;厳密には次の通りです&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SPレビューからSP計画までの間にプロダクトバックログ内のストーリー単位での未対応ストーリーの優先順位変更が可能&lt;/li&gt;
  &lt;li&gt;未対応ストーリーの仕様変更が可能&lt;/li&gt;
  &lt;li&gt;仕様変更したら関連するストーリー全てのポイントが再見積もりとなる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。
これをSP中にも関わらず対応中の機能の仕様をコロコロ変えたら、そのSPでは何もストーリーを達成できません。
本来はSPが走り始めたらストーリーを変えてはいけません。対応してよいストーリーはReadyを満たしたものだけになります。&lt;/p&gt;

&lt;p&gt;当たり前ですが、仕様変更するならした分だけ工数は伸びます。これはどの開発手法でも変わりません。&lt;/p&gt;

&lt;h3 id=&quot;細かい仕様書が不要&quot;&gt;細かい仕様書が不要&lt;/h3&gt;

&lt;p&gt;アジャイル開発では「資料よりも対話」を大事にしようと言われています。
しかしこれを口頭で全部伝えればOK、細かいことは伝えずOKと勘違いする企画がバカのように多いです。&lt;/p&gt;

&lt;p&gt;そもそもの前提が間違っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;複雑なビジネスロジックや重要機能は最適量の仕様書は必要です。&lt;/li&gt;
  &lt;li&gt;不要とは言っていません。ちょっとした確認や本当に細かい部分を資料ではなく口頭でやろう。という逆位置からのスタートです。&lt;/li&gt;
  &lt;li&gt;大前提としてPOが隣や向かいの席など超近接です&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを仕様も伝えず最も重要な機能も伝えず、違う企画だらけの島に席をおいて、しょっちゅう会議でいない無能POがいます。&lt;/p&gt;

&lt;p&gt;そんなテレパシーを超えたテクノロジーもビックリの情報疎通環境でできるんだと間違うお花畑企画がいます。&lt;/p&gt;

&lt;h3 id=&quot;開発やデザイナーだけで開発が回る&quot;&gt;開発やデザイナーだけで開発が回る&lt;/h3&gt;

&lt;p&gt;SP計画とSPレビューだけ顔出してSP中は一切無関係みたいな勘違いも見かけます。
スクラムの前提はPOもデザイナーも開発、SMもコアメンバーは一つのチームとして動きます。
それぞれがスペシャリストでなければいけません。&lt;/p&gt;

&lt;p&gt;それを勘違いして仕様バグ確認や優先順位や精査、プロダクトバックログの整理やユーザー分析などをせず、別の企画の決裁向けプレゼン資料を作ってるバカも多いです。
シニア企画に多いです。&lt;/p&gt;

&lt;h3 id=&quot;人員増やせばより開発が加速安定する&quot;&gt;人員増やせばより開発が加速・安定する&lt;/h3&gt;

&lt;p&gt;アジャイル開発はメンバー全員が「プロダクトを良くしたい」という同一姿勢が前提で、同じプロダクトに同じメンバーで続けることでチーム内成熟度が熟成し、手戻りや齟齬を減らしたり、付帯作業を抑えたり、プロダクトへの知識を蓄積することでベロシティを安定化させるなど、そのプロダクトにおいてそのチームが最も適切で先鋭となることがアジャイル開発をするチームにおいて重要なことです。&lt;/p&gt;

&lt;p&gt;これを1フェイズ終わったからといって、メンバーをコロコロ変えたり、ベロシティが低くて期限に間に合わないからと言ってメンバーを増員したりなどするのは悪手です。
アジャイル開発はPOとしてしっかり接していないと、プロダクトバックログやスプリントバックログのマネージメントコストが超非常に高いという事実をまず知らないです。&lt;/p&gt;

&lt;p&gt;これをチームとして参加せず数字だけ見てる人がよくやる典型的なリソースコントロールです。
机上の空論です。扱ってるリソースが機械だと思ってるのでしょう。&lt;/p&gt;

&lt;h3 id=&quot;ウォーターフォールより早い&quot;&gt;ウォーターフォールより早い&lt;/h3&gt;

&lt;p&gt;アジャイル開発はSP毎にリリースReadyにする、対応ストーリーのみを考慮した開発、先のストーリーは考えない（結局やらない可能性もあるから）といった特徴もあるため
開発に無駄があります。&lt;/p&gt;

&lt;p&gt;例で言うと、ウォーターフォールでは全部の仕様を策定し、それを確認した上でデータベースのテーブル設計を行います。
設計されたテーブルは機能をカバーできる設計となります。&lt;/p&gt;

&lt;p&gt;しかしアジャイル開発ではまずはフェイズ１などここまでをリリース対象としようと全部の仕様策定などはしません。
そのため目の前のストーリーを実現するには適切なテーブル設計でも、次SPや次フェイズのストーリーでは、カバーできない場合があります。
その場合はマイグレーション処理が発生します。&lt;/p&gt;

&lt;p&gt;これはテーブル設計に関わらずクラス設計にも同様の話です。予め可変性の高い要件が見えていればその部分を柔軟性高めの設計にします。
しかしそれが見えないため、ガチガチに組んだ設計部があとで実は多様性を持たせないといけないことになり、結局大きめのリファクタリング入ることはよくあります。&lt;/p&gt;

&lt;p&gt;実際見た目はそのままの言語やインフラなどテクノロジーリプレイ案件であれば、不安定で不透明な仕様や追加仕様は存在しないためアジャイル開発でやるメリットがありません。&lt;/p&gt;

&lt;p&gt;アジャイル開発はある程度速度を犠牲にした代わりに柔軟性を手に入れているのです。&lt;/p&gt;

&lt;h3 id=&quot;立て続けに機能追加できる&quot;&gt;立て続けに機能追加できる&lt;/h3&gt;

&lt;p&gt;半分間違ってます。&lt;/p&gt;

&lt;p&gt;技術負債を解消し続けなければ、ちょっとした変更でもリグレッションバグが発生しテスト工数がかさんだり、色々な箇所を読み解く必要があったり、気づけばアジャイルのメリットをなくなってしまいます。&lt;/p&gt;

&lt;p&gt;アジャイル開発はWebサービスなどプロダクトを継続成長させる開発に向いています。
しかしそれを支えるには負債解消計画も継続的に考慮されてなければいけません。&lt;/p&gt;

&lt;h3 id=&quot;プロダクトオーナーは若手でもできる&quot;&gt;プロダクトオーナーは若手でもできる&lt;/h3&gt;
&lt;p&gt;もう愚の骨頂です。
こう思ってる人は愚かにもほどがあります。&lt;/p&gt;

&lt;p&gt;プロダクトの責任を負ってる人が若手ができるわけがありません。
プロダクトはライバルや市場、ターゲット分析に加えトレンド機能などプラットフォーム知識、そして機能毎のKPI策定やそれらの追跡、問題点の分析と改善などプロダクト成長させ収益を得ることを一手に引き受けます。
そこらの2年目3年目が一人でこなせる訳ありません。もともとPOは10年目以上のベテランが推奨です。&lt;/p&gt;

&lt;p&gt;ちょっと考えれば分かることをいいように解釈して、本来必要な作業をやらなくても良いと何故か判断する部長などリソースマネージャーがいます。
アホですね。&lt;/p&gt;

&lt;h2 id=&quot;アジャイル開発は銀の弾丸ではない&quot;&gt;アジャイル開発は銀の弾丸ではない&lt;/h2&gt;

&lt;p&gt;今後も含めいかなる開発手法が登場しても、元々やらなければいけないことの本質が消えることは絶対ありません。
仕様書も説明もなく仕様は伝わらないし、仕様バグも見つからないし、完了条件も定義できません。&lt;/p&gt;

&lt;p&gt;未だにIT開発をコストと考える古臭い人は非常に多いです。特に数字をメインにしてる人は多いです。
こういった会社や上司のいる場所は、エンジニアがアジャイル開発を経て幸せになることはまずありません。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><summary type="html">Web界隈では開発手法はウォーターフォールからアジャイル開発へとシフトしていると思います。 従来のウォーターフォール方式では完成した頃には既に二番手三番手、既に古いと思われるほど求められるニーズの変化速度が速くなっているからです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-04-22-engineers-are-hating-they.png" /></entry><entry><title type="html">RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server" rel="alternate" type="text/html" title="RubyMineでUNIXドメインソケット通信なRailsアプリをデバッグする方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-03-29T05:12:12+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-debugging-unix-socket-server">&lt;p&gt;RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。
しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。
私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。&lt;/p&gt;

&lt;p&gt;今回はRubyMineを使ってUNIXドメインソケット通信で起動してるRailsアプリにブレイクポイントを仕込んだり、ブレイクポイントで止めたコンテキストからRubyを実行したり、変数をウォッチしたりするいわゆるデバッグする方法についてまとめます。&lt;/p&gt;

&lt;h2 id=&quot;環境&quot;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RubyMine&lt;/li&gt;
  &lt;li&gt;PumaにてUNIXドメインソケット通信中のRailsアプリ&lt;/li&gt;
  &lt;li&gt;Mac&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubymineから実行はunixドメインソケット通信による起動がない&quot;&gt;RubyMineから実行はUNIXドメインソケット通信による起動がない&lt;/h2&gt;

&lt;p&gt;通常ならRubyMineからRailsアプリを実行するには、メニューバーの &lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Run... &amp;gt; Development: app_name&lt;/code&gt; の順で実行できます。
もし設定を変更したい場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Edit Configurations...&lt;/code&gt;を選ぶことで登録された設定情報を変更できる画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼RubyMineのEdit Configurations…を開いた画面&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/2.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでIP addressとPortを指定して実行すればサーバが立ち上がります。
しかしこの方法はTCP/IPによるポートが開かれるタイプとなり、UNIXドメインソケットによる立ち上げとは異なります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;項目を見てもそれらしき項目は見当たりません。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼サーバーパラメータ一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/1.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのEdit Configurations...を開いた画面のServer一覧&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私が調べた限りでは直接UNIXドメインソケット通信として起動する方法はありませんでした。
これでは起動もデバッグもできずで、RubyMineが使い物にならなくなります。
しかし、実は少し手間ですがちゃんと手段はあります。&lt;/p&gt;

&lt;h2 id=&quot;unixドメインソケット通信はrubymineでrailsアプリをアタッチする&quot;&gt;UNIXドメインソケット通信はRubyMineでRailsアプリをアタッチする&lt;/h2&gt;

&lt;p&gt;それはメニューバーの&lt;code class=&quot;highlighter-rouge&quot;&gt;Run &amp;gt; Attach to Process...&lt;/code&gt;による&lt;strong&gt;既存プロセスにアタッチ&lt;/strong&gt;する方法です。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼メニューバーのRunにAttach to Process…はあります。&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/3.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのメニューバーのRunを開いた画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使うことで起動中のRailsアプリに対してアタッチを試み、成功したらRubyMineが介入できる環境を構築してくれます。&lt;/p&gt;

&lt;p&gt;フローは次のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;デバッグしたいRailsアプリをシェルで起動&lt;/li&gt;
  &lt;li&gt;RubyMineからAttach to Processを実行&lt;/li&gt;
  &lt;li&gt;Attachが成功するのを待つ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;デバッグしたいrailsアプリをシェルで起動&quot;&gt;デバッグしたいRailsアプリをシェルで起動&lt;/h3&gt;
&lt;p&gt;ターミナルからRailsのServerコマンドを実行してRailsアプリを起動します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となっているのでUNIXドメインソケット通信として起動しています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails s
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Booting Puma
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Rails 6.0.2.1 application starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;development
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more startup options
Puma starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;single mode...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version 4.3.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby 2.6.5-p114&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, codename: Mysterious Traveller
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Min threads: 5, max threads: 5
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Environment: development
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rubymineからattach-to-processを実行&quot;&gt;RubyMineからAttach to Process…を実行&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Attach to Process...&lt;/code&gt;を選ぶとRubyMineがRubyで起動してるプロセスを見つけて一覧として出してくれます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Rubyプロセス一覧&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/4.png&quot; width=&quot;100%&quot; alt=&quot;Attach to Process...で出る一覧画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先程立ち上げたRailsアプリを見つけてくれます。賢いですね。&lt;/p&gt;

&lt;h3 id=&quot;attachが成功するのを待つ&quot;&gt;Attachが成功するのを待つ&lt;/h3&gt;

&lt;p&gt;次はこれを選ぶことでRubyMineがRailsアプリにアタッチをトライしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/5.png&quot; width=&quot;100%&quot; alt=&quot;接続中プログレス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RubyMineのDebug Toolbarにも次のようなログが流れます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;env RBENV_VERSION=2.6.5 /usr/local/Cellar/rbenv/1.1.2/libexec/rbenv exec ruby /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/gdb_wrapper --pid 15009 --ruby-path /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib --include-gem /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib -- --key-value --step-over-in-blocks --disable-int-handler --evaluation-timeout 20 --evaluation-control --time-limit 100 --memory-limit 0 --rubymine-protocol-extensions --port 61951 --host 0.0.0.0 --dispatcher-port 61952 --attach-mode&quot;&lt;/span&gt;
Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
executed &lt;span class=&quot;s1&quot;&gt;'lldb /Users/mothule/.rbenv/versions/2.6.5/bin/ruby --no-lldbinit'&lt;/span&gt;
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;attach 15009&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread list&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
...
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;23&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;thread &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; dlopen&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle&quot;&lt;/span&gt;, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_start_attach&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;breakpoint &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--shlib&lt;/span&gt; /Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib/attach.bundle &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; __func_to_set_breakpoint_at&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
continuing
executed &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; debase_rb_eval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;require '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/bin/../lib/ruby-debug-ide/attach/debugger_loader'; load_debugger(['/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.8.0.beta21/lib', '/Users/mothule/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/debase-0.3.0.beta23/lib'], ['--key-value', '--step-over-in-blocks', '--disable-int-handler', '--evaluation-timeout', '20', '--evaluation-control', '--time-limit', '100', '--memory-limit', '0', '--rubymine-protocol-extensions', '--port', '61951', '--host', '0.0.0.0', '--dispatcher-port', '61952', '--attach-mode'])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;inside lldb.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功するとRailsアプリのログにも次のようなログが出力されます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fast Debugger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby-debug-ide 0.8.0.beta21, debase 0.3.0.beta23, file filtering is supported, block breakpoints supported, smart steps supported, obtaining &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;values supported, partial obtaining of instance variables supported&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; listens on 0.0.0.0:61951
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;失敗するときの3つの確認&quot;&gt;失敗するときの3つの確認&lt;/h3&gt;

&lt;p&gt;Attach to Processはアタッチ処理は安定とはいえないです。何回か試して成功するという状態です。
私がアタッチが失敗した場合にいつも試してることを教えます。
もし失敗する場合は次の4つを試してみてください。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;タイムアウトを伸ばす&lt;/li&gt;
  &lt;li&gt;Railsアプリを立ち上げ直す&lt;/li&gt;
  &lt;li&gt;アタッチトライ中にRailsアプリを動かしてみる&lt;/li&gt;
  &lt;li&gt;ブレイクポイントをつけてAttachを実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「タイムアウトを伸ばす」はRubyMineのPreferencesから出来ます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;▼Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Debugger &amp;gt; Ruby &amp;gt; Debug connection timeout&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineのSettingsからDebug connection timeを延長する&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rubymineでunixドメインソケット通信でもデバッグできるようになる&quot;&gt;RubyMineでUNIXドメインソケット通信でもデバッグできるようになる&lt;/h2&gt;
&lt;p&gt;通常ではRubyMineから起動したアプリしかデバッグができなかったり、ターミナル上でしかUNIXドメインソケット通信のRailsアプリを起動できなかったりしますが、この方法であれば既に立ち上がっているRubyプロセスでもアタッチすることでデバッグができるようになり便利ですね。&lt;/p&gt;</content><author><name></name></author><category term="mac" /><category term="rubymine" /><category term="nginx" /><category term="tools" /><category term="ruby" /><category term="rails" /><summary type="html">RubyMine使ってますか？周りで使ってる人は少なく、ネットでも一部の人しか使われていない印象です。 しかしIDE上がりの人間からするとやはりIDEの恩恵は授かりたいものですよね。 私達は開発環境を整えるためにRubyを弄ってるのではなくアプリやツールなど体験を提供するサービスを作りたいのが本質のはずですし。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-debugging-unix-socket-server/0.png" /></entry><entry><title type="html">RubyMineで条件付きブレイクポイントを使いこなす方法</title><link href="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint" rel="alternate" type="text/html" title="RubyMineで条件付きブレイクポイントを使いこなす方法" /><published>2020-03-29T00:00:00+09:00</published><updated>2020-04-01T00:40:47+09:00</updated><id>https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint</id><content type="html" xml:base="https://blog.mothule.com/tools/rubymine/tools-rubymine-how-to-conditioned-breakpoint">&lt;p&gt;みんな大好きRubyMineはRubyのIDEです。
IDEと言えばそのソフト一つで開発環境が整っている必要があります。
なんせ&lt;strong&gt;Integrated Development Envrionment&lt;/strong&gt;ですもんね。&lt;/p&gt;

&lt;p&gt;そんなIDEの重要機能としてデバッグがあります。
これが統合されていないIDEはIDEとは絶対に言えないです。&lt;/p&gt;

&lt;p&gt;その中でもブレイクポイントはデバッグにおいて要と言える機能です。
ブレイクポイントができないデバッグは何ができるのか？と疑問なほどです。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントとは&quot;&gt;条件付きブレイクポイントとは？&lt;/h2&gt;

&lt;p&gt;そんな便利なブレイクポイントですが、IDEとして用意されているブレイクポイントは一般的に単純なブレイクポイントだけでなく、一定の条件を満たした場合のみ止まってくれる&lt;strong&gt;「条件付きブレイクポイント」&lt;/strong&gt; はIDEならではの機能です。&lt;/p&gt;

&lt;p&gt;RubyMineにもきちんと用意されてます。今回はこれの使い方を説明します。&lt;/p&gt;

&lt;p&gt;コードは何でもいいです、今回はこれを使います。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;無条件ブレイクポイントをかける&quot;&gt;無条件ブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;行の横をクリックすると赤丸がついたらその行にブレイクポイントをつけたことになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/1.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineのエディタ画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Debug実行するとこの行で止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/2.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止まった画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これでもブレイクポイントがかかっているのでその時のコンテキストでRubyコードを実行したり変数評価したりできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/3.png&quot; width=&quot;50%&quot; alt=&quot;RubyMineでブレイクポイントで止めた後のConsole画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ループ内のブレイクポイントは何回も止まる&quot;&gt;ループ内のブレイクポイントは何回も止まる&lt;/h3&gt;

&lt;p&gt;ただこの方法ではループや何回も呼ばれるメソッドなどではその都度止まります。
例えば決まったコンテキストだけデバッグしたい場合では何度も再開ボタンを連打して飛ばしてしまったりします。&lt;/p&gt;

&lt;h2 id=&quot;条件付きブレイクポイントをかける&quot;&gt;条件付きブレイクポイントをかける&lt;/h2&gt;

&lt;p&gt;この無条件のブレイクポイントを右クリック押すとポップアップメニューが出ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/4.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集ポップアップ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enabled: 有効状態の設定&lt;/li&gt;
  &lt;li&gt;Suspend: 一時停止の設定&lt;/li&gt;
  &lt;li&gt;Condition: 条件の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enabled-有効状態の設定&quot;&gt;Enabled: 有効状態の設定&lt;/h3&gt;
&lt;p&gt;一時的に有効／無効を設定します。ブレイクポイント自体の削除はしません。
無効にすると穴のあいた赤丸になります。&lt;/p&gt;

&lt;h3 id=&quot;suspend-一時停止の設定&quot;&gt;Suspend: 一時停止の設定&lt;/h3&gt;
&lt;p&gt;一時停止とはつまるところ停止です。この行で止まります。
デフォルトではONになっており、これをOFFにするとオレンジ色になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/5.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineでブレイクポイントの編集でSuspendOFF&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一時停止する代わりにログ出力のオプションが増えます。&lt;/p&gt;

&lt;h4 id=&quot;breakpoint-hit-発火をログ出力で通知&quot;&gt;“Breakpoint hit”: 発火をログ出力で通知&lt;/h4&gt;
&lt;p&gt;止まる代わりにログを出力します。
例えば次のコードでブレイクポイントを貼り、
“Breakpoint hit”をONにします。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ここでブレイクポイントを貼る&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果は次のようになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
Breakpoint reached: main.rb:4
Breakpoint reached: main.rb:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;「&lt;strong&gt;“Breakpoint reached: main.rb:4”&lt;/strong&gt;」と通過したことをログ出力されてます。&lt;/p&gt;

&lt;h4 id=&quot;stack-trace-発火時のスタックトレース表示&quot;&gt;Stack trace: 発火時のスタックトレース表示&lt;/h4&gt;
&lt;p&gt;ブレイクポイントを通過して発火するとコールスタックを出力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with exit code 0
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
Stack:
	main.rb:4
	main.rb:3
	debug_program [ruby-debug-ide.rb:100] (singleton class of Debugger)
	rdebug-ide:204
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;どこからこのメソッドが呼ばれてるのか知りたい場合に便利ですね。&lt;/p&gt;

&lt;h4 id=&quot;evaluate-and-log-発火時に独自ログを表示&quot;&gt;Evaluate and log: 発火時に独自ログを表示&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを通過して発火すると記載しておいたRubyコードが評価され結果を出力します。
例えばブレイクポイントに次のコードを仕込んで実行すると&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;String &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ブレイクポイント発火時に次のようにRubyコードの評価結果が出力されます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
4

Process finished with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 0
String 1
String 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;remove-once-hit-一度だけ止まる&quot;&gt;Remove once hit: 一度だけ止まる&lt;/h4&gt;

&lt;p&gt;ブレイクポイントを一度発火するとそのブレイクポイントは削除されます。
&lt;strong&gt;このブレイクポイントはSuspendがONのときしか機能しません。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;disable-until-hitting-the-following-breakpoint-他のブレークポイント検知で有効化する&quot;&gt;Disable until hitting the following breakpoint: 他のブレークポイント検知で有効化する&lt;/h4&gt;
&lt;p&gt;このブレイクポイントは他のブレークポイントが発火したらそれをトリガーにブレークポイントが有効化します。&lt;/p&gt;

&lt;p&gt;ただシングルスレッドではこの機能は正しく動作していないように思えます。
対象のブレイクポイント発火時はたしかに有効化しているようなのですが、その後有効状態を継続してもブレイクポイントはヒットしません。
ここもし詳しく分かる方いたら教えてほしいです。&lt;/p&gt;

&lt;h3 id=&quot;condition-条件の設定&quot;&gt;Condition: 条件の設定&lt;/h3&gt;

&lt;p&gt;デフォルトはOFFになっておりONにすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;内をRubyとして評価し&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;になったら止まります。
条件付きブレイクポイントの場合は赤丸の右下に？マークがつきます。
次の図では、変数&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;になったら止まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/6.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineの条件付きブレイクポイント&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例では単純な等価判定ですが、戻り値として&lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;を返せばいいだけなので
そのコンテキストで得られる情報を使った評価も可能です。
例えばActiveRecordがアクセスできるコンテキストであれば条件式に入れることも可能です。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;といったことも可能です。&lt;/p&gt;

&lt;h2 id=&quot;moreでブレイクポイント管理画面を表示&quot;&gt;Moreでブレイクポイント管理画面を表示&lt;/h2&gt;

&lt;p&gt;画面左下の&lt;code class=&quot;highlighter-rouge&quot;&gt;More&lt;/code&gt;ラベルをタップするとブレイクポイント一覧と詳細ができる管理画面が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/7.png&quot; width=&quot;100%&quot; alt=&quot;RubyMineブレイクポイント管理画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この画面でなくても指定したブレイクポイントの編集は可能です。&lt;/p&gt;

&lt;h2 id=&quot;rubymineにも条件付きブレイクポイントはつけれる&quot;&gt;RubyMineにも条件付きブレイクポイントはつけれる&lt;/h2&gt;

&lt;p&gt;他IDEと遜色ない条件付きブレイクポイント機能ですね。
ただ条件付きブレイクポイントのデメリットとしては、処理が重くなります。
通るたびに条件を満たしているか評価を行うためその分重くなります。&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="rubymine" /><category term="ruby" /><summary type="html">みんな大好きRubyMineはRubyのIDEです。 IDEと言えばそのソフト一つで開発環境が整っている必要があります。 なんせIntegrated Development Envrionmentですもんね。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-03-29-tools-rubymine-how-to-conditioned-breakpoint/0.png" /></entry><entry><title type="html">Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認</title><link href="https://blog.mothule.com/ruby/ruby-backslash" rel="alternate" type="text/html" title="Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認" /><published>2020-02-28T00:00:00+09:00</published><updated>2020-02-28T05:08:45+09:00</updated><id>https://blog.mothule.com/ruby/ruby-backslash</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-backslash">&lt;h2 id=&quot;バックスラッシュ記法とは&quot;&gt;バックスラッシュ記法とは？&lt;/h2&gt;
&lt;p&gt;文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。&lt;/p&gt;

&lt;h2 id=&quot;バックスラッシュ記法の一覧&quot;&gt;バックスラッシュ記法の一覧&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;バックスラッシュ記法&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;タブ(0x09)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;垂直タブ(0x0b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;改行(0x0a)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;キャリッジリターン(0x0d)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;改ページ(0x0c)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;バックスペース (0x08)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\a&lt;/td&gt;
      &lt;td&gt;ベル (0x07)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\e&lt;/td&gt;
      &lt;td&gt;エスケープ (0x1b)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;空白 (0x20)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\nnn&lt;/td&gt;
      &lt;td&gt;8 進数表記 (n は 0-7)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xnn&lt;/td&gt;
      &lt;td&gt;16 進数表記 (n は 0-9,a-f)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cx or \C-x&lt;/td&gt;
      &lt;td&gt;コントロール文字 (x は ASCII 文字)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-x&lt;/td&gt;
      &lt;td&gt;メタ x (c | 0x80)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\M-\C-x&lt;/td&gt;
      &lt;td&gt;メタ コントロール x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\x&lt;/td&gt;
      &lt;td&gt;文字 x そのもの&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\unnnn&lt;/td&gt;
      &lt;td&gt;Unicode 文字(n は 0-9,a-f,A-F、16進数4桁で指定)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\u{nnnn}&lt;/td&gt;
      &lt;td&gt;Unicode 文字列(n は 0-9,a-f,A-F)。nnnnは16進数で1桁から6桁まで指定可能。スペースかタブ区切りで複数の Unicode 文字を指定できる。例: “\u{30eb 30d3 30fc a}” # =&amp;gt; “ルビー\n”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\改行&lt;/td&gt;
      &lt;td&gt;文字列中に改行を含めずに改行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#backslash&quot;&gt;Rubyリファレンスマニュアルより抜粋引用&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;タブt&quot;&gt;タブ(\t)&lt;/h3&gt;

&lt;p&gt;分かりにくいですが、fooとbarの間にスペースではなく、タブが入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;垂直タブv&quot;&gt;垂直タブ(\v)&lt;/h3&gt;
&lt;p&gt;真下に移動します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;バックスペースb&quot;&gt;バックスペース(\b)&lt;/h3&gt;

&lt;p&gt;キーボードのバックスペース同様、手前1文字を消します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベルa&quot;&gt;ベル(\a)&lt;/h3&gt;

&lt;p&gt;実行すると音がなります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;空白s&quot;&gt;空白(\s)&lt;/h3&gt;

&lt;p&gt;スペース1文字入ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8進数表記-16進数表記-コントロール文字&quot;&gt;8進数表記, 16進数表記, コントロール文字&lt;/h3&gt;

&lt;p&gt;これらは直接制御文字を指定する方法です。
制御文字のコードと命令については&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%96%87%E5%AD%97&quot;&gt;Wikipedia&lt;/a&gt;が分かりやすいです。&lt;/p&gt;

&lt;p&gt;例えば前述したタブの場合は コントロール文字であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;^I&lt;/code&gt;16進数なら&lt;code class=&quot;highlighter-rouge&quot;&gt;09&lt;/code&gt;なので、
Rubyではこう書きます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Ibar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bar&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;unicode文字-unicode文字列&quot;&gt;Unicode文字, Unicode文字列&lt;/h3&gt;

&lt;p&gt;Unicodeを直接指定します。
例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0041&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt;の場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0041 0x0042 0x0043&lt;/code&gt;なので&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{0041 0042 0043}&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ABC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文字列中に改行を含めずに改行改行&quot;&gt;文字列中に改行を含めずに改行(\改行)&lt;/h3&gt;

&lt;p&gt;文字列を作成中に改行しても文字列作成中を継続する場合に使います。
これ意味わかりにくいですが、コード見ると何のことかすぐ分かります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo\
bar\
baz&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# foobarbaz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rubyのバックスラッシュ記法一覧確認したけど&quot;&gt;Rubyのバックスラッシュ記法一覧確認したけど&lt;/h2&gt;
&lt;p&gt;用途や効果の分からない記法もありました。長年実務でも見かけたことのないものなので特別なシステム開発でしか使われないかと思います。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">バックスラッシュ記法とは？ 文字列中でバックスラッシュ(\)の後に記述する文字によって特別な意味を持つ記法です。制御文字とも呼ばれます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-28-ruby-backslash.png" /></entry><entry><title type="html">Rubyの%w %s %i %Qなど%記法(パーセント記法)一覧を確認</title><link href="https://blog.mothule.com/ruby/ruby-percent-syntax" rel="alternate" type="text/html" title="Rubyの%w %s %i %Qなど%記法(パーセント記法)一覧を確認" /><published>2020-02-27T00:00:00+09:00</published><updated>2020-02-28T05:08:45+09:00</updated><id>https://blog.mothule.com/ruby/ruby-percent-syntax</id><content type="html" xml:base="https://blog.mothule.com/ruby/ruby-percent-syntax">&lt;p&gt;気づいたら忘れてる%記法(パーセント記法)について一覧を確認しました。
%wと%iぐらいしか使うこと少ないですが、他にも色々ありますね。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の一覧&quot;&gt;%記法(パーセント記法)の一覧&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;%記法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;式展開&lt;/th&gt;
      &lt;th&gt;使用例&lt;/th&gt;
      &lt;th&gt;結果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%w&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%w(foo bar baz)&lt;/td&gt;
      &lt;td&gt;[“foo”, “bar”, “baz”]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%W&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%W(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;[“foo”, “bar”, “baz”]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%Q&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%q&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%(foo bar baz)&lt;/td&gt;
      &lt;td&gt;“foo bar baz”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%x(echo #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;“baz\n”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%r&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%r(^#{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;}$) =~ baz&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%s(foo_bar_baz)&lt;/td&gt;
      &lt;td&gt;:foo_bar_baz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;☓&lt;/td&gt;
      &lt;td&gt;%i(foo bar baz)&lt;/td&gt;
      &lt;td&gt;[:foo, :bar, :baz]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%I&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◯&lt;/td&gt;
      &lt;td&gt;%I(foo bar #{&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;})&lt;/td&gt;
      &lt;td&gt;[:foo, :bar, :baz]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;は変数で&lt;code class=&quot;highlighter-rouge&quot;&gt;baz&lt;/code&gt;を代入してると仮定します。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の区切りに改行を使う&quot;&gt;%記法(パーセント記法)の区切りに改行を使う&lt;/h2&gt;

&lt;p&gt;区切り文字は空白文字(スペース)以外にも改行が使えます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(
foo
bar
baz
)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;記法パーセント記法の囲い文字を変更する&quot;&gt;%記法(パーセント記法)の囲い文字を変更する&lt;/h2&gt;
&lt;p&gt;%w&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;や%w&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;など括弧でも囲えますが、&lt;strong&gt;任意の非英数字&lt;/strong&gt; を使うことができます。&lt;br /&gt;
ただし、%w,%W,%i,%Iは区切り文字に&lt;strong&gt;空白文字(スペース)&lt;/strong&gt;と&lt;strong&gt;改行&lt;/strong&gt; を使うため、この２つは使えません。&lt;/p&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;(]&lt;/code&gt;のように始まりと終わり文字が異なるのは使えません。&lt;/p&gt;

&lt;h2 id=&quot;記法パーセント記法の要素に空白文字スペースを入れる&quot;&gt;%記法(パーセント記法)の要素に空白文字(スペース)を入れる&lt;/h2&gt;

&lt;p&gt;%w, %W, %i, %Iは空白区切りの要素がそれぞれ評価されます。&lt;br /&gt;
しかしひとつの要素に空白文字を入れたいケースがあります。&lt;br /&gt;
その場合 スペースの前に\(バックスラッシュ)を入れると一つの要素にできます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sx&quot;&gt;%w(foo bar)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(foo\ bar)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;バックスラッシュ記法が有効な記法パーセント記法&quot;&gt;バックスラッシュ記法が有効な%記法(パーセント記法)&lt;/h2&gt;

&lt;p&gt;一部の%記法(パーセント記法)はバックスラッシュ記法が有効です。&lt;/p&gt;

&lt;p&gt;▼バックスラッシュ記法(\tなど)の詳細はこちらになります。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/ruby/ruby-backslash&quot;&gt;Rubyのバックスラッシュ記法(\t \n \sなど)一覧を確認&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;バックスラッシュ記法が使える%記法(パーセント記法)は下記になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%W&lt;/li&gt;
  &lt;li&gt;%I&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubyのw-i以外にも色々ある記法パーセント記法&quot;&gt;Rubyの%w %i以外にも色々ある%記法(パーセント記法)&lt;/h2&gt;

&lt;p&gt;よく使うのは2つ3つですが、意外と多かったですね。&lt;br /&gt;
無理して使う必要はないですが、コードリーディングでは必要なので頭の片隅においときたいですね。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">気づいたら忘れてる%記法(パーセント記法)について一覧を確認しました。 %wと%iぐらいしか使うこと少ないですが、他にも色々ありますね。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-27-ruby-percent-syntax.png" /></entry><entry><title type="html">Mac上でnginxのセキュリティ最低限を確認する</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac" rel="alternate" type="text/html" title="Mac上でnginxのセキュリティ最低限を確認する" /><published>2020-02-26T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-security-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ5回目です。
今回を入門シリーズ最後とします。&lt;/p&gt;

&lt;p&gt;最後はMac上にnginxで立てたWebサーバを対象に最低限のセキュリティ項目について確認を行います。
また&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;内の設定で分からないディレクティブが出たらそれの確認も行っていきます。&lt;/p&gt;

&lt;p&gt;▼前回は設定ファイルをドメイン別に分ける方法について説明しました。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-customize-on-mac&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回はnginx自体に関するセキュリティ対応であってその上に乗っかるlaravelやRailsアプリサーバに対するセキュリティに関しては記載していません。
また記載されたケース以外にも該当する脅威やシナリオはあることをさきに伝えておきます。&lt;/p&gt;

&lt;h2 id=&quot;nginxconfに設定したファイル全容&quot;&gt;nginx.confに設定したファイル全容&lt;/h2&gt;

&lt;p&gt;今回紹介する設定は次になります。
一つずつ調べてみます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server_tokens off;

add_header X-XSS-Protection &quot;1; mode=block&quot;;
add_header Content-Security-Policy &quot;default-src 'self'&quot;;
add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;
add_header X-Download-Options &quot;noopen&quot;;
add_header X-Frame-Options sameorigin;
add_header X-Content-Type-Options nosniff;

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
ssl_prefer_server_ciphers on;
ssl_dhparam /usr/local/etc/ssl/certs/dhparam.pem;

server {
  listen 80 default_server;
  server_name _;
  return 403;
}

server {
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /usr/local/etc/crypt/site.crt;
  ssl_certificate_key /usr/local/etc/crypt/site.key;
}

location = /xmlrpc.php {
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;httpヘッダー&quot;&gt;HTTPヘッダー&lt;/h2&gt;

&lt;p&gt;nginxには&lt;code class=&quot;highlighter-rouge&quot;&gt;add_header&lt;/code&gt;ディレクティブを使うことでHeaderを追加することが出来ます。&lt;/p&gt;

&lt;h3 id=&quot;nginxのバージョン情報を隠す&quot;&gt;nginxのバージョン情報を隠す&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginxで発見された脆弱性をついたゼロデイ攻撃から少しでも身を守る&lt;/p&gt;

&lt;p&gt;例：悪意あるユーザが事前にサイト毎のパッケージのバージョン情報を偵察
  脆弱性が公表されたら、その脆弱性をついた攻撃スクリプトが出回る
  蓄積されたサイト別情報から脆弱性を含むバージョンで動いているサイトを検索
  見つかったサイトに対してスクリプト実行&lt;/p&gt;

&lt;h3 id=&quot;クロスサイトスクリプティングxssフィルタリングを有効化する&quot;&gt;クロスサイトスクリプティング(XSS)フィルタリングを有効化する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-XSS-Protection &quot;1; mode=block&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;は有効化で&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;は無効化です。有効化したときの挙動として&lt;code class=&quot;highlighter-rouge&quot;&gt;mode=block&lt;/code&gt;を指定します。
有効化することでXSSフィルタリングを有効化します。これはデフォルト値となります。
XSS攻撃を検出したら、ブラウザはページをサニタイズ、安全でない部分を除去します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode=block&lt;/code&gt;がついてるとページ描画を止めます。&lt;/p&gt;

&lt;h3 id=&quot;コンテンツセキュリティポリシーcspでセキュリティ層を追加する&quot;&gt;コンテンツセキュリティポリシー(CSP)でセキュリティ層を追加する&lt;/h3&gt;
&lt;p&gt;CSPはXSS攻撃やデータインジェクション攻撃など一部攻撃を検知、軽減するセキュリティレイヤーです。
CSPを利用すると、サーバから許可されたドメインのスクリプトのみを実行します。
これによりXSSの発生箇所を抑えることができます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt;ではユーザーエージェントに読み込ませたいリソース情報と範囲を&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;セミコロン分割の列挙で指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Content-Security-Policy &quot;default-src 'self'&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合は全コンテンツをサイト自身のドメインから取得を許可します。ただしサブドメインは許可されません。
デフォルトでは無制限なのでこれを指定することで&lt;code class=&quot;highlighter-rouge&quot;&gt;-src&lt;/code&gt;で終わるもののデフォルトは全部この値になります。&lt;/p&gt;

&lt;h3 id=&quot;strict-transport-securityhstsでhttps通信を強制する&quot;&gt;Strict-Transport-Security(HSTS)でHTTPS通信を強制する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max-age&lt;/code&gt;でサイトにHTTPS接続をすることをブラウザに記憶させます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;includeSubdomains&lt;/code&gt;で他のサブドメインにも適用させます。&lt;/p&gt;

&lt;h3 id=&quot;x-download-optionsで直接ファイル開くを禁止する&quot;&gt;X-Download-Optionsで直接ファイル開くを禁止する&lt;/h3&gt;
&lt;p&gt;IEがダウロードしたファイル直接開けないようにさせます。
ローカルにファイル化せずブラウザから直接URLを開くと、サイトのコンテキストで実行されるため
悪意あるスクリプトをこの方法で開くとインジェクション攻撃の脅威となります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Download-Options &quot;noopen&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;noopen&lt;/code&gt;とすることでそもそも「開く」ことができなくなります。&lt;/p&gt;

&lt;h3 id=&quot;x-frame-optionsで埋め込み表示を同ドメインに絞る&quot;&gt;X-Frame-Optionsで埋め込み表示を同ドメインに絞る&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;タグなどの中で表示許可を制限します。
他サイトで埋め込み表示させないことでクリックジャッキング攻撃を防止します。&lt;/p&gt;

&lt;p&gt;クリックジャッキングとはタップ可能なUIを隠しておいてユーザに意図せず押させる手法です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Frame-Options sameorigin;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sameorigin&lt;/code&gt;は表示許可を同じドメイン内にしぼります。&lt;/p&gt;

&lt;h3 id=&quot;x-content-type-optionsでcontent-type見るように強制する&quot;&gt;X-Content-Type-OptionsでContent-Type見るように強制する&lt;/h3&gt;

&lt;p&gt;MIMEタイプのスニッフィングの有効無効を指定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Content-Type-Options nosniff;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nosniff&lt;/code&gt;でファイルの種類を内容ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;から判断させます。
無許可のファイル・タイプを処理させないようにします。&lt;/p&gt;

&lt;h3 id=&quot;mac上でのadd_header注意点&quot;&gt;mac上でのadd_header注意点&lt;/h3&gt;

&lt;p&gt;MacではHomebrewを使ってビルド済みバイナリーをダウンロードして使ってるかと思います。&lt;/p&gt;

&lt;p&gt;しかしデフォルトのnginxではheaderを上書きする方法がありません。
&lt;code class=&quot;highlighter-rouge&quot;&gt;add_header&lt;/code&gt;は文字通り追加であって上書きではありません。
そのためデフォルトで設定されているヘッダーを追加すると二つ並びどちらを実行するのかクライアントに依存する形となります。
拡張モジュールを使えば上書きが可能なので、Linuxなどであればソースからビルド時にモジュールを追加指定することでヘッダー上書きを可能にしています。&lt;/p&gt;

&lt;h2 id=&quot;ssltls&quot;&gt;SSL/TLS&lt;/h2&gt;

&lt;p&gt;今やHTTPS通信は当たり前で反対にHTTP通信では極端に言えば非常識な時代です。SEO目線でもHTTPSであることが評価の一つになってるくらいです。&lt;/p&gt;

&lt;p&gt;しかしながら単純にHTTPSをすれば良いというものでは有りません。
セキュリティ技術も時代の流れに合わせて進化しており、プロトコルも旧新多種多様になっています。
デフォルトではリスクのあるセキュリティプロトコルもあります。
ここで記載してる情報も数年後にはリスキーなものとなってる可能性も大いにあります。&lt;/p&gt;

&lt;h3 id=&quot;ssl_protocolsでssltlsプロトコルを指定する&quot;&gt;ssl_protocolsでSSL/TLSプロトコルを指定する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssl_protocols&lt;/code&gt;で使う暗号方式を指名できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;デフォルトでは 古くて非推奨なプロトコルも入っているので指定する。&lt;/p&gt;

&lt;h3 id=&quot;ssl_ciphersでセキュアな暗号化スイートを指定する&quot;&gt;ssl_ciphersでセキュアな暗号化スイートを指定する&lt;/h3&gt;

&lt;p&gt;サーバ側でセキュアな暗号化スイートを指定します。
無指定だとクライアント側が指定した方法で暗号化することになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;セミコロン(&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;)をデリミタに優先順位順に記載します。&lt;/p&gt;

&lt;h3 id=&quot;ssl_prefer_server_ciphersで優先利用させる&quot;&gt;ssl_prefer_server_ciphersで優先利用させる&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_prefer_server_ciphers on;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;on&lt;/code&gt;とすることでサーバ側で指定した暗号を優先して使うように指示します。&lt;/p&gt;

&lt;h3 id=&quot;ssl_dhparamで鍵長を強化する&quot;&gt;ssl_dhparamで鍵長を強化する&lt;/h3&gt;

&lt;p&gt;デフォルトでは512bits, 1024bits以下になっておりDH鍵交換方式の脆弱性をついたLogjam攻撃リスクがあるため。
Logjam攻撃とはTLS接続の暗号強度を低下させ、計算可能な領域に下げ盗聴や改ざんのリスクを高める攻撃です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_dhparam /usr/local/etc/ssl/certs/dhparam.pem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;自前で2048や4096のpemを作り設定します。&lt;/p&gt;

&lt;p&gt;作成はOpenSSLで簡単につくれます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl dhparam &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;その他&quot;&gt;その他&lt;/h2&gt;

&lt;h3 id=&quot;ip直打ちアクセスを禁止する&quot;&gt;IP直打ちアクセスを禁止する&lt;/h3&gt;

&lt;p&gt;効果のあるセキュリティ対策は悪意あるユーザーにサイトの存在がばれない事です。&lt;/p&gt;

&lt;p&gt;しかし、ドメイン名は分からずともIPアドレスは数字なのでデタラメにアクセスするボットでもいつかは有効なアドレスにヒットします。
これで望んでいない悪意あるユーザーにサイトの存在がバレてしまうリスクがあります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 80 default_server;
  server_name _;
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ドメインなしのアクセスがあればデフォルトでここがヒットするようにします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;接続も同じようにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 443 ssl default_server;
  server_name _;
  ssl_certificate /usr/local/etc/crypt/site.crt;
  ssl_certificate_key /usr/local/etc/crypt/site.key;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;一部デフォルトパスを無効化する&quot;&gt;一部デフォルトパスを無効化する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = /xmlrpc.php {
  return 403;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;例えばwordpressでは外部からwpを操作する仕組みで&lt;code class=&quot;highlighter-rouge&quot;&gt;XML-RPC&lt;/code&gt;があり、それを使った脆弱性攻撃があります。
こういった有名フレームワークやライブラリを入れることで導入利便性を高めるためにデフォルトで用意されているページが脆弱性の対象となるので、こういったページは名称を変えるかそもそもアクセスを禁止させます。
今回はアクセスがあったら拒否します。&lt;/p&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;
&lt;p&gt;今回調べた項目は調べて必要だなと思った部分を設定として紹介しました。
実際はケースごとにもっと色々と設定が必要だなと思います。
この設定すれば100%安全を保証するものではありませんし、保証できません。
この設定によりインシデントが発生しても責任はおえません。
あくまでも自己責任でお願いします。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/hi-nakamura/items/fe07afbcfb61185c47f8&quot;&gt;参考&lt;/a&gt;
&lt;a href=&quot;http://cluex-developers.hateblo.jp/entry/secure-nginx-setting-for-2016&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;macでnginx入門シリーズ終了&quot;&gt;macでnginx入門シリーズ終了&lt;/h2&gt;

&lt;p&gt;この記事でmacでnginxに触れて慣れる入門記事は完了となります。
やはりボリュームとしては結構大きく上手にまとめられていない部分もあったかと思います。
一方でこのシリーズを通したことでnginxとはなんなのか？nginxでRailsアプリってどう立ち上がるのか？といったぼんやりとした全体像はつかめたのではないかなと思います。&lt;/p&gt;

&lt;p&gt;この記事を皮切りに今後nginxの理解がより深まればいいですね。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ5回目です。 今回を入門シリーズ最後とします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-26-web-nginx-getting-started-security-on-mac/0.png" /></entry><entry><title type="html">Mac上のnginx設定ファイルをドメイン毎に分ける</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac" rel="alternate" type="text/html" title="Mac上のnginx設定ファイルをドメイン毎に分ける" /><published>2020-02-26T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-customize-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ4回目です。
今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;の設定内容をドメイン毎、つまりアプリ毎に分けます。
分かれてることで複数のアプリ開発を1つの&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.cnf&lt;/code&gt;に集約されなくなり管理しやすくなります。&lt;/p&gt;

&lt;p&gt;▼前回記事はこちらになります。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step3-on-mac&quot;&gt;Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;ドメイン毎に設定を分ける理由&quot;&gt;ドメイン毎に設定を分ける理由&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.cnf&lt;/code&gt;に直接記述せず、ドメイン毎に設定ファイルを用意する理由とは何でしょうか？
Macでnginxを使うケースは分けたほうが恩恵をえられます。
その理由について簡単に説明します。&lt;/p&gt;

&lt;h3 id=&quot;macのnginxは開発用途がメイン&quot;&gt;Macのnginxは開発用途がメイン&lt;/h3&gt;
&lt;p&gt;Macを本番サーバとして使うことはありませんが、開発PCはMacかWindowsが主なOSだと思います。
そのため1つのMacに複数のアプリが含まれやすいです。
開発では複数アプリが同時に扱うこともあります。&lt;/p&gt;

&lt;h3 id=&quot;1macに複数ドメインを立ち上げることはよくある&quot;&gt;1Macに複数ドメインを立ち上げることはよくある&lt;/h3&gt;
&lt;p&gt;例えばMac1台で開発してると下記のように複数アプリが含まれることはよくあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプリA(Web)&lt;/li&gt;
  &lt;li&gt;アプリB(Web)&lt;/li&gt;
  &lt;li&gt;アプリB(Backend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかもアプリBだと、WebとBackend両方を立ち上げが必要なケースもあると思います。
これら各nginx設定は、特に工夫しなければすべて&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に書かれるかと思います。&lt;/p&gt;

&lt;h3 id=&quot;nginxconfに全ドメイン設定を記述できる&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に全ドメイン設定を記述できる&lt;/h3&gt;
&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;は複数ドメインの設定を&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;にまとめて全部記述することは可能です。
しかしそれによりなにかと長期的に面倒なことが続きます。
それは可読性と他ドメイン影響範囲に悪影響することです。&lt;/p&gt;

&lt;h3 id=&quot;長い設定ファイルはメンテナンスしにくい&quot;&gt;長い設定ファイルはメンテナンスしにくい&lt;/h3&gt;
&lt;p&gt;前述はドメイン3つですが、人によっては5~10個ドメインが入っているかと思います。
そうなってくると、&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;には10個の設定が全部記述されるためファイルがとても長くなります。
その長くて読みにくい設定ファイルから不要な項目を削除する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;開発不要になればそのドメイン設定は不要になる&quot;&gt;開発不要になればそのドメイン設定は不要になる&lt;/h3&gt;
&lt;p&gt;ドメイン開発が終了すればそのドメインの設定は不要となるため、削除すると思います。
それも放置すると&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;がとんでも長い行となるためです。&lt;/p&gt;

&lt;p&gt;削除するときにどの項目を削除するべきなのか一つ一つ読み解いて行く必要があります。
これは変更により他ドメインへの影響範囲内になりますし、誤って消してしまうと動かなくなります。
本番サーバはチューリング用途ですが、Macだと開発環境つど変更必要です。&lt;/p&gt;

&lt;h3 id=&quot;macのnginxconfは本番サーバと異なり変更頻度が高い&quot;&gt;Macの&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;は本番サーバと異なり変更頻度が高い&lt;/h3&gt;

&lt;p&gt;本番サーバのnginx.confは一度組み込んでしまえばパフォーマンス・チューニング用途以外で変えることは少ないです。
しかしMac上のnginxは開発用途がメインで、開発不要になれば削除作業が起きますし、新しくアプリ開発すれば追加作業が起きます。
本番サーバと異なり設定の大きく異なる複数のアプリを何度も消したり追加したりすることとなり、よりミスの可能性が上がります。
これらはドメインごとに設定ファイルとして分かれてることで望ましいです。&lt;/p&gt;

&lt;h3 id=&quot;ドメイン毎に設定ファイルが分かれていれば他のドメイン設定を消すリスクを回避できる&quot;&gt;ドメイン毎に設定ファイルが分かれていれば他のドメイン設定を消すリスクを回避できる&lt;/h3&gt;

&lt;p&gt;これらの問題を回避するためにドメイン毎に設定ファイルが用意されていれば解決できます。
新しくアプリが追加になればファイルごと追加で、アプリが不要になればドメイン設定ファイルを削除するだけで、
他ドメインの設定に影響を抑えられます。&lt;/p&gt;

&lt;p&gt;これはドメインごとの設定ファイルとシンボリックリンクで実現します。&lt;/p&gt;

&lt;h2 id=&quot;includeディレクティブでアプリ別設定ファイル構築する&quot;&gt;includeディレクティブでアプリ別設定ファイル構築する&lt;/h2&gt;
&lt;p&gt;では実際の構築方法について説明します。&lt;/p&gt;

&lt;p&gt;仕組みは単純で、ドメイン別の設定ファイルを&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;ディレクティブでロードしているだけです。
&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;ディレクティブには&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;でまとめてファイル指定もできるので、これを使います。&lt;/p&gt;

&lt;p&gt;流れは次の通りです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ドメイン別設定ファイル置き場を用意する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;でドメイン別設定ファイルをロードする&lt;/li&gt;
  &lt;li&gt;ドメイン別設定ファイルを用意する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ドメイン別設定ファイル置き場を用意する&quot;&gt;ドメイン別設定ファイル置き場を用意する&lt;/h3&gt;
&lt;p&gt;まずは設定ファイルを置く場所を用意します。場所といってもフォルダです。
フォルダの中に入れておくことで&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;でまとめてロードできて便利だからです。&lt;/p&gt;

&lt;p&gt;置き場となるフォルダ名は&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;とします。これは&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf.default&lt;/code&gt;で既にそういう記述があるためです。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /usr/local/etc/nginx/servers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginxconfにincludeでドメイン別設定ファイルをロードする&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;でドメイン別設定ファイルをロードする&lt;/h3&gt;

&lt;p&gt;次は&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;に先程用意したフォルダ内の設定ファイルを全てロードする処理を記述します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  # 全サーバ共通設定はここ

  # 各個別設定はここ
  include servers/*;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これにより&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダ内のファイルを全てロードするようになります。&lt;/p&gt;

&lt;h3 id=&quot;ドメイン別設定ファイルを用意する&quot;&gt;ドメイン別設定ファイルを用意する&lt;/h3&gt;

&lt;p&gt;最後はそれぞれドメイン毎の設定ファイルを用意します。
ファイル名はドメイン名と同じ方がわかりやすいです。
今回はローカルなので&lt;code class=&quot;highlighter-rouge&quot;&gt;api.localhost&lt;/code&gt;というファイル名を用意します。&lt;/p&gt;

&lt;p&gt;内容は動作確認できればいいので適当に用意しました。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 80;
  server_name api.localhost;
  root /usr/local/var/www;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上で設定は完了です、nginxを再起動するば反映されます。
 この設定ファイルであれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;http://api.localhost&lt;/code&gt; にアクセスすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/www&lt;/code&gt;フォルダの&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;のレスポンスを返すようになります。&lt;/p&gt;

&lt;h2 id=&quot;慣習に倣ったバーチャルホスト構築&quot;&gt;慣習に倣ったバーチャルホスト構築&lt;/h2&gt;
&lt;p&gt;今回紹介したドメイン毎に設定ファイルを分ける方法はnginxではバーチャルホスト構築時は少し慣習から外れた方法なので、Apacheなどからしたら少し分かりにくいかもしれません。目的はローカル上で複数ドメインをMacなど開発用とで立ち上げることなので、問題はないのですが、これが本番サーバの場合はこの方法ではなく次の方法で構築をしてください。&lt;/p&gt;

&lt;p&gt;大きく次のフローとなります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;sites-available フォルダ作成と個別設定ファイル配置&lt;/li&gt;
  &lt;li&gt;sites-enabled フォルダの作成と&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;フォルダ内の個別設定ファイルへのシンボリックリンク作成&lt;/li&gt;
  &lt;li&gt;nginx.conf に include ディレクティブで sites-enabled内ファイルをロード&lt;/li&gt;
  &lt;li&gt;nginx 再起動&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;フォルダが、先程の&lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt;フォルダとなります。
&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;で読み込む先は&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;フォルダにしてください。
直接実ファイルをロードするのではなく、&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;に用意されたシンボリックリンクをロードします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt;が間に一つ入る形になっています。
これは&lt;code class=&quot;highlighter-rouge&quot;&gt;unlink&lt;/code&gt;すること簡単にバーチャルホストを閉じることが可能となっています。
設定ファイルの削除や移動などは必要ありません。&lt;/p&gt;

&lt;h2 id=&quot;mac上のnginx設定ファイルをドメイン毎に分ける&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/h2&gt;
&lt;p&gt;今回は設定ファイルを別ファイルからロードすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をボリュームを抑え、変更影響を受けにくい仕組みの紹介でした。
直接書くより少し手間だったり慣れていないと確認が面倒だったりはしますが、目の前の手間から逃げ続けると将来一気に避けられない手間を対応するはめに会います。
可読性やメンテナンス性はエンジニアには重要指標なので、目の前の面倒から逃げずに将来のもっと大きな面倒をなくしていくことは大事ですね。&lt;/p&gt;

&lt;p&gt;次の記事は「&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-security-on-mac&quot;&gt;Mac上でnginxのセキュリティ最低限を確認する&lt;/a&gt;&lt;/span&gt;
」について説明します。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ4回目です。 今回はnginx.confの設定内容をドメイン毎、つまりアプリ毎に分けます。 分かれてることで複数のアプリ開発を1つのnginx.cnfに集約されなくなり管理しやすくなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-26-web-nginx-getting-started-customize-on-mac/0.png" /></entry><entry><title type="html">Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる</title><link href="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac" rel="alternate" type="text/html" title="Mac1台にnginxでWebサーバとPumaでアプリサーバを立てる" /><published>2020-02-24T00:00:00+09:00</published><updated>2020-03-29T04:28:01+09:00</updated><id>https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac</id><content type="html" xml:base="https://blog.mothule.com/web/nginx/web-nginx-getting-started-step3-on-mac">&lt;p&gt;MacでWebサーバnginxを立ち上げるための入門記事シリーズ3回目です。&lt;/p&gt;

&lt;h2 id=&quot;ゼロからnginxconfを書いてアプリサーバを構築する&quot;&gt;ゼロから&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;を書いてアプリサーバを構築する&lt;/h2&gt;

&lt;p&gt;今回はアプリサーバ(APサーバ)をnginxで立てます。&lt;br /&gt;
前回の記事でゼロから作り上げた&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をベースに変更加える形で説明します。&lt;/p&gt;

&lt;p&gt;▼もし前回記事を見ていない場合は確認してください。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step2-on-mac&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;今回も使用ディレクティブを一つ一つ説明します。&lt;/strong&gt;&lt;br /&gt;
もし、途中で躓いた場合は最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;の全容を載せてます。確認してみてください。&lt;/p&gt;

&lt;h2 id=&quot;webサーバとapサーバアプリサーバの違い&quot;&gt;WebサーバとAPサーバ(アプリサーバ)の違い&lt;/h2&gt;

&lt;p&gt;まず事前知識としてWebサーバとAPサーバ(アプリサーバ)の違いについて説明します。&lt;/p&gt;

&lt;h3 id=&quot;webサーバとは&quot;&gt;Webサーバとは？&lt;/h3&gt;
&lt;p&gt;WebサーバはWebブラウザからのリクエストをハンドリングします。&lt;/p&gt;

&lt;p&gt;ブログであれば「先週の記事一覧を閲覧したい」というリクエストです。&lt;br /&gt;
Webサーバはリクエストを受け取るとレスポンスをWebブラウザに送信します。先程の「先週の記事一覧」であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;画像&lt;/code&gt;などを送信します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;はWebサーバになります。&lt;/p&gt;

&lt;h3 id=&quot;apサーバアプリサーバとは&quot;&gt;APサーバ(アプリサーバ)とは？&lt;/h3&gt;
&lt;p&gt;厳密にはWebアプリケーションサーバ(Web Application Server)です。APサーバやアプリサーバと略されることが多いです。&lt;br /&gt;
Webサーバが受け取ったリクエストを処理して、結果をWebサーバに返すサーバです。&lt;br /&gt;
APサーバではRubyやPHPなどプログラムを呼ぶことでリクエストを動的に処理して、Webサーバに分かる形で返しています。&lt;/p&gt;

&lt;h2 id=&quot;nginx--puma--railsを1つのmacで構想する&quot;&gt;nginx + puma + Railsを1つのMacで構想する&lt;/h2&gt;

&lt;p&gt;Ruby+Railsをベースに説明します。&lt;br /&gt;
今回のサーバ構成は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nginx&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puma/puma&quot;&gt;puma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3層構造となります。&lt;/p&gt;

&lt;h3 id=&quot;pumaとは&quot;&gt;pumaとは？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;並行性のために構築されたRuby/Rack Webサーバです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/puma/puma&quot;&gt;github/pumaより引用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pumaはWebサーバでRackにも対応しているため、puma単体でRailsなどRubyを動かすことができます。&lt;br /&gt;
そのため、開発時はpuma単体を使うことが多いです。&lt;/p&gt;

&lt;p&gt;しかしここで疑問が2つあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;なぜWebサーバが2つ使うのか？&lt;/li&gt;
  &lt;li&gt;Rackとは何か？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この２つを説明します。&lt;/p&gt;

&lt;h3 id=&quot;なぜwebサーバが2つ&quot;&gt;なぜWebサーバが2つ？&lt;/h3&gt;

&lt;p&gt;nginxはWebサーバですが、pumaもWeb/Rackサーバです。なぜ二つもWebサーバを使うのでしょうか？&lt;br /&gt;
&lt;strong&gt;それはnginxにはRackに直接つなげることができないためです。&lt;/strong&gt;&lt;br /&gt;
nginxがクライアントからリクエストを受け取ってもそれをRails/Rubyに渡す手段がありません。&lt;/p&gt;

&lt;h3 id=&quot;rackとは&quot;&gt;Rackとは？&lt;/h3&gt;

&lt;p&gt;ではRackとは一体何でしょうか。&lt;br /&gt;
&lt;strong&gt;RackとはRailsなどWebサーバからRubyプログラムを操作するための統一インターフェイスです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;▼Rackの詳細はこちらで説明しています。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/ruby/rails/rack/rails-rack-middleware-extension&quot;&gt;RackとRack Middlewareを知ることでRailsの一部仕組みを理解する&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;なぜnginxが必要なのか&quot;&gt;なぜnginxが必要なのか？&lt;/h3&gt;

&lt;p&gt;ではそもそも何故nginxを使うのでしょうか？役割は何でしょうか？&lt;br /&gt;
rack接続できないnginxを使わずとも、pumaで完結したほうが構成がシンプルになります。&lt;br /&gt;
しかしそれでもnginxを使っている理由は、&lt;strong&gt;パフォーマンスの違いにあります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pumaはRubyで書かれてますが、nginxはCで書かれています。速度差は圧倒的にnginxが高速で多機能です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;処理性能・高い並行性・メモリ使用量の小ささに焦点を当てて開発されており、HTTP, HTTPS, SMTP, POP3, IMAPのリバースプロキシの機能や、ロードバランサ、HTTPキャッシュなどの機能も持つ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/Nginx&quot;&gt;Wikipedia&lt;/a&gt;より引用&lt;/p&gt;

&lt;p&gt;静的ファイルや画像など単純処理の場合にもRailsに渡さずnginxが処理したほうが高速で、CPUリソースも他の動的処理に回せるので全体として効率よく運用できます。&lt;/p&gt;

&lt;h3 id=&quot;今回のリクエストフローを図にする&quot;&gt;今回のリクエストフローを図にする&lt;/h3&gt;

&lt;p&gt;では今回作り上げるサーバ構成を前述した知識を使うと下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/1.png&quot;&gt;&lt;img src=&quot;/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/1.png&quot; width=&quot;100%&quot; alt=&quot;nginxとpumaとRailsを使ったサーバ構成図&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一番左側の層はクライアント層で、ブラウザだったりアプリになります。&lt;br /&gt;
左から右にリクエストフローを箇条書きすると次のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;クライアントがnginxにHTTPリクエストを渡す&lt;/li&gt;
  &lt;li&gt;nginxはHTTPリクエストを分析してRailsに渡すためpumaに渡す&lt;/li&gt;
  &lt;li&gt;pumaは受け取ったリクエストをRackが分かるデータ形式で渡す&lt;/li&gt;
  &lt;li&gt;Rackはルールに基づいてRailsを呼び出す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで補足すると、pumaとrackとRailsは説明都合で過分解してます。&lt;br /&gt;
実際はこれらは同じサーバにのり、呼び出しも通常のRubyによるコールスタックです。&lt;/p&gt;

&lt;h3 id=&quot;rackの役割は疎結合&quot;&gt;Rackの役割は疎結合&lt;/h3&gt;
&lt;p&gt;Rails自体にHTTPサーバ機能はなく、Rackという規約を通してHTTPリクエストを捌ける機能を提供しています。&lt;br /&gt;
pumaはHTTPサーバ機能を持ち、Rackの規約に基づいてRackへHTTPリクエストを渡しているのです。&lt;br /&gt;
つまりRackを通すことでpumaとRailsの疎結合が守られています。&lt;/p&gt;

&lt;h3 id=&quot;nginxはリバースプロキシ&quot;&gt;nginxはリバースプロキシ&lt;/h3&gt;
&lt;p&gt;nginxの立ち位置はリバースプロキシです。&lt;br /&gt;
これは前述したnginxの存在理由と一致します。&lt;br /&gt;
つまり簡単なHTTPリクエストはnginxが担い、難しいリクエストはPuma+Railsに任せるということです。&lt;/p&gt;

&lt;p&gt;そしてnginxからpumaへのデータ伝達テクノロジーとしてUNIXドメインソケットを使います。&lt;/p&gt;

&lt;h3 id=&quot;unixドメインソケットとはプロセス間通信機能&quot;&gt;UNIXドメインソケットとはプロセス間通信機能&lt;/h3&gt;
&lt;p&gt;1つのOS内部でのプロセス間通信でしか使えないですが、高速に通信できます。&lt;br /&gt;
UNIXドメインソケットを使うには、ファイルシステムのパス指定するとファイルが作成されます。&lt;br /&gt;
このファイルはソケットファイルと呼ばれるファイルで、通常ファイルのように実体は存在しません。&lt;br /&gt;
システムを使ったプロセス間の通信手段としてファイルを使います。&lt;br /&gt;
nginxがソケットファイルを作成し、Pumaは作成されたソケットファイルに接続します。&lt;/p&gt;

&lt;h2 id=&quot;macにnginxでwebリバースプロキシサーバを立ち上げる&quot;&gt;MacにnginxでWebリバースプロキシサーバを立ち上げる&lt;/h2&gt;

&lt;p&gt;それでは実際にサーバを構築していきます。まずはメインであるnginxでWebサーバを構築します。&lt;br /&gt;
冒頭でも説明したように前回の記事でゼロから作り上げた&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;をベースに変更加える形で説明します。&lt;/p&gt;

&lt;p&gt;▼もし前回記事を見ていない場合は確認してください。&lt;br /&gt;
&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-step2-on-mac&quot;&gt;Macにnginxでゼロから丁寧に簡易なHTTPサーバを立てる&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;工程は大きく分けて2つです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;nginxにリバースプロキシ設定する&lt;/li&gt;
  &lt;li&gt;pumaの設定をRails側で設定する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;どちらも共通してUNIXドメインソケットのパス指定です。&lt;/p&gt;

&lt;h3 id=&quot;nginxにリバースプロキシ設定する&quot;&gt;nginxにリバースプロキシ設定する&lt;/h3&gt;

&lt;p&gt;前回ではlocationに対してどのフォルダを見るのかrootを設定しました。&lt;br /&gt;
静的処理の場合はそれで良かったのですが、動的処理は、処理を委任する必要があります。&lt;/p&gt;

&lt;p&gt;次のように&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt;ディレクティブが重要になってます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
  }

  server {
    location / {
      proxy_pass http://puma;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このnginx.confの各ディレクティブを一つずつ見ていきます。必要であれば関連ディレクティブも見ていきます。&lt;/p&gt;

&lt;h2 id=&quot;upstreamコンテキスト&quot;&gt;upstreamコンテキスト&lt;/h2&gt;

&lt;p&gt;サーバグループを定義します。異なるポートや通信方式のサーバ群を混在できます。
サーバグループの中のサーバは、リクエストをバランシングして渡されます。&lt;br /&gt;
ここでの&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;とはネットワークで下流から上流の通信機器へデータが流れることを指してます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream name { ... }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;次の例は4つのサーバを混在させたサーバグループです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstraem backend {
  server backend1.example.com weight=5; # ①
  server 127.0.0.1:8080 maxfails=3 fail_timeout=30s; # ②
  server unix:/tmp/backend3; # ③

  server backup1.example.com backup; # ④
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;サーバ間の分散方式は、デフォルトでは加重ラウンドロビンバランシング方式(weighted round-robin balancing method)で分散されます。
これはサーバに対するリクエストをサーバ負荷に無関係に、ローテーションでウェイトに従い各サーバに振り分ける方式です。
上記サーバグループに7つのリクエストがあったら次のように配信されます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;5つのリクエストが①サーバに送信される&lt;/li&gt;
  &lt;li&gt;1つのリクエストが②と③サーバにそれぞれ送信される&lt;/li&gt;
  &lt;li&gt;サーバ通信中にエラー発生したら、リクエストは次のサーバに渡される&lt;/li&gt;
  &lt;li&gt;機能してる全サーバが試行されるまで続く&lt;/li&gt;
  &lt;li&gt;どのサーバからも正常応答を取得できない場合は、最後に通信したサーバの結果を受け取る&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;serverディレクティブ&quot;&gt;serverディレクティブ&lt;/h3&gt;

&lt;p&gt;アドレスとサーバパラメータを定義します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;server address [parameters];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;アドレスはドメインかIPアドレスとポート、または&lt;code class=&quot;highlighter-rouge&quot;&gt;unix:&lt;/code&gt;プレフィックスの後に指定されたUNIXドメインソケットパスを指定できます。
ポート未指定はポート80が使用されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fuga.example.com&lt;/li&gt;
  &lt;li&gt;127.0.0.1:8080&lt;/li&gt;
  &lt;li&gt;unix:/usr/local/var/run/nginx/nginx.sock&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;パラメータ名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;weight&lt;/td&gt;
      &lt;td&gt;サーバウェイト。デフォルトは1。加重ラウンドロビンバランシングで使います&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_conns&lt;/td&gt;
      &lt;td&gt;プロキシされるサーバへの同時アクティブ接続最大数を制限。デフォルトは０で無制限。サーバグループが共有メモリ※にない場合はこの制限はワーカープロセス毎に機能&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_fails&lt;/td&gt;
      &lt;td&gt;デフォルトは1回。ヘルスモニタで後述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max_timeout&lt;/td&gt;
      &lt;td&gt;デフォルトは10秒。ヘルスモニタで後述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;backup&lt;/td&gt;
      &lt;td&gt;サーバをバックアップサーバとして設定。プライマリサーバが利用不可時にリクエストが渡る。&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ip_hash&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;random&lt;/code&gt;ロードバランシング方式時は利用不可&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;down&lt;/td&gt;
      &lt;td&gt;サーバを永続的に使用不可として設定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resolve&lt;/td&gt;
      &lt;td&gt;サーバのドメイン名に対応するIPアドレスの変更を監視し、再起動なくupstream構成を自動変更できます。サーバグループは共有メモリに存在する必要がある&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;route&lt;/td&gt;
      &lt;td&gt;サーバのルート名を設定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;service&lt;/td&gt;
      &lt;td&gt;DNS SRVレコードの解決を有効にし、サービス名を設定。これを使うにはサーバの解決パラメタを指定し、ポート番号なしホスト名指定が必要&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slow_start&lt;/td&gt;
      &lt;td&gt;サーバ不可から回復後にサーバのウェイトをゼロから公称値に回復する時間を設定。デフォルトは0、つまりスロースタートは無効&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;drain&lt;/td&gt;
      &lt;td&gt;ドレインモードに設定する。このモードはサーバにバインドされた要求のみがプロキシされる&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※共有メモリに関しては後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;zone&lt;/code&gt;ディレクティブを確認してください。&lt;br /&gt;
グループにサーバ一つの場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;max_fails&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;max_timeout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slow_start&lt;/code&gt;は無視される。&lt;/p&gt;

&lt;p&gt;今回はUNIXドメインソケット通信1つしかないため、次のようにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ソケットファイルのパスにはアプリ名を入れるのが良いでしょう。
まだアプリ(Railsアプリ)は用意していないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;app-name&lt;/code&gt;と仮置してます。&lt;/p&gt;

&lt;h4 id=&quot;ヘルスモニタ&quot;&gt;ヘルスモニタ&lt;/h4&gt;
&lt;p&gt;max_timeoutパラメータの指定期間内にmax_failsパラメータ指定回数失敗すると、&lt;strong&gt;サーバ利用不可&lt;/strong&gt; とみなします。
そしてmax_timeoutパラメータの期間、サーバ利用不可となります。&lt;/p&gt;

&lt;p&gt;サーバとの通信試行が指定回数失敗したらサーバ利用不可と判断する時間、もしくはサーバが利用できないとみなされる期間。デフォルトは10秒&lt;/p&gt;

&lt;h4 id=&quot;注意max_connsを超えるケース&quot;&gt;注意：max_connsを超えるケース&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;アイドル状態のkeepalive接続&lt;/li&gt;
  &lt;li&gt;複数のワーカー&lt;/li&gt;
  &lt;li&gt;共有メモリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が有効になっている場合、プロキシサーバへのアクティブ状態またはアイドル状態の接続総数が&lt;code class=&quot;highlighter-rouge&quot;&gt;max_conns&lt;/code&gt;値を超える場合があります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive&lt;/code&gt;接続に関しては、後述する&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive&lt;/code&gt;ディレクティブを確認してください。&lt;/p&gt;

&lt;h3 id=&quot;zoneディレクティブ&quot;&gt;zoneディレクティブ&lt;/h3&gt;
&lt;p&gt;「ワーカプロセス間で共有されるグループ構成」と「実行状態」を保持する共有メモリゾーンの名前とサイズを定義します。
この設定は複数グループが同じゾーンを共有するケースがあります。その場合はサイズを1回指定で十分です。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;zone name [size];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;商用サブスクリプションの場合は、nginx再起動せずグループメンバーシップ変更できたり、特定サーバの設定変更できます。&lt;/p&gt;

&lt;p&gt;共有メモリを使わない場合は、各ワーカプロセスはサーバグループ設定のそれぞれのコピーを保持し、関連するカウンターのそれぞれのセットを保存します。
カウンターにはグループ内のそれぞれのサーバへの現在の接続数が含まれ、サーバへリクエスト送信の失敗数が含まれます。
サーバグループの設定は変更不可です。
共有メモリが有効な場合、個別でもっているサーバグループ設定全てを共有メモリで扱います。&lt;/p&gt;

&lt;p&gt;また共有メモリが有効な場合、あるプロセスがサーバ利用不可と判断したら、別プロセスにも共有されます。
無効な場合は、それぞれがサーバ利用不可と判断されるまでサーバへリクエストを送信し続けます。&lt;/p&gt;

&lt;p&gt;今回はワーカープロセスは複数個あるので、設定しておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream puma {
  zone nginx 64k;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;keepaliveディレクティブ&quot;&gt;keepaliveディレクティブ&lt;/h3&gt;

&lt;p&gt;Keep-Aliveを有効にします。
&lt;code class=&quot;highlighter-rouge&quot;&gt;connections&lt;/code&gt;パラメータは、Keep-alive接続の最大数を設定します。
数を超えると使用頻度が低い接続が閉じます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive connections;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;この接続最大数はnginxワーカプロセスが開くことができるサーバの接続数の総数を超えてはいけません。&lt;/strong&gt;
超えてしまうと、ワーカプロセスが開ける接続数を超えるリクエストが来てもkeepaliveの期限切れするまで接続できません。&lt;/p&gt;

&lt;p&gt;keepalive接続数で処理するリクエストの最大数は &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests&lt;/code&gt;ディレクティブで設定できて、
タイムアウトは&lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout&lt;/code&gt;ディレクティブで設定できます。&lt;/p&gt;

&lt;p&gt;今回はMac上ということで主に開発色が強いので1にします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream puma {
  keepalive 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;keepalive_requestsディレクティブ&quot;&gt;keepalive_requestsディレクティブ&lt;/h3&gt;

&lt;p&gt;1つのkeepalive接続を介して処理するリクエスト最大数を設定します。
最大数のリクエストが処理された後、接続が閉じます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests number;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_requests 100;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回はデフォルト値でいこうと思います。&lt;/p&gt;

&lt;h4 id=&quot;なぜ接続数が決められてるのか&quot;&gt;なぜ接続数が決められてるのか？&lt;/h4&gt;
&lt;p&gt;無制限ではダメな理由は、接続毎にメモリ割り当てが行われているため、定期的に接続を閉じてメモリ解放を行わないと、要求が高すぎるとメモリ使用量が高くなり推奨されません。&lt;/p&gt;

&lt;h3 id=&quot;keepalive_timeoutディレクティブ&quot;&gt;keepalive_timeoutディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシサーバーへのkeepalive接続のタイムアウトを設定します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout timeout;&lt;/code&gt;&lt;br /&gt;
デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalive_timeout 60s;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回はデフォルト値でいこうと思います。&lt;/p&gt;

&lt;h3 id=&quot;proxy_passディレクティブ&quot;&gt;proxy_passディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシするサーバのプロトコルとアドレス、場所となるURIをオプションで設定します。
プロトコルは&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;を指定できます。アドレスはドメイン名、IPアドレスとオプションでポートを指定できます。
UNIXドメインソケットの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;unix:&lt;/code&gt;をつけます。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass URL;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例1： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass http://localhost:8080/uri/;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;例2： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass https://backend.example.com;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;例3： &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass http://unix:/tmp/backend.socket:/uri/;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ドメイン名が複数アドレスに解決する場合はラウンドロビン方式で使用します。さらにアドレスをサーバグループとして指定できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;パラメータには変数が使えます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /name/ {
  proxy_pass http://127.0.0.1 $request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;この場合ディレクティブでURIを指定すると、元のリクエストURIを置き換えてそのままサーバに渡します。&lt;/p&gt;

&lt;p&gt;変数を使うと、アドレスがドメイン名なら名前解決はサーバグループ間で検索され、
見つからない場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;resolver&lt;/code&gt;ディレクティブを使用します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resolver&lt;/code&gt;ディレクティブとはネームサーバを設定するディレクティブです。&lt;/p&gt;

&lt;p&gt;今回はUNIXドメインソケットなので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;で設定した名前を使います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  location / {
    proxy_pass http://puma;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy_set_headerディレクティブ&quot;&gt;proxy_set_headerディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシサーバからパス先サーバにheader情報を追加で渡します。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_set_header field value;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;今回は次のヘッダーをパス先サーバに送ります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
  proxy_set_header    Host    $host;
  proxy_set_header    X-Real-IP    $remote_addr;
  proxy_set_header    X-Forwarded-Host       $host;
  proxy_set_header    X-Forwarded-Server    $host;
  proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header    X-Forwarded-Proto $scheme;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy_hide_headerディレクティブ&quot;&gt;proxy_hide_headerディレクティブ&lt;/h3&gt;

&lt;p&gt;クライアントに渡さないヘッダーフィールドを設定する。&lt;/p&gt;

&lt;p&gt;構文: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_hide_header field;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;デフォルトでは下記のヘッダーフィールドは渡しません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Date&lt;/li&gt;
  &lt;li&gt;Server&lt;/li&gt;
  &lt;li&gt;X-Pad&lt;/li&gt;
  &lt;li&gt;X-Accel-*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに逆に許可は、&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass_header&lt;/code&gt;ディレクティブを使用します。&lt;/p&gt;

&lt;p&gt;今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Powered-By&lt;/code&gt;を隠します。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
  proxy_hide_header   X-Powered-By;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Powered-By&lt;/code&gt;フィールドは一部のFWではFW情報やバージョンをこのフィールドに乗せてクライアントに送ります。
使ってるFWバージョンに脆弱性が見つかると攻撃手段を教えているようなもので、通常利用ならクライアント側に教える目的もないため隠します。&lt;/p&gt;

&lt;h3 id=&quot;proxy_redirectディレクティブ&quot;&gt;proxy_redirectディレクティブ&lt;/h3&gt;

&lt;p&gt;プロキシ先の応答の&lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;Refresh&lt;/code&gt;ヘッダーフィールドで変更が必要か設定します。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect default;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect off;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect redirect replacement;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デフォルト: &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect default;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例：
&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_redirect http://localhost:8000/two/ http://frontend/one/;&lt;/code&gt;と設定した場合&lt;br /&gt;
プロキシ先から&lt;code class=&quot;highlighter-rouge&quot;&gt;Location: http://localhost:8000/two/some/uri&lt;/code&gt;が返ってきたら
クライアントには&lt;code class=&quot;highlighter-rouge&quot;&gt;Location: http://frontend/one/some/uri/&lt;/code&gt;を返す&lt;/p&gt;

&lt;p&gt;パラメータ値が&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;では次の２つの設定は同じになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /one/ {
  proxy_pass     http://upstream:port/two/;
  proxy_redirect default;
}
location /one/ {
  proxy_pass     http://upstream:port/two/;
  proxy_redirect http://upstream:port/two/ /one/;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回はプロキシ先にドメインが正しくを伝えるためにoffにします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  location / {
    proxy_redirect off;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;出来上がった設定ファイルnginxconf&quot;&gt;出来上がった設定ファイル(nginx.conf)&lt;/h2&gt;

&lt;p&gt;この記事を通して出来上がった設定ファイル(&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;)になります。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_processes  4;

error_log /usr/local/var/log/nginx/error.log error;

worker_rlimit_nofile 2048;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                    '$status $body_bytes_sent &quot;$http_referer&quot; '
                    '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

  access_log /usr/local/var/log/nginx/access.log main;

  sendfile on;
  tcp_nopush on;

  keepalive_timeout 60;

  gzip on;
  gzip_min_length 1024;
  gzip_types text/css text/javascript application/json;

  upstream puma {
    server unix:///usr/local/var/work/app-name/tmp/sockets/puma.sock;
    zone nginx 64k;
    keepalive 1;
  }

  server {
    listen 8080;
    server_name localhost;

    charset utf-8;

    access_log /usr/local/var/log/nginx/localhost.access.log  main;

    error_page 404 /404.html;

    location / {
      proxy_pass http://puma;
      proxy_set_header    Host    $host;
      proxy_set_header    X-Real-IP    $remote_addr;
      proxy_set_header    X-Forwarded-Host       $host;
      proxy_set_header    X-Forwarded-Server    $host;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_hide_header   X-Powered-By;
    }


    location ~* \.(gif|jpg|jpeg|png)$ {
      root /usr/local/var/www/images;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pumaの設定をrails側で設定する&quot;&gt;pumaの設定をRails側で設定する&lt;/h2&gt;
&lt;p&gt;puma単体で動かしても動作確認しにくいのでサンプル用のRailsアプリを用意します。&lt;/p&gt;

&lt;p&gt;下記環境でRailsアプリを用意します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby 2.6.5&lt;/li&gt;
  &lt;li&gt;Rails 6.0.2.1&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails new nginx-puma-rails &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql &lt;span class=&quot;nt&quot;&gt;--skip-git&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-javascript&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-spring&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip-bundle&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;nginx-puma-rails
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rake db:create db:migrate db:seed
Created database &lt;span class=&quot;s1&quot;&gt;'nginx_puma_rails_development'&lt;/span&gt;
Created database &lt;span class=&quot;s1&quot;&gt;'nginx_puma_rails_test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次にpumaの設定ファイルでポートlistenではなくUNIXドメインソケットの変更します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx-puma-rails/config/puma.rb&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Specifies the `port` that Puma will listen on to receive requests; default is 3000.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# port        ENV.fetch(&quot;PORT&quot;) { 3000 }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ↑ portコマンドはコメントで動かないようにする&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unix://var/local/work/nginx-puma-rails/tmp/sockets/puma.sock&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;nginx.conf&lt;/em&gt; ではアプリ名を仮(app-name)にしてたいので、ここも合わせます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http {
  upstream puma {
    server unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nginxとrailsアプリを起動して疎通する&quot;&gt;nginxとRailsアプリを起動して疎通する&lt;/h2&gt;

&lt;p&gt;UNIXドメインソケットのパスをpumaとnginxそれぞれ合わせたら、Railsアプリを起動します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails s
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Booting Puma
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Rails 6.0.2.1 application starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;development
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rails server &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more startup options
Puma starting &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;single mode...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version 4.3.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ruby 2.6.5-p114&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, codename: Mysterious Traveller
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Min threads: 5, max threads: 5
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Environment: development
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Listening on unix:///usr/local/var/work/nginx-puma-rails/tmp/sockets/puma.sock
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先程指定したパスにあるUNIXドメインソケットファイルをListenするようになります。&lt;/p&gt;

&lt;p&gt;ではnginxの開いてるlistenからアクセスして、railsにログが流れるか疎通確認してみます。
nginxが未起動なら起動してください。&lt;/p&gt;

&lt;p&gt;ブラウザで&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;にアクセスします。&lt;br /&gt;
Railsアプリに次のようなアクセスログが流れたら疎通成功です。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started GET &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;127.0.0.1 at 2020-03-02 00:54:43 +0900
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.6ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SET NAMES utf8mb4,  @@SESSION.sql_mode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CONCAT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CONCAT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@@sql_mode, &lt;span class=&quot;s1&quot;&gt;',STRICT_ALL_TABLES'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;',NO_AUTO_VALUE_ON_ZERO'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,  @@SESSION.sql_auto_is_null &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, @@SESSION.wait_timeout &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2147483
Processing by Rails::WelcomeController#index as &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  Rendering vendor/bundle/ruby/2.6.0/gems/railties-6.0.2.1/lib/rails/templates/rails/welcome/index.html.erb
  Rendered vendor/bundle/ruby/2.6.0/gems/railties-6.0.2.1/lib/rails/templates/rails/welcome/index.html.erb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Duration: 7.3ms | Allocations: 311&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Completed 200 OK &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;13ms &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Views: 10.0ms | ActiveRecord: 0.0ms | Allocations: 1670&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ファイルディスクリプタの罠&quot;&gt;ファイルディスクリプタの罠&lt;/h3&gt;
&lt;p&gt;ここで一つ注意点があります。
前回の記事で1プロセスあたりが扱えるファイルディスクリプタ上限について設定しました。
1ワーカープロセス32個のファイルを扱える設定にしてあります。
この32とは1プロセスですが、一つのプロセスにスレッドを複数持つことができるため、スレッドが多すぎるとアプリによっては簡単に32個を超えてしまいます。
pumaのスレッド数は性能だけでなく上限も考慮が必要です。&lt;/p&gt;

&lt;p&gt;現在のpuma設定では最小スレッド5,最大スレッド5、つまり常時5スレッド稼働しています。
つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;32 ÷ 5 ≒ 6&lt;/code&gt; 1スレッドあたり6個以上のファイル操作を行うと上限エラーが発生します。&lt;/p&gt;

&lt;h3 id=&quot;nginxのプロセス数とpumaのプロセス数&quot;&gt;nginxのプロセス数とpumaのプロセス数&lt;/h3&gt;

&lt;p&gt;nginxはリバースプロキシサーバとして立てているため、プロセス数は単純化すれば窓口の数になります。
窓口の数が多すぎて、実際の作業場となるpumaのプロセス数が少ないとpumaサーバがボトルネックになります。
nginxとpumaのプロセス数のバランスが重要になってきます。&lt;/p&gt;

&lt;h2 id=&quot;mac1台にnginxでwebサーバとpumaでアプリサーバを立てた&quot;&gt;Mac1台にnginxでWebサーバとPumaでアプリサーバを立てた&lt;/h2&gt;

&lt;p&gt;実際にMac1台にnginxでWebリバースプロキシサーバとPumaアプリサーバ立てることができました。&lt;br /&gt;
Railsアプリを弄っているだけだとWebアプリがどういう仕組みで、そのうちRailsアプリはどこに配置されるのかイメージできなかったりします。
Mac1台でnginxでWebサーバとPumaでアプリサーバを立てることで、nginxからリバースプロキシで送信されたリクエストをpumaWebサーバが受信してRack通じてRailsアプリに処理を渡していることが分かります。&lt;/p&gt;

&lt;p&gt;「Mac上でnginx」という本番では無意味な環境でも理解する上ではとても効率の良い環境です。&lt;/p&gt;

&lt;p&gt;次の記事は「&lt;span&gt;&lt;a href=&quot;/web/nginx/web-nginx-getting-started-customize-on-mac&quot;&gt;Mac上のnginx設定ファイルをドメイン毎に分ける&lt;/a&gt;&lt;/span&gt;
」について説明します。&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="nginx" /><category term="mac" /><category term="ruby" /><category term="rails" /><summary type="html">MacでWebサーバnginxを立ち上げるための入門記事シリーズ3回目です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2020-02-24-web-nginx-getting-started-step3-on-mac/0.png" /></entry></feed>