<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2019-09-02T01:28:42+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">p4mergeでgit mergeの衝突を解決する</title><link href="https://blog.mothule.com/tools/git/git-merge-p4merge" rel="alternate" type="text/html" title="p4mergeでgit mergeの衝突を解決する" /><published>2019-09-02T00:00:00+09:00</published><updated>2019-09-02T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/git/git-merge-p4merge</id><content type="html" xml:base="https://blog.mothule.com/tools/git/git-merge-p4merge">&lt;p&gt;gitを使っていると必ず出くわすことになるコンフリクト。
機械的なマージでは解決できない場合にユーザー自身の手で解決を丸投げする面倒くさいあれです。
衝突してるファイルをエディタで見ると、いつ見ても見慣れないセパレータで表現されておりますます嫌になります。
今回はGUIでグラフィカルに衝突解決を行うツール&lt;strong&gt;p4merge&lt;/strong&gt;について紹介します。&lt;/p&gt;

&lt;h2 id=&quot;guiでマージするならp4merge&quot;&gt;GUIでマージするならp4merge&lt;/h2&gt;

&lt;p&gt;p4mergeをGitの衝突解決ツールとして設定すると、衝突時にp4mergeでグラフィカルにマージを行うことができます。&lt;/p&gt;

&lt;h3 id=&quot;p4merge-のいいところ&quot;&gt;p4merge のいいところ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;衝突位置にだけ移動するショートカットが用意されている&lt;/li&gt;
  &lt;li&gt;衝突ソース毎に背景色が違うので見分けがつく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;インストール方法&quot;&gt;インストール方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.perforce.com/ja/zhipin/helix-core-apps/merge-diff-tool-p4merge&quot;&gt;公式サイト&lt;/a&gt;からOSを選んでダウンロードします。&lt;/p&gt;

&lt;h2 id=&quot;p4mergeが起動するように設定&quot;&gt;p4mergeが起動するように設定&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; を次のように設定します。他の無関係な設定は省いています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;merge]
  tool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; p4merge
  keepBackup &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mergetool &lt;span class=&quot;s2&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Applications/p4merge.app/Contents/MacOS/p4merge
  cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; p4merge &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MERGED&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  keepTemporaries &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;trustExitCode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;keepBackup &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このように設定すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git mergetool&lt;/code&gt; と実行すれば、 p4merge　が起動します。&lt;/p&gt;

&lt;p&gt;もし、マージではなく比較でも p4merge を使いたい場合は次のように設定します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;diff]
  tool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; vimdiff

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;difftool]
	prompt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;difftool &lt;span class=&quot;s2&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
	cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Applications/p4merge.app/Contents/MacOS/p4merge &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;
	trustExitCode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この設定では、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git diff&lt;/code&gt; を実行すればユニファイド型式で表示され、&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git difftool&lt;/code&gt;を実行すれば vimdiff で表示され、&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git difftool -t p4merge&lt;/code&gt;を実行すれば p4merge で表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;p4mergeの設定&quot;&gt;p4mergeの設定&lt;/h2&gt;

&lt;p&gt;p4merge自身の設定についてです。デフォルトでも使うことは可能ですが、いくつか設定をしておくことで余計な穴にハマらず使えるかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-02-git-merge-p4merge-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-02-git-merge-p4merge-1.png&quot; width=&quot;75%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フォントは日本語対応フォントにする&lt;/li&gt;
  &lt;li&gt;文字が重なる場合はフォントを等倍にする&lt;/li&gt;
  &lt;li&gt;encode は utf-8(厳密にはファイルと合わせる)&lt;/li&gt;
  &lt;li&gt;改行タイプはシステムと合わせる(厳密にはgit commit時に自動変換オプションもあるのでそっちの兼ね合いも必要)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparison method&lt;/code&gt; は 改行差異とスペース幅を無視する(ここは好みの問題でもある)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tools" /><category term="git" /><category term="p4merge" /><summary type="html">gitを使っていると必ず出くわすことになるコンフリクト。 機械的なマージでは解決できない場合にユーザー自身の手で解決を丸投げする面倒くさいあれです。 衝突してるファイルをエディタで見ると、いつ見ても見慣れないセパレータで表現されておりますます嫌になります。 今回はGUIでグラフィカルに衝突解決を行うツールp4mergeについて紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-02-git-merge-p4merge.png" /></entry><entry><title type="html">RackとRack Middlewareを知ることでRailsの一部仕組みを理解する</title><link href="https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension" rel="alternate" type="text/html" title="RackとRack Middlewareを知ることでRailsの一部仕組みを理解する" /><published>2019-09-01T00:00:00+09:00</published><updated>2019-09-01T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension">&lt;p&gt;Railsの挙動を拡張するには3つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rack Middleware&lt;/li&gt;
  &lt;li&gt;Railtie&lt;/li&gt;
  &lt;li&gt;その他, CLIなど&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回は &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack Middleware&lt;/code&gt; で拡張するときの基本や拡張先となる&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack&lt;/code&gt;の仕組みについて調べました。&lt;br /&gt;
この記事でRailsとRackサーバーの関係や、Rack自体の知識とRackに準拠した拡張&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack Middleware&lt;/code&gt;について初めの一歩程度は理解が深まると思います。&lt;/p&gt;

&lt;h2 id=&quot;rackとは規約&quot;&gt;Rackとは規約&lt;/h2&gt;

&lt;p&gt;Rackとは大雑把にまとめると、Web server と Ruby framework 間をつなぐ規約、取り決めです。&lt;br /&gt;
PythonのPSGIの規約を参考に登場し、サーバーとRubyで実装されたアプリの差異を埋める緩衝材みたいな存在です。&lt;/p&gt;

&lt;h3 id=&quot;規約について&quot;&gt;規約について&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ru&lt;/code&gt;を拡張子のRubyファイルを用意し、決まったシグネチャとレスポンスを返すメソッドを用意することでRackとして機能します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;シグネチャはHashを引数にした&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;メソッド&lt;/li&gt;
  &lt;li&gt;レスポンスは次の3つを含む配列を返す
    &lt;ul&gt;
      &lt;li&gt;HTTPステータスコード&lt;/li&gt;
      &lt;li&gt;ヘッダー情報が格納されたHash&lt;/li&gt;
      &lt;li&gt;コンテンツオブジェクト&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり最小コードで表すと次のコードになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.ru&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;引数Hashは慣習として&lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt;がネーミングされます。&lt;/li&gt;
  &lt;li&gt;次のコード例では、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc#call&lt;/code&gt; によりシグネチャの制約を満たしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rack-middlewareはいわばパイプ&quot;&gt;Rack Middlewareはいわばパイプ&lt;/h2&gt;

&lt;p&gt;Rack MiddlewareとはRackの規約に準拠し、
Rackアプリに機能を追加するミドルウェアです。&lt;/p&gt;

&lt;h2 id=&quot;rackアプリケーションを作ってみる&quot;&gt;Rackアプリケーションを作ってみる&lt;/h2&gt;

&lt;p&gt;文章だけではイメージはしにくいので、実際に動く簡単なRackアプリを作ってみます。&lt;/p&gt;

&lt;p&gt;ますRackアプリを作る上で便利クラスなどが集まったgemを用意する&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rack&lt;/code&gt;をインストールすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;rackup&lt;/code&gt;というコマンドが使えるようになります。&lt;br /&gt;
先程の &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;rakeup&lt;/code&gt; で呼ぶことでサーバーが起動します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rackup config.ru
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;※ &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; であればそもそも指定が不要で &lt;code class=&quot;highlighter-rouge&quot;&gt;rakeup&lt;/code&gt; だけでいい。&lt;/p&gt;

&lt;h2 id=&quot;rack-middlewareを作ってみる&quot;&gt;Rack Middlewareを作ってみる&lt;/h2&gt;

&lt;p&gt;Rack Middlewareとは先程のRackアプリに対して、処理を追加するプログラムです。&lt;br /&gt;
次のような &lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaceWords&lt;/code&gt; クラスを &lt;code class=&quot;highlighter-rouge&quot;&gt;use ReplaceWords&lt;/code&gt; と呼ぶことで
処理を追加することができます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReplaceWords&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http_status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/rake/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rack'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, Rack world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReplaceWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rack-middlewareには制約がある&quot;&gt;Rack Middlewareには制約がある&lt;/h3&gt;

&lt;p&gt;Rack同様にミドルウェアにもシグネチャとレスポンスを守る必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rackアプリを引数とした&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;メソッドがある&lt;/li&gt;
  &lt;li&gt;Rackアプリ同様に、 Hashを引数とした&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;メソッドがある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この制約を守っていれば、パイプのように連結することも可能になります。&lt;/p&gt;

&lt;p&gt;下記は2つのRack Middlewareを連結したことになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReplaceWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UpperWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようにパイプライン、ストリームのように連結して受け取った値を次に渡すことができるのは、制約を守っているためです。&lt;/p&gt;

&lt;h2 id=&quot;envの中身&quot;&gt;envの中身&lt;/h2&gt;
&lt;p&gt;env、&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;の第一引数には、リクエスト情報が格納されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アクセスパス&lt;/li&gt;
  &lt;li&gt;IPアドレス&lt;/li&gt;
  &lt;li&gt;Acceptなどのヘッダー&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rack-middlewareにおけるenvの活用&quot;&gt;Rack Middlewareにおけるenvの活用&lt;/h3&gt;

&lt;p&gt;Rack Middlewareを連結することでenvはContext情報のように取り回され続きます。&lt;/p&gt;

&lt;p&gt;そのため env に値を追加すれば、次のRack Middlewareでその値を使うことができます。&lt;/p&gt;

&lt;h2 id=&quot;railsのrack-middlewareを確認&quot;&gt;RailsのRack Middlewareを確認&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rake middleware
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のrakeコマンドで &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; 部分一覧を表示します。&lt;br /&gt;
RailsのRackがどのようなMiddlewareを経てRailsに渡ってきてるのか興味がある方は調べてみると面白いかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;railsでrack-middlewareを追加する&quot;&gt;RailsでRack Middlewareを追加する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt;を編集ではなく、 &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.rb&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;config/envrionments/*.rb&lt;/code&gt; ファイルの中で &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; で登録します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LogMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;RackやRack Middlewareを知ることで、Railsの拡張性の高さや実際にどうやって拡張されているのかを知ることができたと思います。&lt;/p&gt;

&lt;p&gt;このように普段ほとんど関わることのない機能であっても知ることで色んな所の仕組みが理解できるようになるのはおもしろいですね。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="rack" /><category term="rack-middleware" /><summary type="html">Railsの挙動を拡張するには3つの方法があります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">はてなブログからJekyllを使ったGitHub Pagesに移行した理由</title><link href="https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog" rel="alternate" type="text/html" title="はてなブログからJekyllを使ったGitHub Pagesに移行した理由" /><published>2019-08-30T00:00:00+09:00</published><updated>2019-08-30T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog</id><content type="html" xml:base="https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog">&lt;p&gt;長年利用していた&lt;code class=&quot;highlighter-rouge&quot;&gt;はてなブログ&lt;/code&gt;からGitHub Pages上でJekyllを使った静的生成サイトに移行しました。
この記事ではなぜ移行したのか？なぜJekyllなのか？なぜGitHub Pagesなのか？といった選定理由や移行理由などについて
まとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;移行したかった理由&quot;&gt;移行したかった理由&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;カスタマイズが非常にやりにくかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;細かい理由はありますが、この1点が常に不便で作りたいサイトが作れない煩わしさがありました。&lt;/p&gt;

&lt;p&gt;パンくずリストを配置したい.グロナビを配置したい.関連記事による回遊率を上げたい.toc置きたい.
決められた場所ではなくもっと全体的に自由に改変したい。
という欲が常に付きまとい、CSSやJavascriptを弄るなどして我慢していましたが、&lt;/p&gt;

&lt;p&gt;移行先について調べてしまったら追加で&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;記事に対して自動処理を挟みたい時に挟めるなど実現可能性を確保しておきたい&lt;/li&gt;
  &lt;li&gt;自分のブランディングに対して独自ドメインが必須だが、無料アカウントではできない&lt;/li&gt;
  &lt;li&gt;得た知識で自分でSEO対応したブログを作ってみたい&lt;/li&gt;
  &lt;li&gt;Ruby製ツールに慣れることでRubyスキルもあげれるかもしれない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などの欲も出てきて、移行することを決断しました。
ちなみにこのように移行について深刻に悩んだのは5回目ぐらいです。&lt;/p&gt;

&lt;h3 id=&quot;移行先にgithub-pagesを選んだ理由&quot;&gt;移行先にGitHub Pagesを選んだ理由&lt;/h3&gt;
&lt;p&gt;ホスティング先をGitHub Pagesを選んだ理由は至ってシンプルで、技術ブログっぽいしエンジニアっぽいって理由なだけです。&lt;/p&gt;

&lt;h2 id=&quot;静的サイト生成ツールにjekyllを選んだ理由&quot;&gt;静的サイト生成ツールにJekyllを選んだ理由&lt;/h2&gt;

&lt;h3 id=&quot;もともとはmiddlemanを予定していました&quot;&gt;もともとはMiddlemanを予定していました&lt;/h3&gt;
&lt;p&gt;理由はRubyで書かれたツールで、View周りをHamlで書くことができたためです。
しかし、Middlemanを調べると同じようにMiddlemanから別ツールに移行する記事もありました。
それら記事はプレビューや記事速度が遅すぎるという理由でHUGOに移行していました。
HUGOはGolang製でGo言語の処理速度により記事生成やプレビューがとにかく早い。が売りでした。
しかし自分はこれを検討はしたものの採用はしませんでした。なぜならGo言語についてあまり構文を理解していないので、
プラグイン作成とかちょっとしたView内コードを書くなどカスタマイズしたいときにGo言語が障害となりうると思っていたからです。
実際サンプル覗いてもGo言語特有に&lt;code class=&quot;highlighter-rouge&quot;&gt;ret, error := hoge&lt;/code&gt; というエラーとレスポンスの同時受け取りが目に入り、却下しました。&lt;/p&gt;

&lt;h3 id=&quot;他にどんなツールがあるから調べた&quot;&gt;他にどんなツールがあるから調べた&lt;/h3&gt;
&lt;p&gt;もともと知っているツールが少なかったこともあって、一度全体的に静的サイト生成ツールについて情報収集を行いました。
結果Ruby製でMiddlemanとJekyllがありました。&lt;/p&gt;

&lt;p&gt;このときMiddlemanではなくJekyllに揺れた理由として&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MiddlemanのRepositoryが動いていない&lt;/li&gt;
  &lt;li&gt;JekyllはGitHub Pagesが公式サポートしている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2点です。&lt;/p&gt;

&lt;h2 id=&quot;jekyllはmasterにpushすれば自動生成される仕組みがある&quot;&gt;Jekyllはmasterにpushすれば自動生成される仕組みがある&lt;/h2&gt;

&lt;p&gt;Jekyllにはgithubが用意するgemに則ったサイト構成であれば、masterにpushするだけであとの生成は、github側が自動で生成してくれるらしいです。
自分もその恩恵にあやかろうと思っていたのですが、対象のRuby言語バージョンが低くて、流石にここまで低いバージョンでメンテやカスタマイズしたくないなと思い、
自分でdeploy用スクリプトを用意して運用しています。&lt;/p&gt;

&lt;h2 id=&quot;jekyllのviewがliquidで苦労する&quot;&gt;JekyllのViewがLiquidで苦労する&lt;/h2&gt;

&lt;p&gt;JekyllのViewはLiquidという慣れないビューエンジンを使っており、最初大変でしたが、
&lt;a href=&quot;https://jekyllrb-ja.github.io/docs/&quot;&gt;Jekyllのサイト&lt;/a&gt;が日本語で書いてあり結構分かりやすかったので、
チュートリアルをやったりして覚えました。&lt;/p&gt;

&lt;h2 id=&quot;カスタムタグがrubyで書ける&quot;&gt;カスタムタグがRubyで書ける&lt;/h2&gt;
&lt;p&gt;Markdown中に記載できるタグを自作ができて、かつRubyで処理を書くので、Rubyに触る機会が増やす目的は達成できたかなと思います。&lt;/p&gt;

&lt;h2 id=&quot;ドメインにはムームードメインを使った&quot;&gt;ドメインにはムームードメインを使った&lt;/h2&gt;
&lt;p&gt;自分用のドメインを買うのにもどこがいいか調べた結果ムームードメインにしました。
もともとはGMOのどれかにしようと目星は付けていましたが、
同じ親会社のサービスであるお名前.comは代理公開が有料だったので、ムームードメインにしました。
GMOに絞った理由は、ドメインという運用において数多く、そして長く運用している＝安定性が高い。という決断です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="jekyll" /><category term="github-pages" /><summary type="html">長年利用していたはてなブログからGitHub Pages上でJekyllを使った静的生成サイトに移行しました。 この記事ではなぜ移行したのか？なぜJekyllなのか？なぜGitHub Pagesなのか？といった選定理由や移行理由などについて まとめてあります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-08-30-migration-blog-to-github-pages-from-hatenablog.png" /></entry><entry><title type="html">CocoaPodsをrbenv+bundlerで管理する</title><link href="https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler" rel="alternate" type="text/html" title="CocoaPodsをrbenv+bundlerで管理する" /><published>2019-08-30T00:00:00+09:00</published><updated>2019-08-30T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler</id><content type="html" xml:base="https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler">&lt;p&gt;iOS開発をする上で必要になってくるCocoaPods。これはRubyで書かれたPodという単位でiOSライブラリを管理するライブラリ管理ソフトウェアです。
CocoaPods単体であれば特に考えず &lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install cocoapods&lt;/code&gt; で直接現在のRubyのバージョンのCocoaPodsを入れておしまいですが、
fastlaneやslatherなどRubyで書かれたエコシステムも使うとなると、Rubyバージョンを意識する必要が出てきます。&lt;/p&gt;

&lt;p&gt;なぜなら、個人開発であれば大抵開発環境は1つであるため問題は起きませんが、
チーム開発となると環境を揃えず闇雲にその時点の最新バージョンをインストールしていては
人によって挙動が異なるなど、人依存(環境依存)の不具合が発生するためです。&lt;/p&gt;

&lt;p&gt;このようなどうでもいい部分で開発を妨害されないために、今回はCocoaPodsなどRuby製ツールをまとめて管理する方法についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcode-select &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
rbenv install &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt; でインストールしたいバージョンを決める
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ruby version]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
Gemfileに gem &lt;span class=&quot;s1&quot;&gt;'cocoapods'&lt;/span&gt; を追加.バージョン指定はCocoaPodsと同じ.
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/ianheggie/rbenv-binstubs.git ~/.rbenv/plugins/rbenv-binstubs
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rbenvでruby管理してgem管理はbundler&quot;&gt;rbenvでRuby管理してgem管理はbundler&lt;/h2&gt;

&lt;p&gt;bundlerの前にRubyバージョンを管理するためにrbenvを入れて、RubyバージョンとbundlerバージョンとCocoaPodsバージョンをあわせます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rbenv が Ruby 管理&lt;/li&gt;
  &lt;li&gt;Ruby の bundler gem が CocoaPods gem 管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って感じです。 これだけだと分からないので、一つずつ説明していきます。&lt;/p&gt;

&lt;h3 id=&quot;gemとはrubyが提供するライブラリ単位&quot;&gt;gemとはRubyが提供するライブラリ単位&lt;/h3&gt;

&lt;p&gt;gemはRubyが提供するライブラリの単位です。
これはRubyのバージョン毎にgemが管理されています。
例えば Ruby 2.3のgem一覧と Ruby 2.6のgem一覧はインストールされているgemは異なります。&lt;/p&gt;

&lt;p&gt;現在のRubyのバージョンは &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ruby -v&lt;/code&gt; で確認できます。
そして、このバージョンにインストールされているgem一覧は、&lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem list&lt;/code&gt; で確認できます。
例えば自分が作っているアプリの環境は次のような感じです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
ruby 2.5.3p105 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-10-18 revision 65156&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin18]

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list

&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; LOCAL GEMS &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;

bigdecimal &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.3.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
bundler &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.17.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cmath &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
csv &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
date &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
dbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
did_you_mean &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
etc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fcntl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fiddle &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fileutils &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
gdbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
io-console &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 0.4.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ipaddr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
json &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
minitest &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5.10.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
net-telnet &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
openssl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.1.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
power_assert &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
psych &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 3.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
rake &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12.3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
rdoc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 6.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
scanf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
sdbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
stringio &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 0.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
strscan &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
test-unit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.2.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
webrick &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.4.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
xmlrpc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
zlib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記見ると分かるように&lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;も一つのgemです。
このbundlerを使うことで他のgemのバージョン管理を行うことができます。&lt;/p&gt;

&lt;h3 id=&quot;rubyバージョン毎にgemがインストールされている&quot;&gt;Rubyバージョン毎にgemがインストールされている&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;つまりRubyバージョンも合わせる必要があります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例えばAさんが環境構築したとき&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt;でした。
&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.0&lt;/code&gt;の構文で書かれたバージョンをインストールできるようになります。
2年後,Bさんがチーム参画し、環境構築したら&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.5&lt;/code&gt;でした。
&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.5&lt;/code&gt;の構文で書かれたバージョンをインストールできるようになります。
その結果、Aさんの&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;の最新バージョン&lt;code class=&quot;highlighter-rouge&quot;&gt;1.2&lt;/code&gt;ですが、Bさんの&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は最新バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.1&lt;/code&gt;でした。
Bさんは&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;をAさんと同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;1.2&lt;/code&gt;に合わせたくとも、&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.5&lt;/code&gt;では動かず…なんてことが起こりえます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そのため、Rubyバージョンをあわせておく必要があります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;※↑例なので、バージョンや互換性は適当です。&lt;/p&gt;

&lt;h2 id=&quot;rubyバージョン管理はrbenv&quot;&gt;Rubyバージョン管理はrbenv&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;でインストールできます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(もしxcrunとかでエラーが出るようであれば &lt;code class=&quot;highlighter-rouge&quot;&gt;$ xcode-select --instal&lt;/code&gt; を実行して xcodeパッケージツールのインストールをしてみてください。)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rbenv versions&lt;/code&gt;を実行すると、今rbenvが管理してるRubyのバージョン一覧が表示され、 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; がつくバージョンが現在のRubyバージョンになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
  system
  2.1.10
  2.1.2
  2.2.1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2.3.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;by /Users/mothule/.rbenv/version&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  2.3.6
  2.3.7
  2.4.4
  2.5.1
  2.5.3
  2.6.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これをiOSプロジェクトだけ2.5.3にしたい場合は、次のコマンドを実行して生成されたファイルをiOSプロジェクト配下(git管理下)においてください。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;2.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このコマンドを実行すると &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;というファイルが生成され、もう一度Rubyバージョンを確認すると次のようになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
  system
  2.1.10
  2.1.2
  2.2.1
  2.3.0
  2.3.6
  2.3.7
  2.4.4
  2.5.1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2.5.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;by /Users/mothule/workspace/ios-project/.ruby-version&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  2.6.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このようにRubyバージョン2.5.3が動くようになっています。 これは &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;でバージョン指定されているためです。
ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;は &lt;code class=&quot;highlighter-rouge&quot;&gt;2.5.3&lt;/code&gt; と書いてあるだけです。
&lt;strong&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;をgit管理し、各開発環境がrbenvを使えば、Rubyバージョンを合わせることができます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;bundler-で-cocoapodsを動かす&quot;&gt;bundler で CocoaPodsを動かす&lt;/h2&gt;

&lt;h3 id=&quot;bundlerでcocoapodsをインストールする&quot;&gt;bundlerでCocoaPodsをインストールする&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install cocoapods&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;をインストールします。
そのためにbundlerが管理するファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle init&lt;/code&gt;で作ります。
エディタで&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を開くと次のようにgemを追加します。&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cocoapods&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;保存後に &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bunlder install --path=vendor/bundle&lt;/code&gt;を実行すると, &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;がインストールされます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;--path=vendor/bundle&lt;/code&gt;とはgemのインストール場所を示すオプションで、iosプロジェクト配下にvendor/bundleフォルダを作成し、その中に &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt; のコードがインストールされます。
この &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt; は Gemfileがあれば再現可能なので git管理下から外しても構いません。&lt;/p&gt;

&lt;h3 id=&quot;bundlerでcocoapodsを動かす&quot;&gt;bundlerでCocoaPodsを動かす&lt;/h3&gt;

&lt;p&gt;bundler配下のgemを動かすには&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bunlder exec command&lt;/code&gt;のフォーマットに従わなくてはなりません。
例えば &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;のインストールを実行するには、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle exec pod install&lt;/code&gt; となります。
これは少し手間ですね。次のプラグインをインストールすることで &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt;の部分を省くことができます。&lt;/p&gt;

&lt;h2 id=&quot;rbenv-に-binstubs-をインストール&quot;&gt;rbenv に binstubs をインストール&lt;/h2&gt;
&lt;p&gt;直接CocoaPodsをインストールした場合は、パスが通っているため &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;のように実行することができますが、
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;によってインストールした場合は、パスが通っていないため &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; を実行しても違うCocoaPodsのgemが動いてしまいます。(直接インストールしたCocoaPodsが動く)
これをパスを通してくれるようになるプラグインが rbenv-binstubsです。&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt;が不要になります。
プラグインインストールは次の場所にgit cloneで配置するだけです。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/ianheggie/rbenv-binstubs.git ~/.rbenv/plugins/rbenv-binstubs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; にオプションを追加して再実行します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうすることで、 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; によってインストールgemにもパスが通るようになるため&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;だけで、bundler管轄のcocoapodsが呼べるようになります。&lt;/p&gt;

&lt;h2 id=&quot;cocoapodsのバージョンアップはbundler操作&quot;&gt;CocoaPodsのバージョンアップはbundler操作&lt;/h2&gt;
&lt;p&gt;bundlerによって管理されたcocoapodsをバージョンアップする場合は、
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundler update&lt;/code&gt;で管轄gemをバージョン指定ルールに従った最新版にアップデートします。&lt;/p&gt;

&lt;h2 id=&quot;rubyバージョンはrbenv操作&quot;&gt;Rubyバージョンはrbenv操作&lt;/h2&gt;
&lt;p&gt;CocoaPodsや別ソフトウェアによりRubyバージョンを上げる必要がある場合は、 rbenv で新しくインストールし &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;を変更することでバージョンを変えることができます。
Rubyバージョンを更新した場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install bunlder&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; のインストール後に &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle install&lt;/code&gt;で新しいRubyバージョンでのbundlerとcocoapodsのインストールが必要になります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;iOS開発で便利なツールにはRuby製のものも多く、サーバーサイドがRailsなどで実装されているのであれば、iOSエンジニアであれどRuby環境を理解しておくだけで、
今回のような開発環境整備に役立てることができるようになります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="cocoapods" /><category term="rbenv" /><category term="bundler" /><summary type="html">iOS開発をする上で必要になってくるCocoaPods。これはRubyで書かれたPodという単位でiOSライブラリを管理するライブラリ管理ソフトウェアです。 CocoaPods単体であれば特に考えず $ gem install cocoapods で直接現在のRubyのバージョンのCocoaPodsを入れておしまいですが、 fastlaneやslatherなどRubyで書かれたエコシステムも使うとなると、Rubyバージョンを意識する必要が出てきます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-08-30-ios-cocoapods-managed-rbenv-bundler.png" /></entry><entry><title type="html">ActiveRecordでpluckとselectしてpluckに変化はあるか？</title><link href="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord" rel="alternate" type="text/html" title="ActiveRecordでpluckとselectしてpluckに変化はあるか？" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord">&lt;p&gt;ちょっとした疑問になりますが、明確な違いなどは生まれるのか気になるコードがあります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;に速度差や消費メモリ差はあるのか？&lt;/p&gt;

&lt;h2 id=&quot;sqlは同じ&quot;&gt;SQLは同じ&lt;/h2&gt;

&lt;p&gt;出力されるSQLはどちらも同じでした。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;速度は微妙な変化&quot;&gt;速度は微妙な変化&lt;/h2&gt;

&lt;p&gt;90万件に対して行った結果&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;pluckのみ&lt;/th&gt;
      &lt;th&gt;select+pluck&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3228&lt;/td&gt;
      &lt;td&gt;3349&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3152&lt;/td&gt;
      &lt;td&gt;2972&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3126&lt;/td&gt;
      &lt;td&gt;3370&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3101&lt;/td&gt;
      &lt;td&gt;3144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3271&lt;/td&gt;
      &lt;td&gt;2945&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3454&lt;/td&gt;
      &lt;td&gt;3227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3120&lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3488&lt;/td&gt;
      &lt;td&gt;3577&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3046&lt;/td&gt;
      &lt;td&gt;3072&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3228&lt;/td&gt;
      &lt;td&gt;3413&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;pluckのみ平均: 3210.0ms select+pluck平均: 3231.625ms&lt;/p&gt;

&lt;h2 id=&quot;しかしselectは確実に処理されてる&quot;&gt;しかしselectは確実に処理されてる&lt;/h2&gt;

&lt;p&gt;SQLは同じ、速度差も大きな違いはないが、トレースしたところ 確実はselectメソッドは処理されてからpluckを呼び出されている。 速度で微妙にpluckのみが勝っているのもこのselectメソッド処理が呼ばれているからではないかと予想。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;実践に影響を及ぼす変化は起こりにくいと考えてよいが、 確実に無駄な処理は起きていることは事実であり、表面上のコード量も増えるので、 &lt;strong&gt;pluckを呼ぶのであれば,selectは呼ぶ必要はない。&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="active-record" /><summary type="html">ちょっとした疑問になりますが、明確な違いなどは生まれるのか気になるコードがあります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">Mac上でRailsとMySQLのサーバー分けたい</title><link href="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db" rel="alternate" type="text/html" title="Mac上でRailsとMySQLのサーバー分けたい" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db">&lt;p&gt;開発中はMacでRailsアプリを開発してて、「いざ本番環境へデプロイ！完了！」って一息ついた矢先、「なんか重い…」「想定より遅い…」なんて経験ありませんか？&lt;/p&gt;

&lt;p&gt;原因の1つとして、一般的な開発環境では1PCにWebアプリとDBアプリが共存しており、これら2点間の通信はUnixドメインソケット方式で通信が行われます。 一方本番環境ではWebアプリとDBアプリそれぞれにサーバーが立っていることが一般的な基本構成で、これら2点間の通信はTCP/IP方式で通信が行われます。 この通信方式の違いにより大きな速度差が発生し、開発環境ではなかった場所にボトルネックが生まれます。&lt;/p&gt;

&lt;p&gt;例えば「SELECTクエリーを叩く回数が多くても、index効いてるから大丈夫だろう」と思っていても、WebサーバとDBサーバが分かれていると、二点間の通信時間が底上げされます。&lt;/p&gt;

&lt;p&gt;本番環境ではDBとの通信コストの観点が必要なのに、開発環境ではそれが抜けた環境になっているため、慣れていないと気づきにくい観点とも言えます。&lt;/p&gt;

&lt;p&gt;なので開発中でも通信コストが考慮された結果が分かる開発環境を2つのMacを使って実現してみようと思います。&lt;/p&gt;

&lt;p&gt;ちなみに単純な興味です。&lt;/p&gt;

&lt;h2 id=&quot;準備するもの&quot;&gt;準備するもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac 2台(名称としてMacWとMacDと名付けます)&lt;/li&gt;
  &lt;li&gt;同じローカルネットワークに繋がっていること(つまり同じWi-Fiに繋がっていればOKです)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;構築する環境の構成について&quot;&gt;構築する環境の構成について&lt;/h2&gt;

&lt;p&gt;大枠で構成についてまとめるとこんな感じになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacWにRailsアプリを立ち上げる&lt;/li&gt;
  &lt;li&gt;MacDにMySQLサーバーを立ち上げる&lt;/li&gt;
  &lt;li&gt;ローカルの開発環境なのでセキュリティは意識しない&lt;/li&gt;
  &lt;li&gt;MySQLを外部アクセスを許可する設定にする&lt;/li&gt;
  &lt;li&gt;MySQLに外部アクセス用のユーザーを作成する&lt;/li&gt;
  &lt;li&gt;RailsアプリのDB接続先をMacDのホスト名、ユーザーに設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要なキーワードは以下の3つとなります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacDが外部からアクセスされる準備&lt;/li&gt;
  &lt;li&gt;MySQLが外部からアクセスされる準備&lt;/li&gt;
  &lt;li&gt;Railsが外部DBにアクセスする準備&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macdがmacwからアクセスできる準備をする&quot;&gt;MacDがMacWからアクセスできる準備をする&lt;/h2&gt;

&lt;p&gt;アクセスするには2つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ローカルIPアドレスを指定&lt;/li&gt;
  &lt;li&gt;ローカルホスト名を指定&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ローカルipアドレスを指定&quot;&gt;ローカルIPアドレスを指定&lt;/h3&gt;

&lt;p&gt;これはローカルネットワーク内においてIPアドレスを直接使う方法です。 一時的であれば最も簡単です。&lt;/p&gt;

&lt;p&gt;Macで自分のローカルネットワークを調べる方法は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; で調べます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ifconfig | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;192 inet 192.168.11.3 netmask 0xffffff00 broadcast 192.168.11.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.11.3&lt;/code&gt; というのが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; を叩いたPCにIPアドレスになります。&lt;/p&gt;

&lt;h4 id=&quot;メリット&quot;&gt;メリット&lt;/h4&gt;

&lt;p&gt;とにかく楽。に尽きます。&lt;/p&gt;

&lt;h4 id=&quot;デメリット&quot;&gt;デメリット&lt;/h4&gt;

&lt;p&gt;IPアドレスの記入部を更新する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;ローカルホスト名を指定&quot;&gt;ローカルホスト名を指定&lt;/h3&gt;

&lt;p&gt;こちらはMac自身にホスト名を定義することで、IPアドレスに依存せず常に固定のホスト名で接続することが可能になります。 こちらの記事にまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;mysqlが外部アクセスされる準備&quot;&gt;MySQLが外部アクセスされる準備&lt;/h2&gt;

&lt;p&gt;そもそもMySQLが外部からアクセスを許可していないのは、そう設定がされているためです。&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt; という設定がデフォルトは 127.0.0.1 つまり localhost からの接続のみ許可する設定になっています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/local/etc/my.cnf# Default Homebrew MySQL server config[mysqld]# Only allow connections from localhostbind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;my.cnfの場所が分からない場合は、こちらの記事で確認してみてください。&lt;/p&gt;

&lt;p&gt;my.cnfに&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;でIPを指定することで、そのIPからの通信を許可します。 ちなみに注意事項としては、MacDのIPアドレスになります。 MacWのIPアドレスではありません。&lt;/p&gt;

&lt;p&gt;まず前提知識として、PCには &lt;strong&gt;複数のネットワークインターフェイスがあります。&lt;/strong&gt; その中のどのネットワークインターフェイスを許可するのかが&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;になります。 先程&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;のデフォルトはlocalhostと説明したように、デフォルトではlocalhostからのアクセスのみを許可しています。&lt;/p&gt;

&lt;p&gt;今回はパブリック環境でどこからでも誰からでもアクセスできる本番環境と違って、自宅や職場の同一Wi-Fi環境下での話なのでアクセス制限かけたりセキュリティの部分には気を使っていません。 なので &lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt; には &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; を設定します。 これは &lt;strong&gt;制限なし&lt;/strong&gt; の指定になります。どのネットワークインターフェイスからでもアクセスできます。 ちなみに全ての&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;をコメントアウトすると同様に無条件で受け付けることになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/local/etc/my.cnf# Default Homebrew MySQL server config[mysqld]# Only allow connections from localhost# bind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1bind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定したらリスタートします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql.server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一応はローカルネットワーク外からルーターのグローバルネットワークのIPとMacDのローカルIP、MySQLが解放してるポート番号などが分かれば、外部からのアクセスは恐らく可能かとは思いますが、 近辺依存ではありますが、自宅近辺の住民が自分のWi-Fi不正アクセスされるリスクは低いかなと思ってます。（ここらへんは詳しくはないので鵜呑みではなく、自己責任でお願いします）&lt;/p&gt;

&lt;h3 id=&quot;mysql内に外部からアクセスするユーザー用意する&quot;&gt;MySQL内に外部からアクセスするユーザー用意する&lt;/h3&gt;

&lt;p&gt;MySQLの外部からアクセスする準備ができたら、今度は外部からアクセス用のユーザーを用意します。&lt;/p&gt;

&lt;p&gt;例えば下記のようなユーザーを作る場合は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ユーザー名: hoge&lt;/li&gt;
  &lt;li&gt;パスワード: pass&lt;/li&gt;
  &lt;li&gt;対象IP: 192.16配下全部&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- ユーザー作成
create user &quot;hoge&quot;@&quot;192.168.%&quot; identified by &quot;pass&quot;;
-- 権限付与
mysql\&amp;gt; grant all on \*.\* to &quot;hoge&quot;@&quot;192.168.%&quot; identified by &quot;pass&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにすれば、ユーザー作成して対象DBへの権限設定がされます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql\&amp;gt; select user, host from mysql.user;
+------+-------------+
| user | host |
+------+-------------+
| hoge | 192.168.% |
+------+-------------+

mysql\&amp;gt; show grants for 'hoge'@'192.168.%';
+----------------------------------------------------------------+
| Grants for hoge@192.168.%
+----------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON \*.\* TO 'hoge'@'192.168.%' IDENTIFIED BY PASSWORD '\*196BDEDE2AE4F84CA44C47D54D78478C7E2BD7B7'
+----------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;外部から接続をテストする&quot;&gt;外部から接続をテストする&lt;/h2&gt;

&lt;p&gt;この段階で既に外部から接続できている環境になっているはずなので、他Macから接続をします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IPアドレス指定&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; hoge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 192.168.11.6 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ローカルホスト名指定&lt;/strong&gt; ホスト名が &lt;code class=&quot;highlighter-rouge&quot;&gt;fuga.local&lt;/code&gt; の場合&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; hoge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; fuga.local &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接続できれば外部からMySQLに接続できています。&lt;/p&gt;

&lt;h2 id=&quot;railsが外部dbにアクセスする準備&quot;&gt;Railsが外部DBにアクセスする準備&lt;/h2&gt;

&lt;p&gt;MySQLが外部からのアクセス準備が整えば後は簡単です。&lt;/p&gt;

&lt;p&gt;dataases.yml で接続先を指定するだけになります。&lt;/p&gt;

&lt;p&gt;IPアドレスが &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.11.6&lt;/code&gt;の場合&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pass&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.11.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;他は省略してます。&lt;/p&gt;

&lt;p&gt;これでRails立ち上げてDBにアクセスできれば完了です。&lt;/p&gt;

&lt;h2 id=&quot;気になる速度差を測ってみる&quot;&gt;気になる速度差を測ってみる&lt;/h2&gt;

&lt;p&gt;1PCでUnixドメインソケット通信した場合と2PCでTCP/IP通信した場合で平均値を出してみました。&lt;/p&gt;

&lt;p&gt;1万件のUser(name: string)を事前に用意し、&lt;code class=&quot;highlighter-rouge&quot;&gt;@users = User.all&lt;/code&gt; が呼ばれて一覧を返すcontroller に対し&lt;code class=&quot;highlighter-rouge&quot;&gt;GET http://localhost:3000/users&lt;/code&gt; を5回呼び出し、最速と最遅を抜いた3つで平均値を出して測定しました。&lt;/p&gt;

&lt;h3 id=&quot;unixドメインソケット通信&quot;&gt;Unixドメインソケット通信&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;8.6ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.5ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.5ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.3ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.6ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(8.5 + 8.5 + 8.3) / 3 = &lt;strong&gt;8.4333333333ms&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;tcpip通信&quot;&gt;TCP/IP通信&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;291.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;289.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;194.4ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;159.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;142.7ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(289.9 + 194.4 + 159.9) / 3 = &lt;strong&gt;214.7333333333ms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;およそ 26倍差がついています。 MySQLサーバーがRailsサーバーよりスペックが劣ってはいますが、それを考慮しても大分差が開いているでしょう。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;本番環境にできるだけ寄せる構成をしておくことで、本番でしか発覚しない問題を開発段階で気づいて排除できるので、PC台数に余裕があるなら、リリース前だけでも試す価値はあるかなと思いました。&lt;/p&gt;

&lt;h2 id=&quot;注意事項&quot;&gt;注意事項&lt;/h2&gt;

&lt;p&gt;開発環境前提においての構成であるため、セキュリティとしてはGoodではありません。 特に公共のネットワーク配下ではやめたほうがいいです。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="active-record" /><category term="mysql" /><summary type="html">開発中はMacでRailsアプリを開発してて、「いざ本番環境へデプロイ！完了！」って一息ついた矢先、「なんか重い…」「想定より遅い…」なんて経験ありませんか？</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">正規表現で否定を表現する</title><link href="https://blog.mothule.com/tools/regexp/regexp-not-expression" rel="alternate" type="text/html" title="正規表現で否定を表現する" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/regexp/regexp-not-expression</id><content type="html" xml:base="https://blog.mothule.com/tools/regexp/regexp-not-expression">&lt;p&gt;常時必要ではないけれど、忘れた頃にやってきて、覚えようにも複雑な正規表現の否定表現。&lt;/p&gt;

&lt;p&gt;いっつも検索していろんなサイトにお世話になっているけれど、訪れるサイトはいつもバラバラで、欲しい情報を見つけるのに時間がかかる。そんな毎日なので、自分用に否定表現用の記事を用意しました。&lt;/p&gt;

&lt;h2 id=&quot;書き方&quot;&gt;書き方&lt;/h2&gt;
&lt;p&gt;結論から先に書きます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^(?!.\*\&amp;lt;ここに検索ワード\&amp;gt;).+$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;何が起きているのか&quot;&gt;何が起きているのか？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;^ : 行の先頭を表す&lt;/li&gt;
  &lt;li&gt;( : グルーピング&lt;/li&gt;
  &lt;li&gt;?! : 否定の先読み. 部分式が後にマッチしないなら、真とする。&lt;/li&gt;
  &lt;li&gt;.* : 任意の文字列(0文字以上)&lt;/li&gt;
  &lt;li&gt;) : グルーピング&lt;/li&gt;
  &lt;li&gt;.+ : 任意の文字列(1文字以上)&lt;/li&gt;
  &lt;li&gt;$: 行の末尾を表す&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;試してみる&quot;&gt;試してみる&lt;/h2&gt;

&lt;p&gt;色々と削って動きを見てみることしました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;あいうえお
かきくけこ
あい
あ
い
いう


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;に対して色々試してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;正規表現&lt;/th&gt;
      &lt;th&gt;結果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あ)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;「あ」の入っていない文字列と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あ)$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;空改行のみヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あい).&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;「あい」の入っていない行の1文字目と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!いう).*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行の先頭に「いう」の入っていない行と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行の先頭がヒットする&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;()は()内の文字を1文字として扱う. セットみたいなイメージ.&lt;/li&gt;
  &lt;li&gt;?!は否定の先読み、後ろの続く言葉がヒットしないなら真となる&lt;/li&gt;
  &lt;li&gt;(?!.*いう)とは「いう」がないなら真となる、いわば「いう否定セット」みたいなもの&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).+$&lt;/code&gt;とは「いう否定セット」の入っていない１文字以上を検索となる&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="regexp" /><summary type="html">常時必要ではないけれど、忘れた頃にやってきて、覚えようにも複雑な正規表現の否定表現。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">ngrokで楽にATS無効化せずローカルAPIにHTTPSでアクセスする</title><link href="https://blog.mothule.com/ios/how-to-use-ngrok" rel="alternate" type="text/html" title="ngrokで楽にATS無効化せずローカルAPIにHTTPSでアクセスする" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/how-to-use-ngrok</id><content type="html" xml:base="https://blog.mothule.com/ios/how-to-use-ngrok">&lt;p&gt;RailsアプリとiOSアプリを同時開発してると、デバッグ機能が非常に重要になります。
特にブレイクポイント機能があれば、バグの原因追求が迅速になります。
しかしLINE Botだったり、iOSのATSだったり、HTTPSが必須のケースでローカルAPIは難しい話です。
しかし、そんなときに便利なのがngrokというサービスです。&lt;/p&gt;

&lt;h2 id=&quot;ngrok&quot;&gt;ngrok&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok - secure introspectable tunnels to localhost&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;認証不要(認証もあるけど)&lt;/li&gt;
  &lt;li&gt;ngrokサービスがランダムなブレークポイントアクセスできるURLを用意してくれる&lt;/li&gt;
  &lt;li&gt;そのランダムURLにアクセスすると&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;にブレークポイントーディングしてくれる&lt;/li&gt;
  &lt;li&gt;数時間立つとURLが無効化する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;インストール&quot;&gt;インストール&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew cask install ngrok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew cask info ngrok
ngrok: latest
https://ngrok.com/
/usr/local/Caskroom/ngrok/latest &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;24.6MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
From: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/ngrok.rb
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Name
ngrok
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; Artifacts
ngrok &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Binary&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使い方&quot;&gt;使い方&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ngrok http 3000&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;のURLが発行されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-08-05-runing-ngrok.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-08-05-runing-ngrok.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;https://f1092809.ngrok.io&lt;/code&gt; というURLが一時的にブレークポイントーディングしてくれます。 8時間経過するとURLは無効になります。&lt;/p&gt;

&lt;h3 id=&quot;仕組み&quot;&gt;仕組み&lt;/h3&gt;

&lt;p&gt;本来であれば、ngrokはローカルネットワーク上にあるサーバーを遠隔地からアクセスできるようにする外から内へアクセスを可能にするサービスです。&lt;/p&gt;

&lt;p&gt;これをローカルAPIサーバーと同一ローカルネットワーク上にあるiPhoneが、一旦外部のURLにアクセスし、再びローカルネットワーク上のAPIサーバーにアクセスすることで、開発中にローカルAPIにHTTPSでアクセスする仕組みです。&lt;/p&gt;

&lt;h2 id=&quot;注意事項&quot;&gt;注意事項&lt;/h2&gt;

&lt;p&gt;ngrokに通信を介しているため、セキュアなデータなどもngrok側は見えているかと思われます。 しかし、ngrok側はそれを秘匿性を守秘していたとしても、ngrok側が脆弱性があれば、そこから意図せずデータが漏洩することは可能性はあります。&lt;/p&gt;

&lt;p&gt;そのため、認証などテストする場合はどうでもいいテストアカウトでやることを紹介する以上、推奨します。つまり自己責任です。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="ngrok" /><category term="ats" /><summary type="html">RailsアプリとiOSアプリを同時開発してると、デバッグ機能が非常に重要になります。 特にブレイクポイント機能があれば、バグの原因追求が迅速になります。 しかしLINE Botだったり、iOSのATSだったり、HTTPSが必須のケースでローカルAPIは難しい話です。 しかし、そんなときに便利なのがngrokというサービスです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-08-05-how-to-use-ngrok.png" /></entry><entry><title type="html">MySQL5.6でActiveRecordのencodingがutf8mb4だとKey長すぎ問題の対応</title><link href="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord-fix-mysql56-encode-utf8mb4-key-too-length" rel="alternate" type="text/html" title="MySQL5.6でActiveRecordのencodingがutf8mb4だとKey長すぎ問題の対応" /><published>2019-08-02T00:00:00+09:00</published><updated>2019-08-02T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord-fix-mysql56-encode-utf8mb4-key-too-length</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord-fix-mysql56-encode-utf8mb4-key-too-length">&lt;p&gt;charsetをutf8からutf8mb4に変更したことでindexのキーが長過ぎると言われるようになりました。&lt;/p&gt;

&lt;p&gt;ちなみに環境はRails5系 + MySQL5.6系環境で、&lt;code class=&quot;highlighter-rouge&quot;&gt;databases.yml&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;encoding&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;utf8mb4&lt;/code&gt;にすると &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt;でエラーが出ます。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mysql2::Error: Index column size too large. The maximum column size is 767 bytes.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新しいアプリを用意するたびに忘れ対応方法だけを調べて対応するといった、行きあたりばったりの対応ばかりしてたので、今回メモ兼調査をしてみることにしました。&lt;/p&gt;

&lt;h2 id=&quot;そもそもなぜ767バイトなのか&quot;&gt;そもそもなぜ767バイトなのか？&lt;/h2&gt;

&lt;p&gt;そもそもなんで767バイトなのか気になりますよね。&lt;/p&gt;

&lt;p&gt;まずencodingがutf8の場合1文字は3バイトです。
しかし、これがutf8mb4だと1文字4バイトになるため、 255 * 4 = 1020バイトとなり、767バイトをオーバーしてしまいます。&lt;/p&gt;

&lt;p&gt;では、255という数字はどこから来てるかというと、
ActiveRecordのテーブル定義で使う &lt;code class=&quot;highlighter-rouge&quot;&gt;t.string&lt;/code&gt; は MySQLだと &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR(255)&lt;/code&gt; に変換されます。ここの最大数から来てます。&lt;/p&gt;

&lt;p&gt;じゃぁなぜ255なのか？というと
MySQL(InnoDB)では最大値が767バイト制限がそもそも敷かれています。
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/ja/innodb-restrictions.html&quot;&gt;公式サイト&lt;/a&gt;ではこう書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;デフォルトでは、単一カラムインデックスのインデックスキーを最大で 767 バイトにすることができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;続けてこう書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;たとえば、UTF-8 文字セットと文字ごとに最大 3 バイトを使用すると仮定すれば、TEXT または VARCHAR カラム上で 255 文字よりも長いカラムプリフィクスインデックスを使用すると、この制限に達する可能性があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり ActiveRecordが &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR(255)&lt;/code&gt; にしているのは、この制限を超えないためですね。
しかし&lt;code class=&quot;highlighter-rouge&quot;&gt;databases.yml&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;encoding&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;t.string&lt;/code&gt; に反映されないのは少し不便かと思いますね。
MySQL(InnoDB) + utf8mb4 で &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; が呼ばれたら、 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHCAR(191)&lt;/code&gt;にするかもしくは、警告してくれると便利なのになぁと思いました。&lt;/p&gt;

&lt;h3 id=&quot;原因から見えてくる対処法2つ&quot;&gt;原因から見えてくる対処法2つ&lt;/h3&gt;

&lt;p&gt;原因が分かったところで、解決方法は次の２つが候補として挙げられます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;対象カラムの文字最大数を制限する&lt;/li&gt;
  &lt;li&gt;カラムのcharsetをutf8に戻す&lt;/li&gt;
  &lt;li&gt;MySQLのキー最大長を伸ばす&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;対象カラムの文字最大数を制限する&quot;&gt;対象カラムの文字最大数を制限する&lt;/h2&gt;
&lt;p&gt;1つは目は対象となるカラムに対して文字数を制限することで1020バイトを超えないようにする方法です。
指定しなければ &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR(255)&lt;/code&gt; なら指定すればいいって考えですね。&lt;/p&gt;

&lt;p&gt;この場合の最大文字数は767 / 4 = 191.75なので、 191文字にすることでエラーを回避できます。
例えばテーブル&lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;カラムに対して制限かけたい場合は、コードにするとこんな感じですね。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;191&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;カラムのcharsetをutf8に戻す&quot;&gt;カラムのcharsetをutf8に戻す&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encoding&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;utf8mb4&lt;/code&gt; にすると全部のテーブル対象になるので、一部カラムだけを &lt;code class=&quot;highlighter-rouge&quot;&gt;utf8&lt;/code&gt; にしようって話です。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;charset: :utf8&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mysqlのキー最大長を伸ばす&quot;&gt;MySQLのキー最大長を伸ばす&lt;/h2&gt;

&lt;p&gt;MySQLにはキーの最大長を拡張する機能があります。その機能を使うことでキー最大長を&lt;strong&gt;3072&lt;/strong&gt;バイトまで伸ばすことができます。(つまりutf8mb4だと3072 / 4 = 768文字ですね)&lt;/p&gt;

&lt;h3 id=&quot;innodb_large_prefix-で-3072バイトに伸ばす&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_large_prefix&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;3072&lt;/code&gt;バイトに伸ばす&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_large_prefix&lt;/code&gt;オプションを指定することで、長さの制限が3072バイトに伸ばせます。
以下&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/ja/innodb-restrictions.html&quot;&gt;公式&lt;/a&gt;より&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;innodb_large_prefix 構成オプションを有効にすると、DYNAMIC および COMPRESSED 行フォーマットを使用する InnoDB テーブルで、この長さ制限が 3072 バイトに上昇します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;しかし、いくつか制限があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ストレージエンジンが InnoDB であること&lt;/li&gt;
  &lt;li&gt;行フォーマットが &lt;code class=&quot;highlighter-rouge&quot;&gt;DYNAMIC&lt;/code&gt; か &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPRESSED&lt;/code&gt; であること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずストレージエンジンについてですが、MySQLのデフォルトストレージエンジンは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL5.5&lt;/code&gt;以前は&lt;code class=&quot;highlighter-rouge&quot;&gt;MyISAM&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL5.5&lt;/code&gt;以上は&lt;code class=&quot;highlighter-rouge&quot;&gt;InnoDB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になります。&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/ja/innodb-default-se.html&quot;&gt;公式&lt;/a&gt;
ストレージエンジンの変更方法は今回は省略します。(自分が使うのは5.6だったので)&lt;/p&gt;

&lt;h3 id=&quot;innodb_file_formatをbarracudaにする&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_format&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt;にする&lt;/h3&gt;

&lt;p&gt;行フォーマットはMySQL5.0.3以降(InnoDB)のデフォルトは &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPACT&lt;/code&gt;になっているので、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;DYNAMIC&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;COMPRESSED&lt;/code&gt;へ変える必要があります。
そして&lt;code class=&quot;highlighter-rouge&quot;&gt;DYNAMIC&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;COMPRESSED&lt;/code&gt; に変更するには、ファイルフォーマット(&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_format&lt;/code&gt;)が&lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt;である必要があります。
なぜなら&lt;code class=&quot;highlighter-rouge&quot;&gt;Antelope&lt;/code&gt;では対応しておらず&lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt;が対応しているフォーマットだからです。&lt;/p&gt;

&lt;p&gt;これは&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/ja/innodb-file-format-enabling.html&quot;&gt;公式&lt;/a&gt;に書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;innodb_file_format パラメータは現在、Antelope および Barracuda ファイル形式をサポートしています。テーブル圧縮や新しい DYNAMIC 行フォーマットなどの、Barracuda ファイル形式によってサポートされる機能を利用する新しいテーブルを作成するには、innodb_file_format を BARRACUDA に設定します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;またデフォルトが &lt;code class=&quot;highlighter-rouge&quot;&gt;Antelope&lt;/code&gt;だということも続けて記載されてあります。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;可能な場合、新しいテーブルには Barracuda 形式を使用することをお勧めしますが、MySQL 5.5 では、異なる MySQL リリースを含むレプリケーション構成との最大限の互換性のために、デフォルトのファイル形式は引き続き Antelope です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL5.7&lt;/code&gt;以降は &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_format&lt;/code&gt;のデフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt; になるのでこの変更は不要になります。&lt;/p&gt;

&lt;h3 id=&quot;innodb_file_per_tableを有効にする&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_per_table&lt;/code&gt;を有効にする&lt;/h3&gt;

&lt;p&gt;また &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_per_table&lt;/code&gt;オプションがOFFだと &lt;code class=&quot;highlighter-rouge&quot;&gt;Baraccuda&lt;/code&gt;が適用されず &lt;code class=&quot;highlighter-rouge&quot;&gt;Antelope&lt;/code&gt;になるので、このオプションもONにします。
&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL5.6.6&lt;/code&gt;以上ならデフォルトONなのでこの記述は不要ですが、パッチバージョンによる変更で気づいてる方は少ないかと思うので、明示的に記述しておいてもいいかと思います。&lt;/p&gt;

&lt;h3 id=&quot;つまりまとめると&quot;&gt;つまりまとめると&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL 5.6
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_per_table&lt;/code&gt; を有効化して &lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt;が使える準備&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_file_format&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;Barracuda&lt;/code&gt; に変更して &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_large_prefix&lt;/code&gt;が使える準備&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_large_prefix&lt;/code&gt; を有効化&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 5.7
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_large_prefix&lt;/code&gt; を有効化&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h2 id=&quot;オプションをmycnf-で指定する&quot;&gt;オプションをmy.cnf で指定する&lt;/h2&gt;

&lt;p&gt;コマンドラインでMySQL起動時にオプション指定でも可能ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt;の方が楽なのでそっちで指定します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my.cnf&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;innodb_file_per_table = 1
innodb_file_format = Barracuda
innodb_large_prefix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt;の場所が分からない場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mysql --help | grep my.cnf&lt;/code&gt; でパスが並ぶので好きな場所の &lt;code class=&quot;highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt; に追記してください。&lt;/p&gt;

&lt;p&gt;保存したら MySQLを再起動します。&lt;/p&gt;

&lt;h2 id=&quot;rails側も弄る必要がある&quot;&gt;Rails側も弄る必要がある&lt;/h2&gt;

&lt;p&gt;これで終わりではありません。MySQL側の準備が整っただけであり、テーブル作成する側つまりRails側の設定が必要になります。&lt;/p&gt;

&lt;p&gt;と言ってもテーブルが1つ2つであれば単純です。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create_table&lt;/code&gt;メソッドに &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt;で指定するだけです。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateUsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ROW_FORMAT=DYNAMIC'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここまで来てテーブルを作成すると、無事エラーは出なくなりutf8mb4として動きます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show create table users;
+-------+-----------------------------------------------------------+
| Table | Create Table                                                                                                                                                                                                                                                                                    |
+-------+-----------------------------------------------------------+
| users | CREATE TABLE `users` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_users_on_name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC |
+-------+-----------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに既存テーブルの場合はALTER TABLEで変更する必要があります。&lt;/p&gt;

&lt;p&gt;キー長を伸ばす方法は長々と面倒に思えますが、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;my.cnfに3行追加&lt;/li&gt;
  &lt;li&gt;migrationの各create_tableにoptions追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で解決するのでやってみると思ってたより楽です。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="active-record" /><category term="mysql" /><summary type="html">charsetをutf8からutf8mb4に変更したことでindexのキーが長過ぎると言われるようになりました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">忘れるのに定期的に必要になるMySQLコマンド</title><link href="https://blog.mothule.com/mysql/mysql-minor-commands" rel="alternate" type="text/html" title="忘れるのに定期的に必要になるMySQLコマンド" /><published>2019-08-02T00:00:00+09:00</published><updated>2019-08-02T00:00:00+09:00</updated><id>https://blog.mothule.com/mysql/mysql-minor-commands</id><content type="html" xml:base="https://blog.mothule.com/mysql/mysql-minor-commands">&lt;p&gt;普段はRailsでMySQLを操作してるため、使わないし覚えてなくても開発に支障が出ることは少ないのに、開発環境スイッチしたことでマイグレーションが失敗とか、explainでindex漏れがないかとか、&lt;strong&gt;定期的に必要になるコマンド&lt;/strong&gt; ってありますよね。
毎度忘れては検索して調べてるので、いい加減メモっておこうと思います。&lt;/p&gt;

&lt;h2 id=&quot;インデックス&quot;&gt;インデックス&lt;/h2&gt;

&lt;h3 id=&quot;指定テーブルのインデックスを確認&quot;&gt;指定テーブルのインデックスを確認&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例： &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;テーブルを見た場合 (nameにindexがある)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-08-02-mysql-minor-commands-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-08-02-mysql-minor-commands-1.png&quot; alt=&quot;SHOW INDEX FROM users;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;指定テーブルのインデックス削除&quot;&gt;指定テーブルのインデックス削除&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; ALTER TABLE table_name DROP INDEX index_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例： &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;テーブルの&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;インデックスを消す場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; ALTER TABLE users DROP INDEX index_users_on_name;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;テーブル定義&quot;&gt;テーブル定義&lt;/h2&gt;

&lt;h3 id=&quot;指定テーブルのカラム情報を確認する簡易&quot;&gt;指定テーブルのカラム情報を確認する(簡易)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; DESC table_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;実は DESC と EXPLAIN は同義であり、 explain に差し替えても動きます。&lt;/p&gt;

&lt;p&gt;例： &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;テーブルを見た場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; desc users;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| id         | bigint(20)   | NO   | PRI | NULL    | auto_increment |
| name       | varchar(255) | YES  |     | NULL    |                |
| created_at | datetime     | NO   |     | NULL    |                |
| updated_at | datetime     | NO   |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;指定テーブルのカラム情報を確認する詳細&quot;&gt;指定テーブルのカラム情報を確認する(詳細)&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW FULL COLUMNS FROM table_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例： &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;テーブルを見た場合&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-08-02-mysql-minor-commands-2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-08-02-mysql-minor-commands-2.png&quot; alt=&quot;SHOW FULL COLUMNS FROM users;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;指定テーブルの作成時のクエリー表示&quot;&gt;指定テーブルの作成時のクエリー表示&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW CREATE TABLE table_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例： &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;テーブルを見た場合&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; show create table users;
+-------+-------------------------------------------------------+
| Table | Create Table                                          |
+-------+-------------------------------------------------------+
| users | CREATE TABLE `users` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 |
+-------+-------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;テーブル操作&quot;&gt;テーブル操作&lt;/h2&gt;

&lt;h3 id=&quot;データを削除する&quot;&gt;データを削除する&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; DELETE FROM table_name [WHERE where_condition]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;設定系&quot;&gt;設定系&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/mysql/mysql-find-mycnf&quot;&gt;MySQLのmy.cnfの場所を見つける&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="mysql" /><summary type="html">普段はRailsでMySQLを操作してるため、使わないし覚えてなくても開発に支障が出ることは少ないのに、開発環境スイッチしたことでマイグレーションが失敗とか、explainでindex漏れがないかとか、定期的に必要になるコマンド ってありますよね。 毎度忘れては検索して調べてるので、いい加減メモっておこうと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry></feed>