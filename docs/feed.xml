<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja-JP"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://blog.mothule.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.mothule.com/" rel="alternate" type="text/html" hreflang="ja-JP" /><updated>2019-09-09T19:45:17+09:00</updated><id>https://blog.mothule.com/feed.xml</id><title type="html">もちゅろぐ</title><subtitle>iOSやSwift,RubyやRailsなどiPhoneアプリ開発とサーバーサイド開発を中心に綴っている技術ブログ</subtitle><entry><title type="html">360度パノラマ画像を閲覧するpod更新でGLKitからSceneKitに変えた話</title><link href="https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc" rel="alternate" type="text/html" title="360度パノラマ画像を閲覧するpod更新でGLKitからSceneKitに変えた話" /><published>2019-09-07T00:00:00+09:00</published><updated>2019-09-07T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc</id><content type="html" xml:base="https://blog.mothule.com/ios/scene-kit/ios-scene-kit-abc">&lt;p&gt;GLKitからSceneKitに変えざるを得ない状況に直面し、SceneKitの調査や躓いたポイントについてまとめます。&lt;/p&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;先日国内最大のiOS開発者カンファレンス iOSDC Japan 2019に参加して、AVFoundationを使っているセッションばかり聞いていたら
「自分も何か発表できるネタないかな？発表してみたいな。」とウズウズした結果、過去の自作ライブラリで人気がある360度パノラマ画像ビューワーをSwift5に追従して動くようにして、実現方法などについてスライド纏めれば、ちょっとした登壇とかできそうだなと思ったことがきっかけです。&lt;/p&gt;

&lt;p&gt;この自作ライブラリは以前&lt;a href=&quot;https://qiita.com/mothule/items/026bac1cf1fc229d0c4d&quot;&gt;Qiita&lt;/a&gt;に書いてあります&lt;/p&gt;

&lt;h2 id=&quot;swift5に変えたが動かず&quot;&gt;Swift5に変えたが動かず&lt;/h2&gt;

&lt;p&gt;ライブラリのSwift言語はSwift3なので古いな〜と思いつつSwift5にして、ビルドが通ったので実行したのですが、画面が白いままで全く何も表示されませんでした。&lt;/p&gt;

&lt;p&gt;原因がいまいち分からず、情報集めるため公式ドキュメントを覗いたら驚愕しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-1.png&quot; width=&quot;50%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;oh…&lt;/strong&gt; なんとほぼ全部が &lt;code class=&quot;highlighter-rouge&quot;&gt;Deprecated&lt;/code&gt; ラベルがついてました。&lt;/p&gt;

&lt;p&gt;これでは折角ライブラリのSwiftを追従させても、追従したとは言えません。
Swiftバージョンだけでなく、描画周りも一新することにしました。&lt;/p&gt;

&lt;h2 id=&quot;scenekitってのが出てた&quot;&gt;SceneKitってのが出てた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation&quot;&gt;公式サイト&lt;/a&gt;を１つに戻って見てみたらSceneKitと呼ばれるフレームワークを見つけました。
googleで調べてもGLKitは影を潜めMetalやSceneKit,ARKitが並んでいます。&lt;/p&gt;

&lt;h3 id=&quot;scenekitは3dゲームやコンテンツの上位レイヤー開発キット&quot;&gt;SceneKitは3Dゲームやコンテンツの上位レイヤー開発キット&lt;/h3&gt;

&lt;p&gt;GLKitが低レイヤーだとすれば、SceneKitは上位レイヤーに当たります。
GLKitが描画エンジンだとすれば、SceneKitはゲームエンジンといったところでしょうか。
また描画だけでなくアニメーション,物理演算などもサポートしています。&lt;/p&gt;

&lt;p&gt;SceneKitは描画テクノロジーにはGLKitやMetalが使われています。
OpenGLかDirectXかなど描画エンジンになるべく気にせずコンテンツ作りに特化しやすい開発キットってことですね。
それゆえ、GLKitを直接使われるよりは新しく提供したSceneKitを使うようGLKitを非推奨にしたのかもしれません。&lt;/p&gt;

&lt;p&gt;GLKitと異なりSceneKitではOpenGLを直接操作するのではなく、Sceneと呼ばれる単位で描画環境の構築を行います。&lt;br /&gt;
そしてこのScene内はNodeと呼ばれるディレクトリのような階層構造で描画オブジェクトを管理しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-2.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-2.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
↑ &lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscene&quot;&gt;公式&lt;/a&gt;より抜粋&lt;/p&gt;

&lt;p&gt;映画の1シーンと捉えると理解がしやすいかと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ロケ地で撮影 : landscapeNode&lt;/li&gt;
  &lt;li&gt;俳優が立つ : characterNode&lt;/li&gt;
  &lt;li&gt;カメラで撮影 : cameraNode&lt;/li&gt;
  &lt;li&gt;照明で照らす : lightNode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scnnodeはデザインとしては多少強引な何でもボックス&quot;&gt;SCNNodeはデザインとしては多少強引な何でもボックス&lt;/h3&gt;

&lt;p&gt;このNodeと呼ばれるものは&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNNode&lt;/code&gt;一つで上の全てのオブジェクトをサポートしている
設計としては多少強引な何でもボックスです。&lt;/p&gt;

&lt;p&gt;なぜなら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ライト&lt;/li&gt;
  &lt;li&gt;カメラ&lt;/li&gt;
  &lt;li&gt;アニメーション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;へのアクセスプロパティを持っており、設定によってどれにでもなり得るからです。
ただこのような設計にしたのは、Nodeによる階層構造をシンプルにしたかったかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;scenekitで360度パノラマ画像ビューワーを実装する&quot;&gt;SceneKitで360度パノラマ画像ビューワーを実装する&lt;/h2&gt;

&lt;p&gt;ではSceneKitを使った360度パノラマ画像ビューワーの実装について説明します。
全容は&lt;a href=&quot;https://github.com/mothule/RNSphereImageViewer&quot;&gt;GitHub/RNSphereImageViewer&lt;/a&gt;で確認できます。
数ファイルしかないので、億劫にならないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;scnviewでsceneの描画先を決める&quot;&gt;SCNViewでSceneの描画先を決める&lt;/h3&gt;

&lt;p&gt;先の説明の通り、Sceneで描画計画を立てたら、それを実際に反映する先が必要になります。
映画でいうと映画館のスクリーンといったところです。&lt;/p&gt;

&lt;p&gt;これはSCNViewと呼ばれる&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;のサブクラスを対象ViewControllerのviewに代入すれば終わりです。
以下は&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;の抜粋です.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 1. スクリーン先をviewにする&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sceneView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 2. SCNSceneRendererDelegateで毎フレームフックする&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. FPS指定&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// FPSはSceneKitが管理している&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendersContinuously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// これをtrueにしないと毎フレーム更新が呼ばれない&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 4. その他&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 何も描画してないときの背景色. ライトとは違う色にすることをオススメします&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoenablesDefaultLighting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showsStatistics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 以下省略&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-スクリーン先をviewにする&quot;&gt;1. スクリーン先をviewにする&lt;/h4&gt;

&lt;p&gt;self.viewに対し SCNViewを指定することで投影先(スクリーン先)を設定します。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sceneView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SCNViewの初期化メソッドは、frameは描画領域、optionsは MetalやOpenGLなど&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNRenderer&lt;/code&gt;に渡すオプションになります。&lt;br /&gt;
このoptionsは&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnrenderer/1518404-init&quot;&gt;MetalのSCNRenderer&lt;/a&gt;や&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnrenderer/1518408-init&quot;&gt;OpenGLのSCNRenderer&lt;/a&gt;は将来向けの拡張オプションでまだ使われていないようです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;SCNView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-scnscenerendererdelegateで毎フレームフックする&quot;&gt;2. SCNSceneRendererDelegateで毎フレームフックする&lt;/h4&gt;
&lt;p&gt;SCNView.delegateは &lt;code class=&quot;highlighter-rouge&quot;&gt;SCNSceneRendererDelegate&lt;/code&gt; protocolになります。
これを採用すれば、SceneKitが行っている描画やアニメ処理、物理演算といったタイミングにフックすることができます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;scenekitがフレーム毎にしていること&quot;&gt;SceneKitがフレーム毎にしていること&lt;/h5&gt;
&lt;p&gt;SceneKitが何を行っているかについては、&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerendererdelegate&quot;&gt;公式&lt;/a&gt;にて解説されています。&lt;br /&gt;
下の図は1フレーム※で行われている処理と各フックタイミングの解説です。&lt;br /&gt;
※ 60FPSだとしたら、 1 / 60 ≒ 0.01667秒毎に呼ばれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-3.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-3.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は更新毎にカメラ制御などをしたいので&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerendererdelegate/1522937-renderer&quot;&gt;func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval)&lt;/a&gt;を使います。&lt;/p&gt;

&lt;h5 id=&quot;デフォルトだと動かないと更新されない&quot;&gt;デフォルトだと動かないと更新されない&lt;/h5&gt;

&lt;p&gt;SceneKitはデフォルト値だと、描画物やアニメ、物理演算など前フレームより変化がないと更新が実行されず、
同様にdelegateによるフックも呼び出されません。&lt;/p&gt;

&lt;p&gt;これでは1フレーム毎に動かしたい、一定時間たったら動くなど、時間軸による制御が不可能なので、常にこれが呼ばれるようにする必要があります。
これは&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/2867339-renderscontinuously&quot;&gt;SCNView.rendersContinuously&lt;/a&gt;として用意されてるので、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にすれば,後述するFPS値のレートで更新処理が行われます。&lt;/p&gt;

&lt;h4 id=&quot;3-fps指定&quot;&gt;3. FPS指定&lt;/h4&gt;

&lt;p&gt;FPSはSceneKitが管理しており、この値レートに従って更新されます。&lt;br /&gt;
その値プロパティが&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/1621205-preferredframespersecond&quot;&gt;preferredFramesPerSecond&lt;/a&gt;となります。&lt;br /&gt;
この値はデフォルトでは60FPSとなっています。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredFramesPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendersContinuously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意点が2点あり、FPSは処理負荷に依存するモニター値であるため、ここの値が実際のFPS値となるものではなく、指標としてのFPSとなります。
つまり60FPSであれば0.01秒に1回描画を行うように動きます。&lt;br /&gt;
またもう1点は、与えられたFPSにそのまま適用するのではなくSceneKit内部で定めたできるだけ近いFPSを選択するようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview/2867339-renderscontinuously&quot;&gt;rendersContinuously&lt;/a&gt;は先程述べたように、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にしないと毎回FPSレートに呼ばれなくなります。&lt;/p&gt;

&lt;h4 id=&quot;4-その他&quot;&gt;4. その他&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 何も描画してないときの背景色. ライトとは違う色にすることをオススメします&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoenablesDefaultLighting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showsStatistics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;自体に説明は特に不要ですが、アドバイスとしては、SCNLightの色とは異なる色にしておくことをオススメします。
なぜなら最初の実装中は、ライトと同じ色にしていると描画されているのかどうか分からないためです。&lt;/p&gt;

&lt;p&gt;例えば、背景を白、ライトを白の場合にしたとしましょう。&lt;br /&gt;
この場合、 画面が真っ白だった場合に&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;そもそもオブジェクトが描画されていない&lt;/li&gt;
  &lt;li&gt;描画されているが陰影処理が未適用まはライトが強すぎて視覚認識できない&lt;/li&gt;
  &lt;li&gt;カメラが違う方向向いていてスクリーンに投影されていない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など複数要因が浮上し、原因特定に時間がかかるためです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerenderer/1523812-autoenablesdefaultlighting&quot;&gt;autoenablesDefaultLighting&lt;/a&gt;はSceneに自動でライトを追加するかどうかを決めます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;の場合、ライトなしかambientライトのみのときに、omnidirectionalなライトを自動で追加、配置します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnscenerenderer/1522763-showsstatistics&quot;&gt;showsStatistics&lt;/a&gt;はstatisticsを表示するフラグです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;にして実行すると画面下にオーバーレイでviewが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-4.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-4.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左側の+をタップすると、上記で解説したSceneKitがに行っている処理区分に分かれた負荷が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-5.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-5.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;カメラをセット&quot;&gt;カメラをセット&lt;/h3&gt;

&lt;p&gt;viewの準備が出来たら、sceneを用意しnodeを追加してく作業になります。&lt;/p&gt;

&lt;p&gt;まずカメラを追加します。最初にカメラである理由はなく、モデルやライトが先でも問題はないです。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cameraNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNVector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldOfView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fovy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zFar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomOutMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cameraNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNode&lt;/code&gt;という箱にcameraに対して &lt;code class=&quot;highlighter-rouge&quot;&gt;SCNCamera&lt;/code&gt;をセットしたことでカメラとして使います。ダックタイピングみたいですね。。
&lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;SCNCamera&lt;/code&gt;の位置となります。
&lt;code class=&quot;highlighter-rouge&quot;&gt;camera&lt;/code&gt;のFOVとZ-Farの値を設定します。
この値がなんなのかは、&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scncamera&quot;&gt;公式&lt;/a&gt;に解説があります。
ざっくり説明するとFOVが視野でZ-Farが見える距離です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-6.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-6.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにFloatだったりSCNFloatだったりCGFloatだったりと型が統一されていません。ここらへんは後々統一されるといいですね。&lt;/p&gt;

&lt;h3 id=&quot;球体モデルに画像を貼る&quot;&gt;球体モデルに画像を貼る&lt;/h3&gt;
&lt;p&gt;今回はGLKitで作ったときとは異なり、球体モデルは自作ではなくプリセットSCNSphereを使いました。
もしSCNSphereのTexture UV値が頂点情報になかったり、値がでたらめだったら、従来どおり自作する予定でした。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sphere&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;segmentCount&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;materials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;materials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDoubleSided&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sphereNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sphereNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;modelNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sphereNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;球体を作成し、画像を球体が持つマテリアル情報のdiffuse陰影に適用します。
diffuseに関しては&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnmaterial/1462589-diffuse&quot;&gt;SCNMaterial.diffuse&lt;/a&gt;に説明があります。&lt;/p&gt;

&lt;p&gt;とりあえず覚えることとしてはdiffuseは基礎カラーまたはテクスチャとして捉えといても構いません。&lt;br /&gt;
diffuseの他にambientやmetalness,specularなどシェーダーがありますが、これらはシェーダー言語で自作することも可能です。&lt;br /&gt;
とりあえず基本だから用意してくれているってだけです。&lt;br /&gt;
頑張れば下図のような川瀬式シェーダーも可能になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-7.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-07-ios-scene-kit-abc-7.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
(図は[Kawase 2003]より)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isDoubleSided&lt;/code&gt; はポリゴン面の法線を無視して両面に画像を表示するように支持しています。
これは360度パノラマ画像は球体の中から見ることを基本としてるためです。
本来であれば球体の法線を逆ベクトルにする方法もあるのですが、SCNSphereは予めモデリングされたものなので面毎に法線を反転となると再生成となり、元の球体自作と変わらないので、今回の形をとりました。&lt;/p&gt;

&lt;h3 id=&quot;ambientライトを用意&quot;&gt;ambientライトを用意&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ambientLightNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ambient&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ambientLightNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは既に読めると思うので特に説明はせず省きます。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magnificationFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CALayerContentsFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minificationFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CALayerContentsFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これは受け取ったレイヤーに対する拡大と縮小時の補間フィルターアルゴリズムの選定です。&lt;/p&gt;

&lt;h3 id=&quot;scnscenerendererdelegateでフレーム更新を受け取る&quot;&gt;SCNSceneRendererDelegateでフレーム更新を受け取る&lt;/h3&gt;

&lt;p&gt;前述したとおり、VCに対してSCNSceneRendererDelegateを採用しています。
GLKitのときの違いとしては、前回時間の算出方法が異なります。&lt;br /&gt;
SceneKitでは自分で保持し算出する必要があります。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateAtTime&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timeSinceLastUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousTime&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;previousTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また回転行列がYawPitchRollではなく任意軸になっているため、
Yawの回転比率に応じて、PitchとRollの値をcos/sinでだしてPitch軸を回転させていたのに対して&lt;br /&gt;
任意軸となるため、そのままだと実質Roll軸の回転となってしまいます。&lt;/p&gt;

&lt;p&gt;そのためカメラの上下回転に関しては、カメラの横のベクトルが必要となるので、元々求めている前ベクトルとYベクトルの２つを外積することで
カメラの横ベクトルを算出し、それを回転の任意軸として設定することで、カメラの上下回転を実現しました。&lt;/p&gt;

&lt;h3 id=&quot;あとは同じ&quot;&gt;あとは同じ&lt;/h3&gt;

&lt;p&gt;あとはほとんど前回と同じになります。&lt;/p&gt;

&lt;h2 id=&quot;glkitと異なり躓いたポイント&quot;&gt;GLKitと異なり躓いたポイント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;動かないとupdateが呼ばれない&lt;/li&gt;
  &lt;li&gt;回転行列がYawPitchRollの3軸ではなく任意軸&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上, 実際にやってみたら躓きポイント、特に回転行列APIが任意軸になってる部分で大分気づくのに時間がかかりました。
今回GLKitからSceneKitに差し替えたことで、SceneKitの手軽さを体験できたことは良かったなと思いました。&lt;/p&gt;

&lt;p&gt;Unityであればリソースアセット管理とそれの編集などトータル的に勝ってはいますが、
ここまでグラフィカルエンジンのことを気にせず3Dコンテンツに集中できるとなると、ちょっと元ゲーム開発者としてはゲームを作ってみようかなと心がソワソワしました。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="scene-kit" /><category term="swift" /><summary type="html">GLKitからSceneKitに変えざるを得ない状況に直面し、SceneKitの調査や躓いたポイントについてまとめます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-07-ios-scene-kit-abc.png" /></entry><entry><title type="html">iOSDC Japan 2019に行くメリットについて考えてみた</title><link href="https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro" rel="alternate" type="text/html" title="iOSDC Japan 2019に行くメリットについて考えてみた" /><published>2019-09-05T00:00:00+09:00</published><updated>2019-09-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro</id><content type="html" xml:base="https://blog.mothule.com/ios/ios-iosdc-japan-2019-pro">&lt;p&gt;9月5日から7日までの3日間で開催されるiOSDC Japan 2019の初日に参加しました。
初日は前夜祭ということで、トークは2つ参加で終わる短さでした。&lt;/p&gt;

&lt;h2 id=&quot;私は普段勉強会にほとんど参加しません&quot;&gt;私は普段勉強会にほとんど参加しません&lt;/h2&gt;

&lt;p&gt;なぜなら、大抵の発表内容で使われるスライドは公開され、
そのスライドやトークを聞いた人がまた記事にするので、その記事を見れば大抵のことは理解できるためです。
トークで全てが分からなくても、スライドにはアウトラインとアピールの２つが入っていることが必須であるため、
その２つがあればそこから自分で知識を吸収することは十分に可能です。&lt;/p&gt;

&lt;h3 id=&quot;リスナーとスピーカー間のメリット差が天地&quot;&gt;リスナーとスピーカー間のメリット差が天地&lt;/h3&gt;

&lt;p&gt;スピーカーとして参加するのはとても意義があるメリットの多い行為だと思います。
なぜなら、スピーカーとして発表するスライドを作成するために必要な調査や得た知識を体系的にまとめあげ
分かりやすい資料として作り上げることは、己の知識の棚卸しとなりスキルとして強く結びつくためです。&lt;/p&gt;

&lt;p&gt;それだけでなく、スピーカーは注目され名前や顔を覚えられ個人としてのブランディングも行えるため
個人活動において優位に働きます。&lt;/p&gt;

&lt;p&gt;反対にリスナーはそのどちらもなく、聞くに徹します。
面識のない人同士で話すことはできたとしても、有意義な会話に繋がることは希少で大抵はちょっとした会話で終わります。&lt;/p&gt;

&lt;h2 id=&quot;iosdc-japan-2019に参加するメリット&quot;&gt;iOSDC Japan 2019に参加するメリット&lt;/h2&gt;

&lt;p&gt;iOSDC Japanでは、他勉強会と違いなく、トークでは使用されるスライドは後日ネットでも見れるようになっており、
質問に関しては、今はTwitterによりメンションを送り直接質問を投げることもできます。&lt;/p&gt;

&lt;p&gt;では直接カンファレンスに参加するメリットとは何でしょうか？&lt;/p&gt;

&lt;h3 id=&quot;規模感によるトレンドを知る&quot;&gt;規模感によるトレンドを知る&lt;/h3&gt;

&lt;p&gt;実際に参加することで分かることの一つとして、参加人数です。
参加人数からiOS/Swiftに興味を持つエンジニアの規模と質が分かります。&lt;/p&gt;

&lt;p&gt;若い人が多いのか？ どの話題に興味を持っているのか？が若干汲み取ることができます。&lt;/p&gt;

&lt;p&gt;もしあなたがiOS/Swiftが下火に感じているのなら参加して他カンファレンスとの相対的な規模感を比較するといいでしょう。&lt;/p&gt;

&lt;h3 id=&quot;スライドだけでは汲み取れない周りのスキルとかが見える&quot;&gt;スライドだけでは汲み取れない周りのスキルとかが見える&lt;/h3&gt;

&lt;p&gt;スライドでは丁寧に作り上げられていると、この人はできる人なんだろうなと感じてしまいますが、
実際の発表を聞くとそこに疑問を感じることがあります。人間味があり自分と大差ないなと感じます。
&lt;strong&gt;反対もあり、スライドだけでは見えてこない、「この人多分相当苦労して色々な知識を得てこの内容に絞ってるな」と感じるトークもあります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;またリスナーの質問によっても登壇者の知識が体系的なのか特化型なのか知ることもできますし、
質問する人達が多ければ、自分がそれらの質問内容についてこれているか？程度が分かります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このようにリスナーにとってiOSDC Japanのような規模の大きいカンファレンスには、他の勉強会と違って一定のメリットは存在します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;市場を知れる&lt;/li&gt;
  &lt;li&gt;自分の現在地を知れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然ながらスピーカーにとっては、通常の勉強会のメリットに拍車がかかります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="report" /><summary type="html">9月5日から7日までの3日間で開催されるiOSDC Japan 2019の初日に参加しました。 初日は前夜祭ということで、トークは2つ参加で終わる短さでした。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-05-ios-iosdc-japan-2019-pro.png" /></entry><entry><title type="html">LinuxのCentOSでユーザー操作</title><link href="https://blog.mothule.com/linux/centos/linux-user-control-commands" rel="alternate" type="text/html" title="LinuxのCentOSでユーザー操作" /><published>2019-09-03T00:00:00+09:00</published><updated>2019-09-03T00:00:00+09:00</updated><id>https://blog.mothule.com/linux/centos/linux-user-control-commands</id><content type="html" xml:base="https://blog.mothule.com/linux/centos/linux-user-control-commands">&lt;p&gt;ユーザーの追加や削除、グループ追加やsudo付与などユーザー操作に関するコマンドを忘れては調べ忘れては調べるを繰り返しているので、いい加減自分用に用意しました。&lt;/p&gt;

&lt;h2 id=&quot;ユーザー情報を確認する&quot;&gt;ユーザー情報を確認する&lt;/h2&gt;

&lt;p&gt;idコマンドで確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id [user name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;rootを調べた場合はこうなります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id root
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ユーザーを指定しない場合は、カレントユーザーになります。
例えばユーザー&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;でログインしてる場合は次のようになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;id
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hoge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hoge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hoge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ユーザーを作成する&quot;&gt;ユーザーを作成する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useradd [user name]&lt;/code&gt; でユーザーを作成し、
&lt;code class=&quot;highlighter-rouge&quot;&gt;passwd [user name]&lt;/code&gt; で指定ユーザーのパスワード設定ができます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;usermod -G wheel [user name]&lt;/code&gt;で指定ユーザーにsudo権限を付与します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wheel&lt;/code&gt;という予め用意されているグループには、sudoが使えるグループになっており、
このグループにユーザー追加することで,ユーザーがsudoが使えるようになります。&lt;/p&gt;

&lt;h3 id=&quot;ユーザー情報はファイルになっている&quot;&gt;ユーザー情報はファイルになっている&lt;/h3&gt;

&lt;p&gt;作成したユーザーはどこで管理されているのかと言うと、ファイルとして一覧管理されています。&lt;/p&gt;

&lt;p&gt;先程作ったユーザー&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;を確認します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/passwd | tail &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1
hoge:x:1000:1000::/home/hoge:/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;passwdというファイルにユーザー情報が保存されています。
passwdという名前ですが、パスワードは別ファイルになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /etc/shadow | tail &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1
hoge:&lt;span class=&quot;nv&quot;&gt;$6$q0cLZgb4$dqS356Q4qNWcvDGxqqUhEOW32cXpma8uErO9ioiAZly3V3iQ&lt;/span&gt;.x1F3.zqzE.96yWFTl3klPNWJ61.9ahXvVPkj0:18141:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shadow&lt;/code&gt;ファイルになります。こちらは&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;権限がないと見れないので、先の &lt;code class=&quot;highlighter-rouge&quot;&gt;wheel&lt;/code&gt;グループにユーザーを追加する必要があります。&lt;/p&gt;

&lt;p&gt;また加入したグループもファイルになっています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/group | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;wheel
wheel:x:10:hoge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ユーザーを削除する&quot;&gt;ユーザーを削除する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;userdel -r [user name]&lt;/code&gt;でユーザーとユーザーディレクトリを削除します。
&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; が未指定だとユーザーのみが削除され、ユーザーディレクトリは残ります。&lt;/p&gt;

&lt;h2 id=&quot;グループを削除する&quot;&gt;グループを削除する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;groupdel [group name]&lt;/code&gt;で指定グループを削除することができますが、
グループをプライマリとするユーザーがいる場合は削除できません。&lt;/p&gt;

&lt;p&gt;Linuxではユーザーを作成時に同時にグループも作成し、作成されたユーザーの最初のグループとなります。
ユーザー&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;であればグループ&lt;code class=&quot;highlighter-rouge&quot;&gt;hoge&lt;/code&gt;が作成されます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/group | tail &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1
hoge:x:1000:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;所有者を変更する&quot;&gt;所有者を変更する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chown [user name] [file or directory]&lt;/code&gt;で変更ができます。&lt;/p&gt;

&lt;h2 id=&quot;グループを変更する&quot;&gt;グループを変更する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chgrp [group name] [file or directory]&lt;/code&gt;で変更ができます。&lt;/p&gt;</content><author><name></name></author><category term="linux" /><category term="centos" /><summary type="html">ユーザーの追加や削除、グループ追加やsudo付与などユーザー操作に関するコマンドを忘れては調べ忘れては調べるを繰り返しているので、いい加減自分用に用意しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">p4mergeでgit mergeの衝突を解決する</title><link href="https://blog.mothule.com/tools/git/git-merge-p4merge" rel="alternate" type="text/html" title="p4mergeでgit mergeの衝突を解決する" /><published>2019-09-02T00:00:00+09:00</published><updated>2019-09-02T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/git/git-merge-p4merge</id><content type="html" xml:base="https://blog.mothule.com/tools/git/git-merge-p4merge">&lt;p&gt;gitを使っていると必ず出くわすことになるコンフリクト。
機械的なマージでは解決できない場合にユーザー自身の手で解決を丸投げする面倒くさいあれです。
衝突してるファイルをエディタで見ると、いつ見ても見慣れないセパレータで表現されておりますます嫌になります。
今回はGUIでグラフィカルに衝突解決を行うツール&lt;strong&gt;p4merge&lt;/strong&gt;について紹介します。&lt;/p&gt;

&lt;h2 id=&quot;guiでマージするならp4merge&quot;&gt;GUIでマージするならp4merge&lt;/h2&gt;

&lt;p&gt;p4mergeをGitの衝突解決ツールとして設定すると、衝突時にp4mergeでグラフィカルにマージを行うことができます。&lt;/p&gt;

&lt;h3 id=&quot;p4merge-のいいところ&quot;&gt;p4merge のいいところ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;衝突位置にだけ移動するショートカットが用意されている&lt;/li&gt;
  &lt;li&gt;衝突ソース毎に背景色が違うので見分けがつく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;インストール方法&quot;&gt;インストール方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.perforce.com/ja/zhipin/helix-core-apps/merge-diff-tool-p4merge&quot;&gt;公式サイト&lt;/a&gt;からOSを選んでダウンロードします。&lt;/p&gt;

&lt;h2 id=&quot;p4mergeが起動するように設定&quot;&gt;p4mergeが起動するように設定&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; を次のように設定します。他の無関係な設定は省いています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;merge]
  tool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; p4merge
  keepBackup &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mergetool &lt;span class=&quot;s2&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Applications/p4merge.app/Contents/MacOS/p4merge
  cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; p4merge &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MERGED&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  keepTemporaries &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;trustExitCode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
  &lt;/span&gt;keepBackup &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このように設定すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git mergetool&lt;/code&gt; と実行すれば、 p4merge　が起動します。&lt;/p&gt;

&lt;p&gt;もし、マージではなく比較でも p4merge を使いたい場合は次のように設定します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;diff]
  tool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; vimdiff

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;difftool]
	prompt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;difftool &lt;span class=&quot;s2&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
	cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Applications/p4merge.app/Contents/MacOS/p4merge &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REMOTE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;
	trustExitCode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この設定では、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git diff&lt;/code&gt; を実行すればユニファイド型式で表示され、&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git difftool&lt;/code&gt;を実行すれば vimdiff で表示され、&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git difftool -t p4merge&lt;/code&gt;を実行すれば p4merge で表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;p4mergeの設定&quot;&gt;p4mergeの設定&lt;/h2&gt;

&lt;p&gt;p4merge自身の設定についてです。デフォルトでも使うことは可能ですが、いくつか設定をしておくことで余計な穴にハマらず使えるかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2019-09-02-git-merge-p4merge-1.png&quot;&gt;&lt;img src=&quot;/assets/images/2019-09-02-git-merge-p4merge-1.png&quot; width=&quot;75%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フォントは日本語対応フォントにする&lt;/li&gt;
  &lt;li&gt;文字が重なる場合はフォントを等倍にする&lt;/li&gt;
  &lt;li&gt;encode は utf-8(厳密にはファイルと合わせる)&lt;/li&gt;
  &lt;li&gt;改行タイプはシステムと合わせる(厳密にはgit commit時に自動変換オプションもあるのでそっちの兼ね合いも必要)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparison method&lt;/code&gt; は 改行差異とスペース幅を無視する(ここは好みの問題でもある)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tools" /><category term="git" /><category term="p4merge" /><summary type="html">gitを使っていると必ず出くわすことになるコンフリクト。 機械的なマージでは解決できない場合にユーザー自身の手で解決を丸投げする面倒くさいあれです。 衝突してるファイルをエディタで見ると、いつ見ても見慣れないセパレータで表現されておりますます嫌になります。 今回はGUIでグラフィカルに衝突解決を行うツールp4mergeについて紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-09-02-git-merge-p4merge.png" /></entry><entry><title type="html">RackとRack Middlewareを知ることでRailsの一部仕組みを理解する</title><link href="https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension" rel="alternate" type="text/html" title="RackとRack Middlewareを知ることでRailsの一部仕組みを理解する" /><published>2019-09-01T00:00:00+09:00</published><updated>2019-09-01T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/rack/rails-rack-middleware-extension">&lt;p&gt;Railsの挙動を拡張するには3つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rack Middleware&lt;/li&gt;
  &lt;li&gt;Railtie&lt;/li&gt;
  &lt;li&gt;その他, CLIなど&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回は &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack Middleware&lt;/code&gt; で拡張するときの基本や拡張先となる&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack&lt;/code&gt;の仕組みについて調べました。&lt;br /&gt;
この記事でRailsとRackサーバーの関係や、Rack自体の知識とRackに準拠した拡張&lt;code class=&quot;highlighter-rouge&quot;&gt;Rack Middleware&lt;/code&gt;について初めの一歩程度は理解が深まると思います。&lt;/p&gt;

&lt;h2 id=&quot;rackとは規約&quot;&gt;Rackとは規約&lt;/h2&gt;

&lt;p&gt;Rackとは大雑把にまとめると、Web server と Ruby framework 間をつなぐ規約、取り決めです。&lt;br /&gt;
PythonのPSGIの規約を参考に登場し、サーバーとRubyで実装されたアプリの差異を埋める緩衝材みたいな存在です。&lt;/p&gt;

&lt;h3 id=&quot;規約について&quot;&gt;規約について&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ru&lt;/code&gt;を拡張子のRubyファイルを用意し、決まったシグネチャとレスポンスを返すメソッドを用意することでRackとして機能します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;シグネチャはHashを引数にした&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;メソッド&lt;/li&gt;
  &lt;li&gt;レスポンスは次の3つを含む配列を返す
    &lt;ul&gt;
      &lt;li&gt;HTTPステータスコード&lt;/li&gt;
      &lt;li&gt;ヘッダー情報が格納されたHash&lt;/li&gt;
      &lt;li&gt;コンテンツオブジェクト&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり最小コードで表すと次のコードになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.ru&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;引数Hashは慣習として&lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt;がネーミングされます。&lt;/li&gt;
  &lt;li&gt;次のコード例では、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc#call&lt;/code&gt; によりシグネチャの制約を満たしています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rack-middlewareはいわばパイプ&quot;&gt;Rack Middlewareはいわばパイプ&lt;/h2&gt;

&lt;p&gt;Rack MiddlewareとはRackの規約に準拠し、
Rackアプリに機能を追加するミドルウェアです。&lt;/p&gt;

&lt;h2 id=&quot;rackアプリケーションを作ってみる&quot;&gt;Rackアプリケーションを作ってみる&lt;/h2&gt;

&lt;p&gt;文章だけではイメージはしにくいので、実際に動く簡単なRackアプリを作ってみます。&lt;/p&gt;

&lt;p&gt;ますRackアプリを作る上で便利クラスなどが集まったgemを用意する&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rack&lt;/code&gt;をインストールすることで&lt;code class=&quot;highlighter-rouge&quot;&gt;rackup&lt;/code&gt;というコマンドが使えるようになります。&lt;br /&gt;
先程の &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;rakeup&lt;/code&gt; で呼ぶことでサーバーが起動します。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rackup config.ru
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;※ &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; であればそもそも指定が不要で &lt;code class=&quot;highlighter-rouge&quot;&gt;rakeup&lt;/code&gt; だけでいい。&lt;/p&gt;

&lt;h2 id=&quot;rack-middlewareを作ってみる&quot;&gt;Rack Middlewareを作ってみる&lt;/h2&gt;

&lt;p&gt;Rack Middlewareとは先程のRackアプリに対して、処理を追加するプログラムです。&lt;br /&gt;
次のような &lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaceWords&lt;/code&gt; クラスを &lt;code class=&quot;highlighter-rouge&quot;&gt;use ReplaceWords&lt;/code&gt; と呼ぶことで
処理を追加することができます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReplaceWords&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http_status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/rake/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rack'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, Rack world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReplaceWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rack-middlewareには制約がある&quot;&gt;Rack Middlewareには制約がある&lt;/h3&gt;

&lt;p&gt;Rack同様にミドルウェアにもシグネチャとレスポンスを守る必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rackアプリを引数とした&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;メソッドがある&lt;/li&gt;
  &lt;li&gt;Rackアプリ同様に、 Hashを引数とした&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;メソッドがある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この制約を守っていれば、パイプのように連結することも可能になります。&lt;/p&gt;

&lt;p&gt;下記は2つのRack Middlewareを連結したことになります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReplaceWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UpperWords&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようにパイプライン、ストリームのように連結して受け取った値を次に渡すことができるのは、制約を守っているためです。&lt;/p&gt;

&lt;h2 id=&quot;envの中身&quot;&gt;envの中身&lt;/h2&gt;
&lt;p&gt;env、&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;の第一引数には、リクエスト情報が格納されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アクセスパス&lt;/li&gt;
  &lt;li&gt;IPアドレス&lt;/li&gt;
  &lt;li&gt;Acceptなどのヘッダー&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rack-middlewareにおけるenvの活用&quot;&gt;Rack Middlewareにおけるenvの活用&lt;/h3&gt;

&lt;p&gt;Rack Middlewareを連結することでenvはContext情報のように取り回され続きます。&lt;/p&gt;

&lt;p&gt;そのため env に値を追加すれば、次のRack Middlewareでその値を使うことができます。&lt;/p&gt;

&lt;h2 id=&quot;railsのrack-middlewareを確認&quot;&gt;RailsのRack Middlewareを確認&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rake middleware
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のrakeコマンドで &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; 部分一覧を表示します。&lt;br /&gt;
RailsのRackがどのようなMiddlewareを経てRailsに渡ってきてるのか興味がある方は調べてみると面白いかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;railsでrack-middlewareを追加する&quot;&gt;RailsでRack Middlewareを追加する&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt;を編集ではなく、 &lt;code class=&quot;highlighter-rouge&quot;&gt;config/application.rb&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;config/envrionments/*.rb&lt;/code&gt; ファイルの中で &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; で登録します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LogMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;RackやRack Middlewareを知ることで、Railsの拡張性の高さや実際にどうやって拡張されているのかを知ることができたと思います。&lt;/p&gt;

&lt;p&gt;このように普段ほとんど関わることのない機能であっても知ることで色んな所の仕組みが理解できるようになるのはおもしろいですね。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="rack" /><category term="rack-middleware" /><summary type="html">Railsの挙動を拡張するには3つの方法があります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">はてなブログからJekyllを使ったGitHub Pagesに移行した理由</title><link href="https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog" rel="alternate" type="text/html" title="はてなブログからJekyllを使ったGitHub Pagesに移行した理由" /><published>2019-08-30T00:00:00+09:00</published><updated>2019-08-30T00:00:00+09:00</updated><id>https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog</id><content type="html" xml:base="https://blog.mothule.com/notebook/migration-blog-to-github-pages-from-hatenablog">&lt;p&gt;長年利用していた&lt;code class=&quot;highlighter-rouge&quot;&gt;はてなブログ&lt;/code&gt;からGitHub Pages上でJekyllを使った静的生成サイトに移行しました。
この記事ではなぜ移行したのか？なぜJekyllなのか？なぜGitHub Pagesなのか？といった選定理由や移行理由などについて
まとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;移行したかった理由&quot;&gt;移行したかった理由&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;カスタマイズが非常にやりにくかった&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;細かい理由はありますが、この1点が常に不便で作りたいサイトが作れない煩わしさがありました。&lt;/p&gt;

&lt;p&gt;パンくずリストを配置したい.グロナビを配置したい.関連記事による回遊率を上げたい.toc置きたい.
決められた場所ではなくもっと全体的に自由に改変したい。
という欲が常に付きまとい、CSSやJavascriptを弄るなどして我慢していましたが、&lt;/p&gt;

&lt;p&gt;移行先について調べてしまったら追加で&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;記事に対して自動処理を挟みたい時に挟めるなど実現可能性を確保しておきたい&lt;/li&gt;
  &lt;li&gt;自分のブランディングに対して独自ドメインが必須だが、無料アカウントではできない&lt;/li&gt;
  &lt;li&gt;得た知識で自分でSEO対応したブログを作ってみたい&lt;/li&gt;
  &lt;li&gt;Ruby製ツールに慣れることでRubyスキルもあげれるかもしれない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などの欲も出てきて、移行することを決断しました。
ちなみにこのように移行について深刻に悩んだのは5回目ぐらいです。&lt;/p&gt;

&lt;h3 id=&quot;移行先にgithub-pagesを選んだ理由&quot;&gt;移行先にGitHub Pagesを選んだ理由&lt;/h3&gt;
&lt;p&gt;ホスティング先をGitHub Pagesを選んだ理由は至ってシンプルで、技術ブログっぽいしエンジニアっぽいって理由なだけです。&lt;/p&gt;

&lt;h2 id=&quot;静的サイト生成ツールにjekyllを選んだ理由&quot;&gt;静的サイト生成ツールにJekyllを選んだ理由&lt;/h2&gt;

&lt;h3 id=&quot;もともとはmiddlemanを予定していました&quot;&gt;もともとはMiddlemanを予定していました&lt;/h3&gt;
&lt;p&gt;理由はRubyで書かれたツールで、View周りをHamlで書くことができたためです。
しかし、Middlemanを調べると同じようにMiddlemanから別ツールに移行する記事もありました。
それら記事はプレビューや記事速度が遅すぎるという理由でHUGOに移行していました。
HUGOはGolang製でGo言語の処理速度により記事生成やプレビューがとにかく早い。が売りでした。
しかし自分はこれを検討はしたものの採用はしませんでした。なぜならGo言語についてあまり構文を理解していないので、
プラグイン作成とかちょっとしたView内コードを書くなどカスタマイズしたいときにGo言語が障害となりうると思っていたからです。
実際サンプル覗いてもGo言語特有に&lt;code class=&quot;highlighter-rouge&quot;&gt;ret, error := hoge&lt;/code&gt; というエラーとレスポンスの同時受け取りが目に入り、却下しました。&lt;/p&gt;

&lt;h3 id=&quot;他にどんなツールがあるから調べた&quot;&gt;他にどんなツールがあるから調べた&lt;/h3&gt;
&lt;p&gt;もともと知っているツールが少なかったこともあって、一度全体的に静的サイト生成ツールについて情報収集を行いました。
結果Ruby製でMiddlemanとJekyllがありました。&lt;/p&gt;

&lt;p&gt;このときMiddlemanではなくJekyllに揺れた理由として&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MiddlemanのRepositoryが動いていない&lt;/li&gt;
  &lt;li&gt;JekyllはGitHub Pagesが公式サポートしている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2点です。&lt;/p&gt;

&lt;h2 id=&quot;jekyllはmasterにpushすれば自動生成される仕組みがある&quot;&gt;Jekyllはmasterにpushすれば自動生成される仕組みがある&lt;/h2&gt;

&lt;p&gt;Jekyllにはgithubが用意するgemに則ったサイト構成であれば、masterにpushするだけであとの生成は、github側が自動で生成してくれるらしいです。
自分もその恩恵にあやかろうと思っていたのですが、対象のRuby言語バージョンが低くて、流石にここまで低いバージョンでメンテやカスタマイズしたくないなと思い、
自分でdeploy用スクリプトを用意して運用しています。&lt;/p&gt;

&lt;h2 id=&quot;jekyllのviewがliquidで苦労する&quot;&gt;JekyllのViewがLiquidで苦労する&lt;/h2&gt;

&lt;p&gt;JekyllのViewはLiquidという慣れないビューエンジンを使っており、最初大変でしたが、
&lt;a href=&quot;https://jekyllrb-ja.github.io/docs/&quot;&gt;Jekyllのサイト&lt;/a&gt;が日本語で書いてあり結構分かりやすかったので、
チュートリアルをやったりして覚えました。&lt;/p&gt;

&lt;h2 id=&quot;カスタムタグがrubyで書ける&quot;&gt;カスタムタグがRubyで書ける&lt;/h2&gt;
&lt;p&gt;Markdown中に記載できるタグを自作ができて、かつRubyで処理を書くので、Rubyに触る機会が増やす目的は達成できたかなと思います。&lt;/p&gt;

&lt;h2 id=&quot;ドメインにはムームードメインを使った&quot;&gt;ドメインにはムームードメインを使った&lt;/h2&gt;
&lt;p&gt;自分用のドメインを買うのにもどこがいいか調べた結果ムームードメインにしました。
もともとはGMOのどれかにしようと目星は付けていましたが、
同じ親会社のサービスであるお名前.comは代理公開が有料だったので、ムームードメインにしました。
GMOに絞った理由は、ドメインという運用において数多く、そして長く運用している＝安定性が高い。という決断です。&lt;/p&gt;</content><author><name></name></author><category term="notebook" /><category term="jekyll" /><category term="github-pages" /><summary type="html">長年利用していたはてなブログからGitHub Pages上でJekyllを使った静的生成サイトに移行しました。 この記事ではなぜ移行したのか？なぜJekyllなのか？なぜGitHub Pagesなのか？といった選定理由や移行理由などについて まとめてあります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-08-30-migration-blog-to-github-pages-from-hatenablog.png" /></entry><entry><title type="html">CocoaPodsをrbenv+bundlerで管理する</title><link href="https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler" rel="alternate" type="text/html" title="CocoaPodsをrbenv+bundlerで管理する" /><published>2019-08-30T00:00:00+09:00</published><updated>2019-08-30T00:00:00+09:00</updated><id>https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler</id><content type="html" xml:base="https://blog.mothule.com/ios/cocoapods/ios-cocoapods-managed-rbenv-bundler">&lt;p&gt;iOS開発をする上で必要になってくるCocoaPods。これはRubyで書かれたPodという単位でiOSライブラリを管理するライブラリ管理ソフトウェアです。
CocoaPods単体であれば特に考えず &lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install cocoapods&lt;/code&gt; で直接現在のRubyのバージョンのCocoaPodsを入れておしまいですが、
fastlaneやslatherなどRubyで書かれたエコシステムも使うとなると、Rubyバージョンを意識する必要が出てきます。&lt;/p&gt;

&lt;p&gt;なぜなら、個人開発であれば大抵開発環境は1つであるため問題は起きませんが、
チーム開発となると環境を揃えず闇雲にその時点の最新バージョンをインストールしていては
人によって挙動が異なるなど、人依存(環境依存)の不具合が発生するためです。&lt;/p&gt;

&lt;p&gt;このようなどうでもいい部分で開発を妨害されないために、今回はCocoaPodsなどRuby製ツールをまとめて管理する方法についてまとめました。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xcode-select &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
rbenv install &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt; でインストールしたいバージョンを決める
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ruby version]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle init
Gemfileに gem &lt;span class=&quot;s1&quot;&gt;'cocoapods'&lt;/span&gt; を追加.バージョン指定はCocoaPodsと同じ.
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/ianheggie/rbenv-binstubs.git ~/.rbenv/plugins/rbenv-binstubs
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rbenvでruby管理してgem管理はbundler&quot;&gt;rbenvでRuby管理してgem管理はbundler&lt;/h2&gt;

&lt;p&gt;bundlerの前にRubyバージョンを管理するためにrbenvを入れて、RubyバージョンとbundlerバージョンとCocoaPodsバージョンをあわせます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rbenv が Ruby 管理&lt;/li&gt;
  &lt;li&gt;Ruby の bundler gem が CocoaPods gem 管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って感じです。 これだけだと分からないので、一つずつ説明していきます。&lt;/p&gt;

&lt;h3 id=&quot;gemとはrubyが提供するライブラリ単位&quot;&gt;gemとはRubyが提供するライブラリ単位&lt;/h3&gt;

&lt;p&gt;gemはRubyが提供するライブラリの単位です。
これはRubyのバージョン毎にgemが管理されています。
例えば Ruby 2.3のgem一覧と Ruby 2.6のgem一覧はインストールされているgemは異なります。&lt;/p&gt;

&lt;p&gt;現在のRubyのバージョンは &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ruby -v&lt;/code&gt; で確認できます。
そして、このバージョンにインストールされているgem一覧は、&lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem list&lt;/code&gt; で確認できます。
例えば自分が作っているアプリの環境は次のような感じです。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
ruby 2.5.3p105 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-10-18 revision 65156&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin18]

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list

&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; LOCAL GEMS &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;

bigdecimal &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.3.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
bundler &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.17.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cmath &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
csv &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
date &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
dbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
did_you_mean &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
etc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fcntl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fiddle &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
fileutils &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
gdbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
io-console &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 0.4.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ipaddr &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
json &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
minitest &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5.10.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
net-telnet &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
openssl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 2.1.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
power_assert &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
psych &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 3.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
rake &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12.3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
rdoc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 6.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
scanf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
sdbm &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
stringio &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 0.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
strscan &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
test-unit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.2.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
webrick &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.4.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
xmlrpc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
zlib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記見ると分かるように&lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;も一つのgemです。
このbundlerを使うことで他のgemのバージョン管理を行うことができます。&lt;/p&gt;

&lt;h3 id=&quot;rubyバージョン毎にgemがインストールされている&quot;&gt;Rubyバージョン毎にgemがインストールされている&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;つまりRubyバージョンも合わせる必要があります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例えばAさんが環境構築したとき&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt;でした。
&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.0&lt;/code&gt;の構文で書かれたバージョンをインストールできるようになります。
2年後,Bさんがチーム参画し、環境構築したら&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.5&lt;/code&gt;でした。
&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.5&lt;/code&gt;の構文で書かれたバージョンをインストールできるようになります。
その結果、Aさんの&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;の最新バージョン&lt;code class=&quot;highlighter-rouge&quot;&gt;1.2&lt;/code&gt;ですが、Bさんの&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;は最新バージョンは&lt;code class=&quot;highlighter-rouge&quot;&gt;2.1&lt;/code&gt;でした。
Bさんは&lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt;をAさんと同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;1.2&lt;/code&gt;に合わせたくとも、&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby 2.5&lt;/code&gt;では動かず…なんてことが起こりえます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そのため、Rubyバージョンをあわせておく必要があります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;※↑例なので、バージョンや互換性は適当です。&lt;/p&gt;

&lt;h2 id=&quot;rubyバージョン管理はrbenv&quot;&gt;Rubyバージョン管理はrbenv&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;でインストールできます。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(もしxcrunとかでエラーが出るようであれば &lt;code class=&quot;highlighter-rouge&quot;&gt;$ xcode-select --instal&lt;/code&gt; を実行して xcodeパッケージツールのインストールをしてみてください。)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rbenv versions&lt;/code&gt;を実行すると、今rbenvが管理してるRubyのバージョン一覧が表示され、 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; がつくバージョンが現在のRubyバージョンになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
  system
  2.1.10
  2.1.2
  2.2.1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2.3.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;by /Users/mothule/.rbenv/version&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  2.3.6
  2.3.7
  2.4.4
  2.5.1
  2.5.3
  2.6.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これをiOSプロジェクトだけ2.5.3にしたい場合は、次のコマンドを実行して生成されたファイルをiOSプロジェクト配下(git管理下)においてください。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;2.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このコマンドを実行すると &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;というファイルが生成され、もう一度Rubyバージョンを確認すると次のようになります。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
  system
  2.1.10
  2.1.2
  2.2.1
  2.3.0
  2.3.6
  2.3.7
  2.4.4
  2.5.1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2.5.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;by /Users/mothule/workspace/ios-project/.ruby-version&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  2.6.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このようにRubyバージョン2.5.3が動くようになっています。 これは &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;でバージョン指定されているためです。
ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;は &lt;code class=&quot;highlighter-rouge&quot;&gt;2.5.3&lt;/code&gt; と書いてあるだけです。
&lt;strong&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;をgit管理し、各開発環境がrbenvを使えば、Rubyバージョンを合わせることができます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;bundler-で-cocoapodsを動かす&quot;&gt;bundler で CocoaPodsを動かす&lt;/h2&gt;

&lt;h3 id=&quot;bundlerでcocoapodsをインストールする&quot;&gt;bundlerでCocoaPodsをインストールする&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install cocoapods&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;をインストールします。
そのためにbundlerが管理するファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle init&lt;/code&gt;で作ります。
エディタで&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;を開くと次のようにgemを追加します。&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cocoapods&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;保存後に &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bunlder install --path=vendor/bundle&lt;/code&gt;を実行すると, &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;がインストールされます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;--path=vendor/bundle&lt;/code&gt;とはgemのインストール場所を示すオプションで、iosプロジェクト配下にvendor/bundleフォルダを作成し、その中に &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt; のコードがインストールされます。
この &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt; は Gemfileがあれば再現可能なので git管理下から外しても構いません。&lt;/p&gt;

&lt;h3 id=&quot;bundlerでcocoapodsを動かす&quot;&gt;bundlerでCocoaPodsを動かす&lt;/h3&gt;

&lt;p&gt;bundler配下のgemを動かすには&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bunlder exec command&lt;/code&gt;のフォーマットに従わなくてはなりません。
例えば &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;のインストールを実行するには、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle exec pod install&lt;/code&gt; となります。
これは少し手間ですね。次のプラグインをインストールすることで &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt;の部分を省くことができます。&lt;/p&gt;

&lt;h2 id=&quot;rbenv-に-binstubs-をインストール&quot;&gt;rbenv に binstubs をインストール&lt;/h2&gt;
&lt;p&gt;直接CocoaPodsをインストールした場合は、パスが通っているため &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;のように実行することができますが、
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;によってインストールした場合は、パスが通っていないため &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; を実行しても違うCocoaPodsのgemが動いてしまいます。(直接インストールしたCocoaPodsが動く)
これをパスを通してくれるようになるプラグインが rbenv-binstubsです。&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt;が不要になります。
プラグインインストールは次の場所にgit cloneで配置するだけです。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/ianheggie/rbenv-binstubs.git ~/.rbenv/plugins/rbenv-binstubs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; にオプションを追加して再実行します。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうすることで、 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; によってインストールgemにもパスが通るようになるため&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;だけで、bundler管轄のcocoapodsが呼べるようになります。&lt;/p&gt;

&lt;h2 id=&quot;cocoapodsのバージョンアップはbundler操作&quot;&gt;CocoaPodsのバージョンアップはbundler操作&lt;/h2&gt;
&lt;p&gt;bundlerによって管理されたcocoapodsをバージョンアップする場合は、
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundler update&lt;/code&gt;で管轄gemをバージョン指定ルールに従った最新版にアップデートします。&lt;/p&gt;

&lt;h2 id=&quot;rubyバージョンはrbenv操作&quot;&gt;Rubyバージョンはrbenv操作&lt;/h2&gt;
&lt;p&gt;CocoaPodsや別ソフトウェアによりRubyバージョンを上げる必要がある場合は、 rbenv で新しくインストールし &lt;code class=&quot;highlighter-rouge&quot;&gt;.ruby-version&lt;/code&gt;を変更することでバージョンを変えることができます。
Rubyバージョンを更新した場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install bunlder&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; のインストール後に &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle install&lt;/code&gt;で新しいRubyバージョンでのbundlerとcocoapodsのインストールが必要になります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;iOS開発で便利なツールにはRuby製のものも多く、サーバーサイドがRailsなどで実装されているのであれば、iOSエンジニアであれどRuby環境を理解しておくだけで、
今回のような開発環境整備に役立てることができるようになります。&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="cocoapods" /><category term="rbenv" /><category term="bundler" /><summary type="html">iOS開発をする上で必要になってくるCocoaPods。これはRubyで書かれたPodという単位でiOSライブラリを管理するライブラリ管理ソフトウェアです。 CocoaPods単体であれば特に考えず $ gem install cocoapods で直接現在のRubyのバージョンのCocoaPodsを入れておしまいですが、 fastlaneやslatherなどRubyで書かれたエコシステムも使うとなると、Rubyバージョンを意識する必要が出てきます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/2019-08-30-ios-cocoapods-managed-rbenv-bundler.png" /></entry><entry><title type="html">ActiveRecordでpluckとselectしてpluckに変化はあるか？</title><link href="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord" rel="alternate" type="text/html" title="ActiveRecordでpluckとselectしてpluckに変化はあるか？" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-activerecord">&lt;p&gt;ちょっとした疑問になりますが、明確な違いなどは生まれるのか気になるコードがあります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;に速度差や消費メモリ差はあるのか？&lt;/p&gt;

&lt;h2 id=&quot;sqlは同じ&quot;&gt;SQLは同じ&lt;/h2&gt;

&lt;p&gt;出力されるSQLはどちらも同じでした。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;速度は微妙な変化&quot;&gt;速度は微妙な変化&lt;/h2&gt;

&lt;p&gt;90万件に対して行った結果&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;pluckのみ&lt;/th&gt;
      &lt;th&gt;select+pluck&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3228&lt;/td&gt;
      &lt;td&gt;3349&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3152&lt;/td&gt;
      &lt;td&gt;2972&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3126&lt;/td&gt;
      &lt;td&gt;3370&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3101&lt;/td&gt;
      &lt;td&gt;3144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3271&lt;/td&gt;
      &lt;td&gt;2945&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3454&lt;/td&gt;
      &lt;td&gt;3227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3120&lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3488&lt;/td&gt;
      &lt;td&gt;3577&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3046&lt;/td&gt;
      &lt;td&gt;3072&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3228&lt;/td&gt;
      &lt;td&gt;3413&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;pluckのみ平均: 3210.0ms select+pluck平均: 3231.625ms&lt;/p&gt;

&lt;h2 id=&quot;しかしselectは確実に処理されてる&quot;&gt;しかしselectは確実に処理されてる&lt;/h2&gt;

&lt;p&gt;SQLは同じ、速度差も大きな違いはないが、トレースしたところ 確実はselectメソッドは処理されてからpluckを呼び出されている。 速度で微妙にpluckのみが勝っているのもこのselectメソッド処理が呼ばれているからではないかと予想。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;実践に影響を及ぼす変化は起こりにくいと考えてよいが、 確実に無駄な処理は起きていることは事実であり、表面上のコード量も増えるので、 &lt;strong&gt;pluckを呼ぶのであれば,selectは呼ぶ必要はない。&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="active-record" /><summary type="html">ちょっとした疑問になりますが、明確な違いなどは生まれるのか気になるコードがあります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">Mac上でRailsとMySQLのサーバー分けたい</title><link href="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db" rel="alternate" type="text/html" title="Mac上でRailsとMySQLのサーバー分けたい" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db</id><content type="html" xml:base="https://blog.mothule.com/ruby/rails/active-record/ruby-rails-active-record-separate-rails-and-db">&lt;p&gt;開発中はMacでRailsアプリを開発してて、「いざ本番環境へデプロイ！完了！」って一息ついた矢先、「なんか重い…」「想定より遅い…」なんて経験ありませんか？&lt;/p&gt;

&lt;p&gt;原因の1つとして、一般的な開発環境では1PCにWebアプリとDBアプリが共存しており、これら2点間の通信はUnixドメインソケット方式で通信が行われます。 一方本番環境ではWebアプリとDBアプリそれぞれにサーバーが立っていることが一般的な基本構成で、これら2点間の通信はTCP/IP方式で通信が行われます。 この通信方式の違いにより大きな速度差が発生し、開発環境ではなかった場所にボトルネックが生まれます。&lt;/p&gt;

&lt;p&gt;例えば「SELECTクエリーを叩く回数が多くても、index効いてるから大丈夫だろう」と思っていても、WebサーバとDBサーバが分かれていると、二点間の通信時間が底上げされます。&lt;/p&gt;

&lt;p&gt;本番環境ではDBとの通信コストの観点が必要なのに、開発環境ではそれが抜けた環境になっているため、慣れていないと気づきにくい観点とも言えます。&lt;/p&gt;

&lt;p&gt;なので開発中でも通信コストが考慮された結果が分かる開発環境を2つのMacを使って実現してみようと思います。&lt;/p&gt;

&lt;p&gt;ちなみに単純な興味です。&lt;/p&gt;

&lt;h2 id=&quot;準備するもの&quot;&gt;準備するもの&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac 2台(名称としてMacWとMacDと名付けます)&lt;/li&gt;
  &lt;li&gt;同じローカルネットワークに繋がっていること(つまり同じWi-Fiに繋がっていればOKです)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;構築する環境の構成について&quot;&gt;構築する環境の構成について&lt;/h2&gt;

&lt;p&gt;大枠で構成についてまとめるとこんな感じになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacWにRailsアプリを立ち上げる&lt;/li&gt;
  &lt;li&gt;MacDにMySQLサーバーを立ち上げる&lt;/li&gt;
  &lt;li&gt;ローカルの開発環境なのでセキュリティは意識しない&lt;/li&gt;
  &lt;li&gt;MySQLを外部アクセスを許可する設定にする&lt;/li&gt;
  &lt;li&gt;MySQLに外部アクセス用のユーザーを作成する&lt;/li&gt;
  &lt;li&gt;RailsアプリのDB接続先をMacDのホスト名、ユーザーに設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重要なキーワードは以下の3つとなります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacDが外部からアクセスされる準備&lt;/li&gt;
  &lt;li&gt;MySQLが外部からアクセスされる準備&lt;/li&gt;
  &lt;li&gt;Railsが外部DBにアクセスする準備&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macdがmacwからアクセスできる準備をする&quot;&gt;MacDがMacWからアクセスできる準備をする&lt;/h2&gt;

&lt;p&gt;アクセスするには2つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ローカルIPアドレスを指定&lt;/li&gt;
  &lt;li&gt;ローカルホスト名を指定&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ローカルipアドレスを指定&quot;&gt;ローカルIPアドレスを指定&lt;/h3&gt;

&lt;p&gt;これはローカルネットワーク内においてIPアドレスを直接使う方法です。 一時的であれば最も簡単です。&lt;/p&gt;

&lt;p&gt;Macで自分のローカルネットワークを調べる方法は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; で調べます。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ifconfig | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;192 inet 192.168.11.3 netmask 0xffffff00 broadcast 192.168.11.255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.11.3&lt;/code&gt; というのが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; を叩いたPCにIPアドレスになります。&lt;/p&gt;

&lt;h4 id=&quot;メリット&quot;&gt;メリット&lt;/h4&gt;

&lt;p&gt;とにかく楽。に尽きます。&lt;/p&gt;

&lt;h4 id=&quot;デメリット&quot;&gt;デメリット&lt;/h4&gt;

&lt;p&gt;IPアドレスの記入部を更新する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;ローカルホスト名を指定&quot;&gt;ローカルホスト名を指定&lt;/h3&gt;

&lt;p&gt;こちらはMac自身にホスト名を定義することで、IPアドレスに依存せず常に固定のホスト名で接続することが可能になります。 こちらの記事にまとめてあります。&lt;/p&gt;

&lt;h2 id=&quot;mysqlが外部アクセスされる準備&quot;&gt;MySQLが外部アクセスされる準備&lt;/h2&gt;

&lt;p&gt;そもそもMySQLが外部からアクセスを許可していないのは、そう設定がされているためです。&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt; という設定がデフォルトは 127.0.0.1 つまり localhost からの接続のみ許可する設定になっています。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/local/etc/my.cnf# Default Homebrew MySQL server config[mysqld]# Only allow connections from localhostbind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;my.cnfの場所が分からない場合は、こちらの記事で確認してみてください。&lt;/p&gt;

&lt;p&gt;my.cnfに&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;でIPを指定することで、そのIPからの通信を許可します。 ちなみに注意事項としては、MacDのIPアドレスになります。 MacWのIPアドレスではありません。&lt;/p&gt;

&lt;p&gt;まず前提知識として、PCには &lt;strong&gt;複数のネットワークインターフェイスがあります。&lt;/strong&gt; その中のどのネットワークインターフェイスを許可するのかが&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;になります。 先程&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;のデフォルトはlocalhostと説明したように、デフォルトではlocalhostからのアクセスのみを許可しています。&lt;/p&gt;

&lt;p&gt;今回はパブリック環境でどこからでも誰からでもアクセスできる本番環境と違って、自宅や職場の同一Wi-Fi環境下での話なのでアクセス制限かけたりセキュリティの部分には気を使っていません。 なので &lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt; には &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; を設定します。 これは &lt;strong&gt;制限なし&lt;/strong&gt; の指定になります。どのネットワークインターフェイスからでもアクセスできます。 ちなみに全ての&lt;code class=&quot;highlighter-rouge&quot;&gt;bind-address&lt;/code&gt;をコメントアウトすると同様に無条件で受け付けることになります。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/local/etc/my.cnf# Default Homebrew MySQL server config[mysqld]# Only allow connections from localhost# bind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1bind-address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定したらリスタートします。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql.server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一応はローカルネットワーク外からルーターのグローバルネットワークのIPとMacDのローカルIP、MySQLが解放してるポート番号などが分かれば、外部からのアクセスは恐らく可能かとは思いますが、 近辺依存ではありますが、自宅近辺の住民が自分のWi-Fi不正アクセスされるリスクは低いかなと思ってます。（ここらへんは詳しくはないので鵜呑みではなく、自己責任でお願いします）&lt;/p&gt;

&lt;h3 id=&quot;mysql内に外部からアクセスするユーザー用意する&quot;&gt;MySQL内に外部からアクセスするユーザー用意する&lt;/h3&gt;

&lt;p&gt;MySQLの外部からアクセスする準備ができたら、今度は外部からアクセス用のユーザーを用意します。&lt;/p&gt;

&lt;p&gt;例えば下記のようなユーザーを作る場合は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ユーザー名: hoge&lt;/li&gt;
  &lt;li&gt;パスワード: pass&lt;/li&gt;
  &lt;li&gt;対象IP: 192.16配下全部&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- ユーザー作成
create user &quot;hoge&quot;@&quot;192.168.%&quot; identified by &quot;pass&quot;;
-- 権限付与
mysql\&amp;gt; grant all on \*.\* to &quot;hoge&quot;@&quot;192.168.%&quot; identified by &quot;pass&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにすれば、ユーザー作成して対象DBへの権限設定がされます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql\&amp;gt; select user, host from mysql.user;
+------+-------------+
| user | host |
+------+-------------+
| hoge | 192.168.% |
+------+-------------+

mysql\&amp;gt; show grants for 'hoge'@'192.168.%';
+----------------------------------------------------------------+
| Grants for hoge@192.168.%
+----------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON \*.\* TO 'hoge'@'192.168.%' IDENTIFIED BY PASSWORD '\*196BDEDE2AE4F84CA44C47D54D78478C7E2BD7B7'
+----------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;外部から接続をテストする&quot;&gt;外部から接続をテストする&lt;/h2&gt;

&lt;p&gt;この段階で既に外部から接続できている環境になっているはずなので、他Macから接続をします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IPアドレス指定&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; hoge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 192.168.11.6 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ローカルホスト名指定&lt;/strong&gt; ホスト名が &lt;code class=&quot;highlighter-rouge&quot;&gt;fuga.local&lt;/code&gt; の場合&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; hoge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; fuga.local &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接続できれば外部からMySQLに接続できています。&lt;/p&gt;

&lt;h2 id=&quot;railsが外部dbにアクセスする準備&quot;&gt;Railsが外部DBにアクセスする準備&lt;/h2&gt;

&lt;p&gt;MySQLが外部からのアクセス準備が整えば後は簡単です。&lt;/p&gt;

&lt;p&gt;dataases.yml で接続先を指定するだけになります。&lt;/p&gt;

&lt;p&gt;IPアドレスが &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.11.6&lt;/code&gt;の場合&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hoge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pass&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.11.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;他は省略してます。&lt;/p&gt;

&lt;p&gt;これでRails立ち上げてDBにアクセスできれば完了です。&lt;/p&gt;

&lt;h2 id=&quot;気になる速度差を測ってみる&quot;&gt;気になる速度差を測ってみる&lt;/h2&gt;

&lt;p&gt;1PCでUnixドメインソケット通信した場合と2PCでTCP/IP通信した場合で平均値を出してみました。&lt;/p&gt;

&lt;p&gt;1万件のUser(name: string)を事前に用意し、&lt;code class=&quot;highlighter-rouge&quot;&gt;@users = User.all&lt;/code&gt; が呼ばれて一覧を返すcontroller に対し&lt;code class=&quot;highlighter-rouge&quot;&gt;GET http://localhost:3000/users&lt;/code&gt; を5回呼び出し、最速と最遅を抜いた3つで平均値を出して測定しました。&lt;/p&gt;

&lt;h3 id=&quot;unixドメインソケット通信&quot;&gt;Unixドメインソケット通信&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;8.6ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.5ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.5ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8.3ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7.6ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(8.5 + 8.5 + 8.3) / 3 = &lt;strong&gt;8.4333333333ms&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;tcpip通信&quot;&gt;TCP/IP通信&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;291.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;289.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;194.4ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;159.9ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;142.7ms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(289.9 + 194.4 + 159.9) / 3 = &lt;strong&gt;214.7333333333ms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;およそ 26倍差がついています。 MySQLサーバーがRailsサーバーよりスペックが劣ってはいますが、それを考慮しても大分差が開いているでしょう。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;本番環境にできるだけ寄せる構成をしておくことで、本番でしか発覚しない問題を開発段階で気づいて排除できるので、PC台数に余裕があるなら、リリース前だけでも試す価値はあるかなと思いました。&lt;/p&gt;

&lt;h2 id=&quot;注意事項&quot;&gt;注意事項&lt;/h2&gt;

&lt;p&gt;開発環境前提においての構成であるため、セキュリティとしてはGoodではありません。 特に公共のネットワーク配下ではやめたほうがいいです。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="active-record" /><category term="mysql" /><summary type="html">開発中はMacでRailsアプリを開発してて、「いざ本番環境へデプロイ！完了！」って一息ついた矢先、「なんか重い…」「想定より遅い…」なんて経験ありませんか？</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry><entry><title type="html">正規表現で否定を表現する</title><link href="https://blog.mothule.com/tools/regexp/regexp-not-expression" rel="alternate" type="text/html" title="正規表現で否定を表現する" /><published>2019-08-05T00:00:00+09:00</published><updated>2019-08-05T00:00:00+09:00</updated><id>https://blog.mothule.com/tools/regexp/regexp-not-expression</id><content type="html" xml:base="https://blog.mothule.com/tools/regexp/regexp-not-expression">&lt;p&gt;常時必要ではないけれど、忘れた頃にやってきて、覚えようにも複雑な正規表現の否定表現。&lt;/p&gt;

&lt;p&gt;いっつも検索していろんなサイトにお世話になっているけれど、訪れるサイトはいつもバラバラで、欲しい情報を見つけるのに時間がかかる。そんな毎日なので、自分用に否定表現用の記事を用意しました。&lt;/p&gt;

&lt;h2 id=&quot;書き方&quot;&gt;書き方&lt;/h2&gt;
&lt;p&gt;結論から先に書きます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^(?!.\*\&amp;lt;ここに検索ワード\&amp;gt;).+$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;何が起きているのか&quot;&gt;何が起きているのか？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;^ : 行の先頭を表す&lt;/li&gt;
  &lt;li&gt;( : グルーピング&lt;/li&gt;
  &lt;li&gt;?! : 否定の先読み. 部分式が後にマッチしないなら、真とする。&lt;/li&gt;
  &lt;li&gt;.* : 任意の文字列(0文字以上)&lt;/li&gt;
  &lt;li&gt;) : グルーピング&lt;/li&gt;
  &lt;li&gt;.+ : 任意の文字列(1文字以上)&lt;/li&gt;
  &lt;li&gt;$: 行の末尾を表す&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;試してみる&quot;&gt;試してみる&lt;/h2&gt;

&lt;p&gt;色々と削って動きを見てみることしました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;あいうえお
かきくけこ
あい
あ
い
いう


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;に対して色々試してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;正規表現&lt;/th&gt;
      &lt;th&gt;結果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あ)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;「あ」の入っていない文字列と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あ)$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;空改行のみヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!あい).&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;「あい」の入っていない行の1文字目と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!いう).*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行の先頭に「いう」の入っていない行と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行と空改行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行がヒットする&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;行に「いう」の入っていない行の先頭がヒットする&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;()は()内の文字を1文字として扱う. セットみたいなイメージ.&lt;/li&gt;
  &lt;li&gt;?!は否定の先読み、後ろの続く言葉がヒットしないなら真となる&lt;/li&gt;
  &lt;li&gt;(?!.*いう)とは「いう」がないなら真となる、いわば「いう否定セット」みたいなもの&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(?!.*いう).+$&lt;/code&gt;とは「いう否定セット」の入っていない１文字以上を検索となる&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="tools" /><category term="regexp" /><summary type="html">常時必要ではないけれど、忘れた頃にやってきて、覚えようにも複雑な正規表現の否定表現。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.mothule.com/assets/images/site-image.png" /></entry></feed>