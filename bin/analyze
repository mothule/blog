#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'src/all'
require 'optparse'

show_tree = false
show_articles = false
op = OptionParser.new
op.on('-t', '--tree', 'categories tree') { show_tree = true }
op.on('-a', '--articles', 'article list') { show_articles = true }
op.parse(ARGV)

class Article
  attr_accessor :title
  attr_accessor :categories
  attr_accessor :tags
  attr_accessor :published_at

  class << self
    def import_from(path:)
      text = File.read(path)
      title = text.match(/title: (.*)/)&.captures&.first || 'untitled'
      categories = text.match(/categories: (.*)/)&.captures&.first&.split(' ') || []
      tags = text.match(/tags: (.*)/)&.captures&.first&.split(' ') || []

      published_at = if path.include?('_drafts')
                       'no publish'
                     else
                       File.basename(path).match(/(\d{4}-\d{2}-\d{2})/)&.captures&.first
                     end

      Article.new(title: title, categories: categories, tags: tags, published_at: published_at)
    end

    def report(articles:)
      categories_width = max_length_categories(articles: articles)

      articles.each do |article|
        puts article.to_s(categories_width: categories_width)
      end
    end

    def max_length_categories(articles:)
      articles.map(&:categories).map { |c| c.join(' ') }.map(&:length).max
    end
  end

  def initialize(title:, categories:, tags:, published_at:)
    @title = title
    @categories = categories
    @tags = tags
    @published_at = published_at
  end

  def to_s(categories_width:)
    "#{date_with(width: 10)} | #{title_with(width: 55)} |  #{categories.join(' ').ljust(categories_width, ' ').green} | #{tags.join(' ').magenta}"
  end

  private

  def date_with(width:)
    @published_at[0..width]
  end

  def title_with(width:)
    t = title[0..width]
    len = t.length + t.chars.reject(&:ascii_only?).length

    wide_width = 2 + width * 2

    space = ''
    space = ' ' * (wide_width - len) if wide_width - len > 0
    t + space
  end
end

class Node
  attr_accessor :parent
  attr_accessor :children
  attr_accessor :category
  attr_accessor :count

  def initialize(parent:, category:)
    @parent = parent
    @category = category
    @children = []
    @count = 1
  end

  def insert_child(child:)
    @children << child
  end

  def find_child_by_category(category:)
    @children.filter { |child| child.category == category }.first
  end

  def self.print(node:, depth:)
    indent_size = 2
    space = ' ' * depth * indent_size
    puts "#{space}#{node.category} : #{node.count}"
    node.children.each do |child|
      Node.print(node: child, depth: depth + 1)
    end
  end

  def increment_count
    @count += 1
  end
end

puts 'Analyzing...'

article_count = Dir.glob('./ws/_posts/**/*.md').count

root = Node.new(parent: nil, category: 'root')

articles = []

article_paths = Array.wrap(Dir.glob('./ws/_posts/**/*.md')) + Array.wrap(Dir.glob('./ws/_drafts/**/*.md'))
article_paths.each do |post_path|
  article = Article.import_from(path: post_path)
  articles << article
  categories = article.categories

  node = root
  categories.each do |category|
    child = node.find_child_by_category(category: category)
    if child.nil?
      child = Node.new(parent: node, category: category)
      node.insert_child(child: child)
    else
      child.increment_count
    end

    node = child
  end
end

puts "記事数: #{article_count}"
puts '------------------------------'
if show_tree
  Node.print(node: root, depth: 0)
  puts '------------------------------'
end

Article.report(articles: articles.sort_by { |a| a.published_at }) if show_articles
